
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Consola;

import java_cup.runtime.Symbol;
import Ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConsolaSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosConsola.class;
}

  /** Default constructor. */
  @Deprecated
  public ConsolaSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConsolaSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConsolaSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\036\002\000\002\002" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\010\010\000\002\016\006\000" +
    "\002\017\006\000\002\020\006\000\002\021\006\000\002" +
    "\022\006\000\002\023\003\000\002\023\003\000\002\024" +
    "\006\000\002\025\006\000\002\026\006\000\002\027\006" +
    "\000\002\030\006\000\002\031\006\000\002\032\006\000" +
    "\002\033\006\000\002\034\005\000\002\034\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\035" +
    "\005\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\014\005\000\002\014\003\000\002\013\011\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\004\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\007\006\000\002\004\005\000" +
    "\002\004\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\012\014\000\021\000\044\000\046\000\001" +
    "\002\000\012\014\017\021\021\044\007\046\022\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\010\002\uffd9\014\uffd9\015\uffd9\001\002\000\004\002\ufff2" +
    "\001\002\000\006\002\ufff0\015\116\001\002\000\004\002" +
    "\ufff7\001\002\000\004\002\ufff8\001\002\000\004\002\uffee" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\uffff\001" +
    "\002\000\040\025\110\026\103\027\167\030\105\031\112" +
    "\032\106\033\107\034\113\035\173\036\170\037\172\040" +
    "\174\041\171\042\111\046\104\001\002\000\004\002\ufff6" +
    "\001\002\000\024\005\047\014\050\020\044\021\154\023" +
    "\055\043\060\044\040\045\045\046\051\001\002\000\010" +
    "\002\uffda\015\uffda\016\037\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\ufff1\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\uffef\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufff3\001\002\000\010" +
    "\002\uffdc\014\uffdc\015\uffdc\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufff9\001\002\000\010\002\uffdb\014\uffdb" +
    "\015\uffdb\001\002\000\004\002\ufff5\001\002\000\022\005" +
    "\047\014\050\020\044\023\055\043\060\044\040\045\045" +
    "\046\051\001\002\000\032\002\uffbd\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014\uffbd\017\uffbd" +
    "\022\uffbd\024\uffbd\001\002\000\032\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9" +
    "\017\uffc9\022\uffc9\024\uffc9\001\002\000\032\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\014\uffca\017\uffca\022\uffca\024\uffca\001\002\000\032\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\014\uffc4\017\uffc4\022\uffc4\024\uffc4\001\002\000" +
    "\032\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\014\uffba\017\uffba\022\uffba\024\uffba\001" +
    "\002\000\032\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\014\uffbc\017\uffbc\022\uffbc\024" +
    "\uffbc\001\002\000\032\002\uffd8\004\066\005\067\006\064" +
    "\007\073\010\065\011\070\012\072\014\uffd8\017\uffd8\022" +
    "\uffd8\024\uffd8\001\002\000\022\005\047\014\050\020\044" +
    "\023\055\043\060\044\040\045\045\046\051\001\002\000" +
    "\024\025\110\026\103\030\105\031\112\032\106\033\107" +
    "\034\113\042\111\046\104\001\002\000\034\002\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\014\uffbb\016\037\017\uffbb\022\uffbb\024\uffbb\001\002\000" +
    "\032\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\014\uffc1\017\uffc1\022\uffc1\024\uffc1\001" +
    "\002\000\032\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\014\uffc8\017\uffc8\022\uffc8\024" +
    "\uffc8\001\002\000\032\002\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\017\uffc3\022" +
    "\uffc3\024\uffc3\001\002\000\022\005\047\014\050\020\044" +
    "\023\055\043\060\044\040\045\045\046\051\001\002\000" +
    "\032\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\014\uffc2\017\uffc2\022\uffc2\024\uffc2\001" +
    "\002\000\032\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\014\uffc0\017\uffc0\022\uffc0\024" +
    "\uffc0\001\002\000\032\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\017\uffbe\022" +
    "\uffbe\024\uffbe\001\002\000\032\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\017" +
    "\uffc5\022\uffc5\024\uffc5\001\002\000\032\002\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014" +
    "\uffbf\017\uffbf\022\uffbf\024\uffbf\001\002\000\022\004\066" +
    "\005\067\006\064\007\073\010\065\011\070\012\072\024" +
    "\071\001\002\000\022\005\047\014\050\020\044\023\055" +
    "\043\060\044\040\045\045\046\051\001\002\000\022\005" +
    "\047\014\050\020\044\023\055\043\060\044\040\045\045" +
    "\046\051\001\002\000\022\005\047\014\050\020\044\023" +
    "\055\043\060\044\040\045\045\046\051\001\002\000\022" +
    "\005\047\014\050\020\044\023\055\043\060\044\040\045" +
    "\045\046\051\001\002\000\022\005\047\014\050\020\044" +
    "\023\055\043\060\044\040\045\045\046\051\001\002\000" +
    "\032\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\014\uffc6\017\uffc6\022\uffc6\024\uffc6\001" +
    "\002\000\022\005\047\014\050\020\044\023\055\043\060" +
    "\044\040\045\045\046\051\001\002\000\022\005\047\014" +
    "\050\020\044\023\055\043\060\044\040\045\045\046\051" +
    "\001\002\000\032\002\uffce\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\070\012\072\014\uffce\017\uffce\022\uffce" +
    "\024\uffce\001\002\000\032\002\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\070\012\072\014\uffcb\017\uffcb" +
    "\022\uffcb\024\uffcb\001\002\000\032\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\070\012\072\014\uffcc" +
    "\017\uffcc\022\uffcc\024\uffcc\001\002\000\032\002\uffd0\004" +
    "\uffd0\005\uffd0\006\064\007\073\010\065\011\070\012\072" +
    "\014\uffd0\017\uffd0\022\uffd0\024\uffd0\001\002\000\032\002" +
    "\uffd1\004\uffd1\005\uffd1\006\064\007\073\010\065\011\070" +
    "\012\072\014\uffd1\017\uffd1\022\uffd1\024\uffd1\001\002\000" +
    "\032\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\070\012\072\014\uffcd\017\uffcd\022\uffcd\024\uffcd\001" +
    "\002\000\032\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\010\uffcf\011\070\012\072\014\uffcf\017\uffcf\022\uffcf\024" +
    "\uffcf\001\002\000\022\005\047\014\050\020\044\023\055" +
    "\043\060\044\040\045\045\046\051\001\002\000\024\005" +
    "\047\014\050\020\044\021\021\023\055\043\060\044\040" +
    "\045\045\046\051\001\002\000\006\021\021\046\123\001" +
    "\002\000\022\005\047\014\050\020\044\023\055\043\060" +
    "\044\040\045\045\046\051\001\002\000\010\021\021\044" +
    "\007\046\115\001\002\000\022\005\047\014\050\020\044" +
    "\023\055\043\060\044\040\045\045\046\051\001\002\000" +
    "\010\021\021\044\007\046\115\001\002\000\006\021\021" +
    "\046\123\001\002\000\010\021\021\044\007\046\115\001" +
    "\002\000\006\014\117\015\116\001\002\000\010\002\uffda" +
    "\014\uffda\015\uffda\001\002\000\010\021\021\044\007\046" +
    "\115\001\002\000\032\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\017\uffe4\022" +
    "\uffe4\024\uffe4\001\002\000\010\002\uffdd\014\uffdd\015\uffdd" +
    "\001\002\000\004\014\uffe6\001\002\000\004\014\124\001" +
    "\002\000\004\014\uffe7\001\002\000\032\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014" +
    "\uffe8\017\uffe8\022\uffe8\024\uffe8\001\002\000\006\014\126" +
    "\015\116\001\002\000\032\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\017\uffde" +
    "\022\uffde\024\uffde\001\002\000\022\004\066\005\067\006" +
    "\064\007\073\010\065\011\070\012\072\014\130\001\002" +
    "\000\032\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\017\uffeb\022\uffeb\024\uffeb" +
    "\001\002\000\006\014\132\015\116\001\002\000\032\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\014\uffe5\017\uffe5\022\uffe5\024\uffe5\001\002\000" +
    "\022\004\066\005\067\006\064\007\073\010\065\011\070" +
    "\012\072\014\134\001\002\000\032\002\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec" +
    "\017\uffec\022\uffec\024\uffec\001\002\000\004\014\136\001" +
    "\002\000\032\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\017\uffe9\022\uffe9\024" +
    "\uffe9\001\002\000\006\014\uffb7\017\uffb7\001\002\000\024" +
    "\004\066\005\067\006\064\007\073\010\065\011\070\012" +
    "\072\014\uffb6\017\uffb6\001\002\000\006\014\143\017\144" +
    "\001\002\000\006\014\uffb5\017\uffb5\001\002\000\032\002" +
    "\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\017\uffb9\022\uffb9\024\uffb9\001\002\000" +
    "\024\005\047\014\050\020\044\021\021\023\055\043\060" +
    "\044\040\045\045\046\051\001\002\000\006\014\uffb8\017" +
    "\uffb8\001\002\000\022\004\066\005\067\006\064\007\073" +
    "\010\065\011\070\012\072\014\147\001\002\000\032\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\014\uffea\017\uffea\022\uffea\024\uffea\001\002\000" +
    "\032\002\uffc7\004\uffc7\005\uffc7\006\064\007\073\010\065" +
    "\011\070\012\072\014\uffc7\017\uffc7\022\uffc7\024\uffc7\001" +
    "\002\000\004\022\166\001\002\000\024\004\066\005\067" +
    "\006\064\007\073\010\065\011\070\012\072\017\uffd3\022" +
    "\uffd3\001\002\000\004\022\uffd5\001\002\000\022\005\047" +
    "\014\050\020\044\023\055\043\060\044\040\045\045\046" +
    "\051\001\002\000\006\017\156\022\uffd6\001\002\000\022" +
    "\005\047\014\050\020\044\023\055\043\060\044\040\045" +
    "\045\046\051\001\002\000\024\004\066\005\067\006\064" +
    "\007\073\010\065\011\070\012\072\017\uffd4\022\uffd4\001" +
    "\002\000\006\017\156\022\161\001\002\000\004\017\162" +
    "\001\002\000\004\021\163\001\002\000\022\005\047\014" +
    "\050\020\044\023\055\043\060\044\040\045\045\046\051" +
    "\001\002\000\006\017\156\022\165\001\002\000\004\022" +
    "\uffd2\001\002\000\012\002\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\001\002\000\004\046\207\001\002\000\010\021\021\044" +
    "\007\046\115\001\002\000\010\021\021\044\007\046\115" +
    "\001\002\000\010\021\021\044\007\046\115\001\002\000" +
    "\010\021\021\044\007\046\115\001\002\000\010\021\021" +
    "\044\007\046\115\001\002\000\006\014\176\015\116\001" +
    "\002\000\004\002\uffe0\001\002\000\006\014\200\015\116" +
    "\001\002\000\004\002\uffe3\001\002\000\006\014\202\015" +
    "\116\001\002\000\004\002\uffe1\001\002\000\006\014\204" +
    "\015\116\001\002\000\004\002\uffdf\001\002\000\006\014" +
    "\206\015\116\001\002\000\004\002\uffe2\001\002\000\004" +
    "\013\210\001\002\000\010\021\021\044\007\046\115\001" +
    "\002\000\006\014\212\015\116\001\002\000\004\002\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\004\036\003\001\001\000\052\005" +
    "\031\006\015\007\013\010\014\011\034\016\032\017\026" +
    "\020\024\021\027\022\033\024\012\025\011\026\017\027" +
    "\035\030\022\031\030\032\007\033\023\034\010\035\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\042\012\150\013\152\014\154\015\151\016\060\017" +
    "\055\020\051\021\056\022\061\024\041\025\040\033\052" +
    "\035\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\042\015\045\016\060\017" +
    "\055\020\051\021\056\022\061\024\041\025\040\033\052" +
    "\035\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\042\015\147\016" +
    "\060\017\055\020\051\021\056\022\061\024\041\025\040" +
    "\033\052\035\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\042\015\062\016\060\017\055\020\051\021" +
    "\056\022\061\024\041\025\040\033\052\035\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\042\015\101\016\060\017\055\020\051\021\056\022" +
    "\061\024\041\025\040\033\052\035\053\001\001\000\030" +
    "\007\042\015\100\016\060\017\055\020\051\021\056\022" +
    "\061\024\041\025\040\033\052\035\053\001\001\000\030" +
    "\007\042\015\077\016\060\017\055\020\051\021\056\022" +
    "\061\024\041\025\040\033\052\035\053\001\001\000\030" +
    "\007\042\015\076\016\060\017\055\020\051\021\056\022" +
    "\061\024\041\025\040\033\052\035\053\001\001\000\030" +
    "\007\042\015\075\016\060\017\055\020\051\021\056\022" +
    "\061\024\041\025\040\033\052\035\053\001\001\000\002" +
    "\001\001\000\030\007\042\015\074\016\060\017\055\020" +
    "\051\021\056\022\061\024\041\025\040\033\052\035\053" +
    "\001\001\000\030\007\042\015\073\016\060\017\055\020" +
    "\051\021\056\022\061\024\041\025\040\033\052\035\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\042\015\145\016\060\017" +
    "\055\020\051\021\056\022\061\024\041\025\040\033\052" +
    "\035\053\001\001\000\036\003\136\004\140\007\042\011" +
    "\141\015\137\016\060\017\055\020\051\021\056\022\061" +
    "\024\041\025\040\033\052\035\053\001\001\000\006\011" +
    "\120\023\134\001\001\000\030\007\042\015\132\016\060" +
    "\017\055\020\051\021\056\022\061\024\041\025\040\033" +
    "\052\035\053\001\001\000\010\005\031\011\034\034\130" +
    "\001\001\000\030\007\042\015\126\016\060\017\055\020" +
    "\051\021\056\022\061\024\041\025\040\033\052\035\053" +
    "\001\001\000\010\005\031\011\034\034\124\001\001\000" +
    "\006\011\120\023\121\001\001\000\010\005\031\011\034" +
    "\034\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\117\011\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\144\007\042\011\141\015\137\016\060\017" +
    "\055\020\051\021\056\022\061\024\041\025\040\033\052" +
    "\035\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\042\014\157\015" +
    "\151\016\060\017\055\020\051\021\056\022\061\024\041" +
    "\025\040\033\052\035\053\001\001\000\002\001\001\000" +
    "\030\007\042\015\156\016\060\017\055\020\051\021\056" +
    "\022\061\024\041\025\040\033\052\035\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\042\014\163\015\151\016\060\017" +
    "\055\020\051\021\056\022\061\024\041\025\040\033\052" +
    "\035\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\031\011\034" +
    "\034\204\001\001\000\010\005\031\011\034\034\202\001" +
    "\001\000\010\005\031\011\034\034\200\001\001\000\010" +
    "\005\031\011\034\034\176\001\001\000\010\005\031\011" +
    "\034\034\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\031\011\034\034\210\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConsolaSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConsolaSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConsolaSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
   
    public static Nodo raiz;
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConsolaSintactico$actions {



  private final ConsolaSintactico parser;

  /** Constructor */
  CUP$ConsolaSintactico$actions(ConsolaSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action_part00000000(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConsolaSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ConsolaSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConsolaSintactico$parser.done_parsing();
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
 
                System.out.println("Empezo Consola \n");
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 FUNCIONES_PROPIAS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  System.out.println("Finalizo Consola");
                parser.raiz = nodo; 
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES_PROPIAS ::= DECLARA_LISTA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES_PROPIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES_PROPIAS ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES_PROPIAS ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES_PROPIAS ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES_PROPIAS ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES_PROPIAS ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES_PROPIAS ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES_PROPIAS ::= REVERS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES_PROPIAS ::= IMPR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES_PROPIAS ::= PAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES_PROPIAS ::= ASC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONES_PROPIAS ::= DESC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES_PROPIAS ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_PROPIAS ::= CONCATENA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_PROPIAS ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES_PROPIAS ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARA_LISTA ::= dolar let id igual CONCATENA dolar 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("D_Lista");
                Nodo name = new Nodo(nombre);
                nuevo.Hijo(name);
                nuevo.Hijo(exp);
                RESULT = nuevo;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECLARA_LISTA",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int calculaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int calcularight = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Object calcula = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
                Nodo cal = new Nodo("Calcular");
                Nodo expresion = new Nodo("Exp");
                expresion.Hijo(exp);
                cal.Hijo(expresion);
                RESULT = cal;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",12, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUCC ::= dolar succ EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Succ");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUCC",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECC ::= dolar decc EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Decc");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECC",14, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MIN ::= dolar min M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Min");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MIN",15, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAX ::= dolar max M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Max");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAX",16, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // M ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 //Nodo nuevo = new Nodo("M");
           Nodo nuevo = new Nodo("id"); 
           Nodo i = new Nodo(id); 
           //i2.Hijo(i);
           nuevo.Hijo(i);
           RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",17, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // M ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 //Nodo nuevo = new Nodo("M"); nuevo.Hijo(lista); 
            RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",17, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUM ::= dolar sum CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Sum");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUM",18, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRODUCT ::= dolar product CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Product");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PRODUCT",19, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REVERS ::= dolar revers CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Revers");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("REVERS",20, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPR ::= dolar impr CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Impr");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("IMPR",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PAR ::= dolar par CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Par");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PAR",22, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASC ::= dolar asc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Asc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("ASC",23, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DESC ::= dolar desc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Desc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DESC",24, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LENGTH ::= dolar tam CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Length");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LENGTH",25, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONCATENA ::= CONCATENA concatena C_L 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 
                c.Hijo(l);  
                RESULT = c; 
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",26, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONCATENA ::= C_L 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                Nodo lista = new Nodo("Concatena");
                lista.Hijo(l);
                RESULT = lista;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",26, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_L ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = lista;
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_L ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C_L ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INDICE ::= id indice EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Indice");
                Nodo nombre = new Nodo(id);
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(nombre);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INDICE",27, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA ::= corAbre LISTAS corCierra 
            {
              Nodo RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo listas = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		 RESULT = listas; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",7, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTAS ::= EXPRESIONES 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = exp; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",8, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAS ::= MAS_CORCH 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",8, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= EXPRESIONES coma EXP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 
                    Nodo lista = new Nodo("Lista");
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MAS_CORCH ::= corAbre EXPRESIONES corCierra coma corAbre EXPRESIONES corCierra 
            {
              Nodo RESULT =null;
		int nivel1left = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)).left;
		int nivel1right = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)).right;
		Nodo nivel1 = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)).value;
		int nivel2left = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int nivel2right = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo nivel2 = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		Nodo nivel = new Nodo("2Niveles");
                    nivel.Hijo(nivel1);
                    nivel.Hijo(nivel2);
                    RESULT = nivel;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",9, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP por EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP residuo EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("mod");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("sqrt");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("pot");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= menos EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("Unario");
            nuevo.Hijo(nodo);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= entero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= porcentaje 
            {
              Nodo RESULT =null;
		int porcentajeleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int porcentajeright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object porcentaje = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = new Nodo(porcentaje); 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LLAMA_FUNCION ::= dolar id PARAMETROS dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
                    Nodo nuevo = new Nodo("LlamaFunc");
                    Nodo nombre = new Nodo(id);
                    nuevo.Hijo(nombre);
                    nuevo.Hijo(param);
                    RESULT = nuevo;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LLAMA_FUNCION",5, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETROS ::= PARAMETROS coma L_PARAM 
            {
              Nodo RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  
                    param.Hijo(p); 
                    RESULT= param;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROS ::= L_PARAM 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("Parametros");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_PARAM ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                RESULT = exp;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_PARAM ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConsolaSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ConsolaSintactico$do_action_part00000000(
                               CUP$ConsolaSintactico$act_num,
                               CUP$ConsolaSintactico$parser,
                               CUP$ConsolaSintactico$stack,
                               CUP$ConsolaSintactico$top);
    }
}

}
