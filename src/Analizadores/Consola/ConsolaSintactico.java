
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Consola;

import java_cup.runtime.Symbol;
import Ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConsolaSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosConsola.class;
}

  /** Default constructor. */
  @Deprecated
  public ConsolaSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConsolaSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConsolaSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\042\002\000\002\002" +
    "\004\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\012\010\000\002\020\006\000" +
    "\002\021\006\000\002\022\006\000\002\023\006\000\002" +
    "\024\006\000\002\025\003\000\002\025\003\000\002\030" +
    "\006\000\002\031\006\000\002\032\006\000\002\033\006" +
    "\000\002\034\006\000\002\035\006\000\002\036\006\000" +
    "\002\037\006\000\002\040\005\000\002\040\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\041\006\000\002\026\004\000\002\026\002" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\016\005\000\002\016\003\000\002\015\005\000" +
    "\002\015\003\000\002\006\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\011\010\000\002\007\003\000\002\007\002\000\002" +
    "\004\005\000\002\004\003\000\002\003\003\000\002\003" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\014\014\000\020\000\021\000\046\000\050" +
    "\000\001\002\000\014\014\020\020\015\021\022\046\007" +
    "\050\023\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\010\002\uffd9\014\uffd9\015\uffd9\001\002" +
    "\000\004\002\ufff2\001\002\000\006\002\ufff0\015\121\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufff8\001\002" +
    "\000\004\002\uffee\001\002\000\010\002\uffd8\014\uffd8\015" +
    "\uffd8\001\002\000\004\002\ufffe\001\002\000\004\002\uffff" +
    "\001\002\000\040\027\113\030\106\031\236\032\110\033" +
    "\115\034\111\035\112\036\116\037\242\040\237\041\241" +
    "\042\243\043\240\044\114\050\107\001\002\000\004\002" +
    "\ufff6\001\002\000\024\005\141\014\050\020\136\021\224" +
    "\023\146\045\151\046\132\047\140\050\142\001\002\000" +
    "\010\002\uffda\015\uffda\016\040\001\002\000\004\002\ufff4" +
    "\001\002\000\004\002\ufff1\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\uffef\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufff3\001\002\000" +
    "\010\002\uffdc\014\uffdc\015\uffdc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\ufff9\001\002\000\010\002\uffdb\014" +
    "\uffdb\015\uffdb\001\002\000\004\002\ufff5\001\002\000\022" +
    "\005\047\014\050\020\045\023\055\045\060\046\041\047" +
    "\046\050\051\001\002\000\036\002\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\016" +
    "\uffc1\017\uffc1\022\uffc1\024\uffc1\026\uffc1\001\002\000\036" +
    "\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\014\uffcc\016\uffcc\017\uffcc\022\uffcc\024\uffcc" +
    "\026\uffcc\001\002\000\036\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\022\uffcd\024\uffcd\026\uffcd\001\002\000\036\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\014\uffc7\016\uffc7\017\uffc7\022\uffc7\024\uffc7\026" +
    "\uffc7\001\002\000\036\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\016\uffbe\017" +
    "\uffbe\022\uffbe\024\uffbe\026\uffbe\001\002\000\036\002\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\022\uffc0\024\uffc0\026\uffc0" +
    "\001\002\000\022\005\047\014\050\020\045\023\055\045" +
    "\060\046\041\047\046\050\051\001\002\000\024\027\113" +
    "\030\106\032\110\033\115\034\111\035\112\036\116\044" +
    "\114\050\107\001\002\000\036\002\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\016" +
    "\uffbf\017\uffbf\022\uffbf\024\uffbf\026\uffbf\001\002\000\036" +
    "\002\uffd5\004\066\005\067\006\064\007\073\010\065\011" +
    "\070\012\072\014\uffd5\016\104\017\uffd5\022\uffd5\024\uffd5" +
    "\026\uffd5\001\002\000\036\002\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\016\uffcb" +
    "\017\uffcb\022\uffcb\024\uffcb\026\uffcb\001\002\000\036\002" +
    "\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\014\uffc5\016\uffc5\017\uffc5\022\uffc5\024\uffc5\026" +
    "\uffc5\001\002\000\022\005\047\014\050\020\045\023\055" +
    "\045\060\046\041\047\046\050\051\001\002\000\036\002" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\016\uffc6\017\uffc6\022\uffc6\024\uffc6\026" +
    "\uffc6\001\002\000\036\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4\016\uffc4\017" +
    "\uffc4\022\uffc4\024\uffc4\026\uffc4\001\002\000\036\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\014\uffc2\016\uffc2\017\uffc2\022\uffc2\024\uffc2\026\uffc2" +
    "\001\002\000\036\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\022\uffc8\024\uffc8\026\uffc8\001\002\000\036\002\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\014\uffc3\016\uffc3\017\uffc3\022\uffc3\024\uffc3\026\uffc3\001" +
    "\002\000\022\004\066\005\067\006\064\007\073\010\065" +
    "\011\070\012\072\024\071\001\002\000\022\005\047\014" +
    "\050\020\045\023\055\045\060\046\041\047\046\050\051" +
    "\001\002\000\022\005\047\014\050\020\045\023\055\045" +
    "\060\046\041\047\046\050\051\001\002\000\022\005\047" +
    "\014\050\020\045\023\055\045\060\046\041\047\046\050" +
    "\051\001\002\000\022\005\047\014\050\020\045\023\055" +
    "\045\060\046\041\047\046\050\051\001\002\000\022\005" +
    "\047\014\050\020\045\023\055\045\060\046\041\047\046" +
    "\050\051\001\002\000\036\002\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\016\uffc9" +
    "\017\uffc9\022\uffc9\024\uffc9\026\uffc9\001\002\000\022\005" +
    "\047\014\050\020\045\023\055\045\060\046\041\047\046" +
    "\050\051\001\002\000\022\005\047\014\050\020\045\023" +
    "\055\045\060\046\041\047\046\050\051\001\002\000\036" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\070\012\072\014\uffd1\016\uffd1\017\uffd1\022\uffd1\024\uffd1" +
    "\026\uffd1\001\002\000\036\002\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\070\012\072\014\uffce\016\uffce" +
    "\017\uffce\022\uffce\024\uffce\026\uffce\001\002\000\036\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\070" +
    "\012\072\014\uffcf\016\uffcf\017\uffcf\022\uffcf\024\uffcf\026" +
    "\uffcf\001\002\000\036\002\uffd3\004\uffd3\005\uffd3\006\064" +
    "\007\073\010\065\011\070\012\072\014\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\024\uffd3\026\uffd3\001\002\000\036\002\uffd4" +
    "\004\uffd4\005\uffd4\006\064\007\073\010\065\011\070\012" +
    "\072\014\uffd4\016\uffd4\017\uffd4\022\uffd4\024\uffd4\026\uffd4" +
    "\001\002\000\036\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\070\012\072\014\uffd0\016\uffd0\017\uffd0" +
    "\022\uffd0\024\uffd0\026\uffd0\001\002\000\036\002\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\070\012\072" +
    "\014\uffd2\016\uffd2\017\uffd2\022\uffd2\024\uffd2\026\uffd2\001" +
    "\002\000\034\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\014\uffd7\017\uffd7\022\uffd7\024" +
    "\uffd7\026\uffd7\001\002\000\022\005\047\014\050\020\045" +
    "\023\055\045\060\046\041\047\046\050\051\001\002\000" +
    "\034\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\014\uffd6\017\uffd6\022\uffd6\024\uffd6\026" +
    "\uffd6\001\002\000\022\005\141\014\050\020\136\023\146" +
    "\045\151\046\132\047\140\050\142\001\002\000\004\025" +
    "\204\001\002\000\006\021\022\050\126\001\002\000\022" +
    "\005\141\014\050\020\136\023\146\045\151\046\132\047" +
    "\140\050\142\001\002\000\012\020\015\021\022\046\007" +
    "\050\120\001\002\000\022\005\141\014\050\020\136\023" +
    "\146\045\151\046\132\047\140\050\142\001\002\000\012" +
    "\020\015\021\022\046\007\050\120\001\002\000\006\021" +
    "\022\050\126\001\002\000\012\020\015\021\022\046\007" +
    "\050\120\001\002\000\006\014\122\015\121\001\002\000" +
    "\010\002\uffda\014\uffda\015\uffda\001\002\000\012\020\015" +
    "\021\022\046\007\050\120\001\002\000\036\002\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\014\uffe4\016\uffe4\017\uffe4\022\uffe4\024\uffe4\026\uffe4\001" +
    "\002\000\010\002\uffdd\014\uffdd\015\uffdd\001\002\000\004" +
    "\014\uffe6\001\002\000\004\014\127\001\002\000\004\014" +
    "\uffe7\001\002\000\036\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\022\uffe8\024\uffe8\026\uffe8\001\002\000\006\014\131" +
    "\015\121\001\002\000\036\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\016\uffde" +
    "\017\uffde\022\uffde\024\uffde\026\uffde\001\002\000\032\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\014\uffa1\017\uffa1\022\uffa1\024\uffa1\026\uffa1\001\002\000" +
    "\032\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\014\uffad\017\uffad\022\uffad\024\uffad\026\uffad\001" +
    "\002\000\032\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\014\uffae\017\uffae\022\uffae\024\uffae\026" +
    "\uffae\001\002\000\032\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\014\uffa8\017\uffa8\022\uffa8\024" +
    "\uffa8\026\uffa8\001\002\000\032\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\014\uff9e\017\uff9e\022" +
    "\uff9e\024\uff9e\026\uff9e\001\002\000\022\004\157\005\160" +
    "\006\155\007\164\010\156\011\161\012\163\014\175\001" +
    "\002\000\032\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\014\uffa0\017\uffa0\022\uffa0\024\uffa0\026" +
    "\uffa0\001\002\000\022\005\141\014\050\020\136\023\146" +
    "\045\151\046\132\047\140\050\142\001\002\000\034\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f" +
    "\014\uff9f\016\040\017\uff9f\022\uff9f\024\uff9f\026\uff9f\001" +
    "\002\000\032\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\014\uffac\017\uffac\022\uffac\024\uffac\026" +
    "\uffac\001\002\000\032\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\014\uffa5\017\uffa5\022\uffa5\024" +
    "\uffa5\026\uffa5\001\002\000\032\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\017\uffa7\022" +
    "\uffa7\024\uffa7\026\uffa7\001\002\000\022\005\141\014\050" +
    "\020\136\023\146\045\151\046\132\047\140\050\142\001" +
    "\002\000\032\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\014\uffa6\017\uffa6\022\uffa6\024\uffa6\026" +
    "\uffa6\001\002\000\032\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\011\uffa4\012\uffa4\014\uffa4\017\uffa4\022\uffa4\024" +
    "\uffa4\026\uffa4\001\002\000\032\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2\017\uffa2\022" +
    "\uffa2\024\uffa2\026\uffa2\001\002\000\032\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\014\uffa3\017" +
    "\uffa3\022\uffa3\024\uffa3\026\uffa3\001\002\000\032\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014" +
    "\uffa9\017\uffa9\022\uffa9\024\uffa9\026\uffa9\001\002\000\022" +
    "\004\157\005\160\006\155\007\164\010\156\011\161\012" +
    "\163\024\162\001\002\000\022\005\141\014\050\020\136" +
    "\023\146\045\151\046\132\047\140\050\142\001\002\000" +
    "\022\005\141\014\050\020\136\023\146\045\151\046\132" +
    "\047\140\050\142\001\002\000\022\005\141\014\050\020" +
    "\136\023\146\045\151\046\132\047\140\050\142\001\002" +
    "\000\022\005\141\014\050\020\136\023\146\045\151\046" +
    "\132\047\140\050\142\001\002\000\022\005\141\014\050" +
    "\020\136\023\146\045\151\046\132\047\140\050\142\001" +
    "\002\000\032\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\014\uffaa\017\uffaa\022\uffaa\024\uffaa\026" +
    "\uffaa\001\002\000\022\005\141\014\050\020\136\023\146" +
    "\045\151\046\132\047\140\050\142\001\002\000\022\005" +
    "\141\014\050\020\136\023\146\045\151\046\132\047\140" +
    "\050\142\001\002\000\032\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\161\012\163\014\uffb2\017\uffb2\022\uffb2" +
    "\024\uffb2\026\uffb2\001\002\000\032\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\161\012\163\014\uffaf\017\uffaf" +
    "\022\uffaf\024\uffaf\026\uffaf\001\002\000\032\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\161\012\163\014\uffb0" +
    "\017\uffb0\022\uffb0\024\uffb0\026\uffb0\001\002\000\032\004" +
    "\uffb4\005\uffb4\006\155\007\164\010\156\011\161\012\163" +
    "\014\uffb4\017\uffb4\022\uffb4\024\uffb4\026\uffb4\001\002\000" +
    "\032\004\uffb5\005\uffb5\006\155\007\164\010\156\011\161" +
    "\012\163\014\uffb5\017\uffb5\022\uffb5\024\uffb5\026\uffb5\001" +
    "\002\000\032\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\161\012\163\014\uffb1\017\uffb1\022\uffb1\024\uffb1\026" +
    "\uffb1\001\002\000\032\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\161\012\163\014\uffb3\017\uffb3\022\uffb3\024" +
    "\uffb3\026\uffb3\001\002\000\032\004\uffab\005\uffab\006\155" +
    "\007\164\010\156\011\161\012\163\014\uffab\017\uffab\022" +
    "\uffab\024\uffab\026\uffab\001\002\000\036\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014" +
    "\uffeb\016\uffeb\017\uffeb\022\uffeb\024\uffeb\026\uffeb\001\002" +
    "\000\006\014\177\015\121\001\002\000\036\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\022\uffe5\024\uffe5\026\uffe5\001" +
    "\002\000\022\004\157\005\160\006\155\007\164\010\156" +
    "\011\161\012\163\014\201\001\002\000\036\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\014\uffec\016\uffec\017\uffec\022\uffec\024\uffec\026\uffec\001" +
    "\002\000\004\014\203\001\002\000\036\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014" +
    "\uffe9\016\uffe9\017\uffe9\022\uffe9\024\uffe9\026\uffe9\001\002" +
    "\000\026\005\141\014\050\020\136\021\022\023\146\026" +
    "\uff9b\045\151\046\132\047\140\050\142\001\002\000\006" +
    "\017\uff99\026\uff99\001\002\000\004\026\214\001\002\000" +
    "\024\004\157\005\160\006\155\007\164\010\156\011\161" +
    "\012\163\017\uff98\026\uff98\001\002\000\006\017\212\026" +
    "\uff9c\001\002\000\006\017\uff97\026\uff97\001\002\000\024" +
    "\005\141\014\050\020\136\021\022\023\146\045\151\046" +
    "\132\047\140\050\142\001\002\000\006\017\uff9a\026\uff9a" +
    "\001\002\000\004\014\215\001\002\000\036\002\uff9d\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\014\uff9d\016\uff9d\017\uff9d\022\uff9d\024\uff9d\026\uff9d\001" +
    "\002\000\022\004\157\005\160\006\155\007\164\010\156" +
    "\011\161\012\163\014\217\001\002\000\036\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\014\uffea\016\uffea\017\uffea\022\uffea\024\uffea\026\uffea\001" +
    "\002\000\036\002\uffca\004\uffca\005\uffca\006\064\007\073" +
    "\010\065\011\070\012\072\014\uffca\016\uffca\017\uffca\022" +
    "\uffca\024\uffca\026\uffca\001\002\000\004\022\235\001\002" +
    "\000\024\004\157\005\160\006\155\007\164\010\156\011" +
    "\161\012\163\017\uffb9\022\uffb9\001\002\000\006\017\233" +
    "\022\uffbb\001\002\000\022\005\141\014\050\020\136\023" +
    "\146\045\151\046\132\047\140\050\142\001\002\000\006" +
    "\017\227\022\uffbc\001\002\000\006\017\uffb7\022\uffb7\001" +
    "\002\000\022\005\141\014\050\020\136\023\146\045\151" +
    "\046\132\047\140\050\142\001\002\000\024\004\157\005" +
    "\160\006\155\007\164\010\156\011\161\012\163\017\uffba" +
    "\022\uffba\001\002\000\006\017\227\022\232\001\002\000" +
    "\006\017\uffb6\022\uffb6\001\002\000\004\021\224\001\002" +
    "\000\006\017\uffb8\022\uffb8\001\002\000\014\002\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\026\uffbd\001\002\000\004\050\256" +
    "\001\002\000\012\020\015\021\022\046\007\050\120\001" +
    "\002\000\012\020\015\021\022\046\007\050\120\001\002" +
    "\000\012\020\015\021\022\046\007\050\120\001\002\000" +
    "\012\020\015\021\022\046\007\050\120\001\002\000\012" +
    "\020\015\021\022\046\007\050\120\001\002\000\006\014" +
    "\245\015\121\001\002\000\004\002\uffe0\001\002\000\006" +
    "\014\247\015\121\001\002\000\004\002\uffe3\001\002\000" +
    "\006\014\251\015\121\001\002\000\004\002\uffe1\001\002" +
    "\000\006\014\253\015\121\001\002\000\004\002\uffdf\001" +
    "\002\000\006\014\255\015\121\001\002\000\004\002\uffe2" +
    "\001\002\000\004\013\257\001\002\000\012\020\015\021" +
    "\022\046\007\050\120\001\002\000\006\014\261\015\121" +
    "\001\002\000\004\002\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\004\042\003\001\001\000\052\005" +
    "\032\010\016\011\013\012\015\013\035\020\033\021\027" +
    "\022\025\023\030\024\034\030\012\031\011\032\020\033" +
    "\036\034\023\035\031\036\007\037\024\040\010\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\006\225\011\134\014\220\015\222\016" +
    "\224\017\221\020\152\021\146\022\143\023\147\024\151" +
    "\030\133\031\132\037\142\041\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\043\020\060\021\055\022\053\023\056\024\061\027\051" +
    "\030\042\031\041\037\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\043\020\060\021" +
    "\055\022\053\023\056\024\061\027\217\030\042\031\041" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\043\020\060\021\055\022\053\023\056\024" +
    "\061\027\062\030\042\031\041\037\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\043" +
    "\020\060\021\055\022\053\023\056\024\061\027\101\030" +
    "\042\031\041\037\052\001\001\000\026\011\043\020\060" +
    "\021\055\022\053\023\056\024\061\027\100\030\042\031" +
    "\041\037\052\001\001\000\026\011\043\020\060\021\055" +
    "\022\053\023\056\024\061\027\077\030\042\031\041\037" +
    "\052\001\001\000\026\011\043\020\060\021\055\022\053" +
    "\023\056\024\061\027\076\030\042\031\041\037\052\001" +
    "\001\000\026\011\043\020\060\021\055\022\053\023\056" +
    "\024\061\027\075\030\042\031\041\037\052\001\001\000" +
    "\002\001\001\000\026\011\043\020\060\021\055\022\053" +
    "\023\056\024\061\027\074\030\042\031\041\037\052\001" +
    "\001\000\026\011\043\020\060\021\055\022\053\023\056" +
    "\024\061\027\073\030\042\031\041\037\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\043\020\060\021\055" +
    "\022\053\023\056\024\061\027\104\030\042\031\041\037" +
    "\052\001\001\000\002\001\001\000\030\011\134\017\215" +
    "\020\152\021\146\022\143\023\147\024\151\030\133\031" +
    "\132\037\142\041\144\001\001\000\002\001\001\000\006" +
    "\013\123\025\201\001\001\000\030\011\134\017\177\020" +
    "\152\021\146\022\143\023\147\024\151\030\133\031\132" +
    "\037\142\041\144\001\001\000\010\005\032\013\035\040" +
    "\175\001\001\000\030\011\134\017\136\020\152\021\146" +
    "\022\143\023\147\024\151\030\133\031\132\037\142\041" +
    "\144\001\001\000\010\005\032\013\035\040\127\001\001" +
    "\000\006\013\123\025\124\001\001\000\010\005\032\013" +
    "\035\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\122\013\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\134\017\173\020\152\021\146" +
    "\022\143\023\147\024\151\030\133\031\132\037\142\041" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\011\134\017\153\020" +
    "\152\021\146\022\143\023\147\024\151\030\133\031\132" +
    "\037\142\041\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\134\017\172\020\152\021" +
    "\146\022\143\023\147\024\151\030\133\031\132\037\142" +
    "\041\144\001\001\000\030\011\134\017\171\020\152\021" +
    "\146\022\143\023\147\024\151\030\133\031\132\037\142" +
    "\041\144\001\001\000\030\011\134\017\170\020\152\021" +
    "\146\022\143\023\147\024\151\030\133\031\132\037\142" +
    "\041\144\001\001\000\030\011\134\017\167\020\152\021" +
    "\146\022\143\023\147\024\151\030\133\031\132\037\142" +
    "\041\144\001\001\000\030\011\134\017\166\020\152\021" +
    "\146\022\143\023\147\024\151\030\133\031\132\037\142" +
    "\041\144\001\001\000\002\001\001\000\030\011\134\017" +
    "\165\020\152\021\146\022\143\023\147\024\151\030\133" +
    "\031\132\037\142\041\144\001\001\000\030\011\134\017" +
    "\164\020\152\021\146\022\143\023\147\024\151\030\133" +
    "\031\132\037\142\041\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\204\004\207\007\205\011\134" +
    "\013\210\017\206\020\152\021\146\022\143\023\147\024" +
    "\151\030\133\031\132\037\142\041\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\212\011\134\013\210" +
    "\017\206\020\152\021\146\022\143\023\147\024\151\030" +
    "\133\031\132\037\142\041\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\134\016\230\017" +
    "\221\020\152\021\146\022\143\023\147\024\151\030\133" +
    "\031\132\037\142\041\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\011\134\017\227\020\152\021\146" +
    "\022\143\023\147\024\151\030\133\031\132\037\142\041" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\032\013\035" +
    "\040\253\001\001\000\010\005\032\013\035\040\251\001" +
    "\001\000\010\005\032\013\035\040\247\001\001\000\010" +
    "\005\032\013\035\040\245\001\001\000\010\005\032\013" +
    "\035\040\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\032\013\035\040\257\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConsolaSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConsolaSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConsolaSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
   
    public static Nodo raiz;
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConsolaSintactico$actions {



  private final ConsolaSintactico parser;

  /** Constructor */
  CUP$ConsolaSintactico$actions(ConsolaSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action_part00000000(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConsolaSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ConsolaSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConsolaSintactico$parser.done_parsing();
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
 
                System.out.println("Empezo Consola \n");
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 FUNCIONES_PROPIAS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  System.out.println("Finalizo Consola");
                parser.raiz = nodo; 
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES_PROPIAS ::= DECLARA_LISTA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES_PROPIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES_PROPIAS ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES_PROPIAS ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES_PROPIAS ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES_PROPIAS ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES_PROPIAS ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES_PROPIAS ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES_PROPIAS ::= REVERS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES_PROPIAS ::= IMPR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES_PROPIAS ::= PAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES_PROPIAS ::= ASC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONES_PROPIAS ::= DESC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES_PROPIAS ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_PROPIAS ::= CONCATENA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_PROPIAS ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES_PROPIAS ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARA_LISTA ::= dolar let id igual CONCATENA dolar 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("D_Lista");
                Nodo name = new Nodo(nombre);
                nuevo.Hijo(name);
                nuevo.Hijo(exp);
                RESULT = nuevo;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECLARA_LISTA",8, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int calculaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int calcularight = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Object calcula = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
                Nodo cal = new Nodo("Calcular");
                Nodo expresion = new Nodo("Exp");
                expresion.Hijo(exp);
                cal.Hijo(expresion);
                RESULT = cal;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",14, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SUCC ::= dolar succ EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Succ");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUCC",15, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECC ::= dolar decc EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Decc");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECC",16, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MIN ::= dolar min M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Min");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MIN",17, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAX ::= dolar max M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Max");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAX",18, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // M ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 //Nodo nuevo = new Nodo("M");
           Nodo nuevo = new Nodo("id"); 
           Nodo i = new Nodo(id); 
           //i2.Hijo(i);
           nuevo.Hijo(i);
           RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",19, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // M ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 //Nodo nuevo = new Nodo("M"); nuevo.Hijo(lista); 
            RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",19, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUM ::= dolar sum CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Sum");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUM",22, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PRODUCT ::= dolar product CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Product");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PRODUCT",23, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REVERS ::= dolar revers CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Revers");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("REVERS",24, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IMPR ::= dolar impr CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Impr");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("IMPR",25, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PAR ::= dolar par CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Par");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PAR",26, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASC ::= dolar asc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Asc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("ASC",27, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DESC ::= dolar desc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Desc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DESC",28, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LENGTH ::= dolar tam CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Length");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LENGTH",29, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONCATENA ::= CONCATENA concatena C_L 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 
                c.Hijo(l);  
                RESULT = c; 
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",30, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONCATENA ::= C_L 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                Nodo lista = new Nodo("Concatena");
                lista.Hijo(l);
                RESULT = lista;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",30, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // C_L ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = lista;
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // C_L ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // C_L ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // C_L ::= porcentaje 
            {
              Nodo RESULT =null;
		int porcentajeleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int porcentajeright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object porcentaje = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("porcentaje");
            Nodo por = new Nodo(porcentaje);
            nuevo.Hijo(por);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("C_L",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INDICE ::= id indice EXP_INDICE L_INDICE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		int otroleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int otroright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo otro = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Indice");
                Nodo nombre = new Nodo(id);
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(nombre);
                nuevo.Hijo(e);
                if (otro!=null){
                    nuevo.Hijo(otro);
                }
                RESULT = nuevo;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INDICE",31, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_INDICE ::= indice EXP_INDICE 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Exp");
                nuevo.Hijo(exp);
                RESULT = nuevo;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_INDICE",20, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_INDICE ::= 
            {
              Nodo RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_INDICE",20, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP_INDICE ::= EXP_INDICE mas EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP_INDICE ::= EXP_INDICE menos EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP_INDICE ::= EXP_INDICE por EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP_INDICE ::= EXP_INDICE div EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP_INDICE ::= EXP_INDICE residuo EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("mod");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP_INDICE ::= EXP_INDICE sqrt EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("sqrt");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP_INDICE ::= EXP_INDICE pot EXP_INDICE 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("pot");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP_INDICE ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP_INDICE ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP_INDICE ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP_INDICE ::= menos EXP_INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("Unario");
            nuevo.Hijo(nodo);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP_INDICE ::= parenAbre EXP_INDICE parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP_INDICE ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP_INDICE ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP_INDICE ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP_INDICE ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP_INDICE ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_INDICE ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_INDICE ::= entero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_INDICE ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_INDICE ::= caracter 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_INDICE ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_INDICE ::= porcentaje 
            {
              Nodo RESULT =null;
		int porcentajeleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int porcentajeright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object porcentaje = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("porcentaje");
            Nodo por = new Nodo(porcentaje);
            nuevo.Hijo(por);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP_INDICE",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA ::= corAbre LISTAS corCierra 
            {
              Nodo RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo listas = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		 RESULT = listas; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",9, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTAS ::= EXPRESIONES 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = exp; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTAS ::= MAS_CORCH 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESIONES ::= EXPRESIONES coma EXP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",12, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESIONES ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 
                    Nodo lista = new Nodo("Lista");
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",12, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MAS_CORCH ::= MAS_CORCH coma DIM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                    nodo.Hijo(dim);
                    RESULT = nodo;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MAS_CORCH ::= DIM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		Nodo nivel = new Nodo("2Niveles");
                    nivel.Hijo(nodo);
                    RESULT = nivel;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DIM ::= corAbre EXPRESIONES corCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		
            
            RESULT =nodo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DIM",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP por EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP residuo EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("mod");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("sqrt");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("pot");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= menos EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("Unario");
            nuevo.Hijo(nodo);
            RESULT = nuevo;
        
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= entero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= porcentaje 
            {
              Nodo RESULT =null;
		int porcentajeleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int porcentajeright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Object porcentaje = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("porcentaje");
            Nodo por = new Nodo(porcentaje);
            nuevo.Hijo(por);
            RESULT = nuevo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMA_FUNCION ::= dolar id llaveAbre P llaveCierra dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		
                    Nodo nuevo = new Nodo("LlamaFunc");
                    Nodo nombre = new Nodo(id);
                    nuevo.Hijo(nombre);
                    if(param!=null){
                        nuevo.Hijo(param);
                    }
                    RESULT = nuevo;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LLAMA_FUNCION",7, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // P ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		RESULT= nodo; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("P",5, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // P ::= 
            {
              Nodo RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("P",5, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETROS ::= PARAMETROS coma L_PARAM 
            {
              Nodo RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		  
                    param.Hijo(p); 
                    RESULT= param;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETROS ::= L_PARAM 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("Parametros");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // L_PARAM ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		
                RESULT = exp;
            
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // L_PARAM ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.peek()).value;
		 RESULT = lista; 
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConsolaSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ConsolaSintactico$do_action_part00000000(
                               CUP$ConsolaSintactico$act_num,
                               CUP$ConsolaSintactico$parser,
                               CUP$ConsolaSintactico$stack,
                               CUP$ConsolaSintactico$top);
    }
}

}
