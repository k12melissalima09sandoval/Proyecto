
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Consola;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConsolaSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosConsola.class;
}

  /** Default constructor. */
  @Deprecated
  public ConsolaSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConsolaSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConsolaSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\007\010\000\002\015\006\000\002\016\006\000" +
    "\002\017\006\000\002\020\006\000\002\021\006\000\002" +
    "\022\003\000\002\022\003\000\002\023\006\000\002\024" +
    "\006\000\002\025\006\000\002\026\006\000\002\027\006" +
    "\000\002\030\006\000\002\031\006\000\002\032\006\000" +
    "\002\033\005\000\002\034\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\003\000\002\013\005\000\002\013" +
    "\003\000\002\012\011\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\005\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\006\006\000" +
    "\002\004\005\000\002\004\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\024\013\031\016\056\014\001\002\000" +
    "\004\002\ufff3\001\002\000\004\002\ufff1\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\uffef\001\002\000\004\002\uffff\001\002\000\004\002\000" +
    "\001\002\000\040\035\134\036\142\037\200\040\136\041" +
    "\135\042\141\043\137\044\140\045\204\046\201\047\203" +
    "\050\206\051\202\052\205\056\143\001\002\000\004\026" +
    "\176\001\002\000\004\002\ufff7\001\002\000\024\005\046" +
    "\024\047\031\051\033\053\052\062\053\056\054\036\055" +
    "\044\056\050\001\002\000\004\002\ufff5\001\002\000\004" +
    "\002\ufff2\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufff0\001\002\000\004\002\ufffd\001\002\000\004\002\ufff4" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\ufffa\001\002\000\004\025\034\001\002" +
    "\000\004\002\ufff6\001\002\000\004\002\033\001\002\000" +
    "\004\002\001\001\002\000\004\031\016\001\002\000\004" +
    "\002\uffde\001\002\000\052\002\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\027\uffbb\032\uffbb\034\uffbb\001\002\000\052\002\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\027\uffc6\032\uffc6\034\uffc6\001" +
    "\002\000\052\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\027\uffc7" +
    "\032\uffc7\034\uffc7\001\002\000\052\002\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\027\uffc1\032\uffc1\034\uffc1\001\002\000\004" +
    "\032\175\001\002\000\044\004\103\005\070\006\100\007" +
    "\066\010\075\011\102\012\076\013\067\014\071\015\104" +
    "\016\072\017\101\020\077\021\073\022\074\027\uffd8\032" +
    "\uffd8\001\002\000\052\002\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba" +
    "\027\uffba\032\uffba\034\uffba\001\002\000\004\032\uffda\001" +
    "\002\000\022\005\046\024\047\033\053\052\062\053\056" +
    "\054\036\055\044\056\050\001\002\000\022\035\134\036" +
    "\142\040\136\041\135\042\141\043\137\044\140\056\143" +
    "\001\002\000\052\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\027" +
    "\uffb9\032\uffb9\034\uffb9\001\002\000\022\005\046\024\047" +
    "\033\053\052\062\053\056\054\036\055\044\056\050\001" +
    "\002\000\052\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\027\uffbf" +
    "\032\uffbf\034\uffbf\001\002\000\022\005\046\024\047\033" +
    "\053\052\062\053\056\054\036\055\044\056\050\001\002" +
    "\000\052\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\027\uffc0\032" +
    "\uffc0\034\uffc0\001\002\000\052\002\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\027\uffbe\032\uffbe\034\uffbe\001\002\000\052\002" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\024\uffbc\027\uffbc\032\uffbc\034\uffbc" +
    "\001\002\000\006\027\064\032\uffdb\001\002\000\052\002" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\024\uffc2\027\uffc2\032\uffc2\034\uffc2" +
    "\001\002\000\052\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\027" +
    "\uffbd\032\uffbd\034\uffbd\001\002\000\004\031\016\001\002" +
    "\000\052\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\027\uffc5\032" +
    "\uffc5\034\uffc5\001\002\000\022\005\046\024\047\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\044\004\103\005\070\006\100\007\066\010\075\011\102" +
    "\012\076\013\067\014\071\015\104\016\072\017\101\020" +
    "\077\021\073\022\074\027\uffd9\032\uffd9\001\002\000\022" +
    "\005\046\024\047\033\053\052\062\053\056\054\036\055" +
    "\044\056\050\001\002\000\022\005\046\024\047\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\022\005\046\024\047\033\053\052\062\053\056\054\036" +
    "\055\044\056\050\001\002\000\022\005\046\024\047\033" +
    "\053\052\062\053\056\054\036\055\044\056\050\001\002" +
    "\000\022\005\046\024\047\033\053\052\062\053\056\054" +
    "\036\055\044\056\050\001\002\000\022\005\046\024\047" +
    "\033\053\052\062\053\056\054\036\055\044\056\050\001" +
    "\002\000\022\005\046\024\047\033\053\052\062\053\056" +
    "\054\036\055\044\056\050\001\002\000\022\005\046\024" +
    "\047\033\053\052\062\053\056\054\036\055\044\056\050" +
    "\001\002\000\022\005\046\024\047\033\053\052\062\053" +
    "\056\054\036\055\044\056\050\001\002\000\022\005\046" +
    "\024\047\033\053\052\062\053\056\054\036\055\044\056" +
    "\050\001\002\000\022\005\046\024\047\033\053\052\062" +
    "\053\056\054\036\055\044\056\050\001\002\000\022\005" +
    "\046\024\047\033\053\052\062\053\056\054\036\055\044" +
    "\056\050\001\002\000\022\005\046\024\047\033\053\052" +
    "\062\053\056\054\036\055\044\056\050\001\002\000\022" +
    "\005\046\024\047\033\053\052\062\053\056\054\036\055" +
    "\044\056\050\001\002\000\022\005\046\024\047\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\052\002\uffcc\004\103\005\070\006\100\007\066\010\075" +
    "\011\102\012\076\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\027\uffcc\032\uffcc" +
    "\034\uffcc\001\002\000\052\002\uffd6\004\uffd6\005\uffd6\006" +
    "\100\007\066\010\075\011\102\012\076\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024" +
    "\uffd6\027\uffd6\032\uffd6\034\uffd6\001\002\000\052\002\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\102\012" +
    "\076\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\024\uffd1\027\uffd1\032\uffd1\034\uffd1\001" +
    "\002\000\052\002\uffca\004\103\005\070\006\100\007\066" +
    "\010\075\011\102\012\076\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca\027\uffca" +
    "\032\uffca\034\uffca\001\002\000\052\002\uffd4\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\102\012\076\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\024\uffd4\027\uffd4\032\uffd4\034\uffd4\001\002\000\052" +
    "\002\uffcb\004\103\005\070\006\100\007\066\010\075\011" +
    "\102\012\076\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\027\uffcb\032\uffcb\034" +
    "\uffcb\001\002\000\052\002\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\102\012\076\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0" +
    "\027\uffd0\032\uffd0\034\uffd0\001\002\000\052\002\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\102\012\076" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\024\uffd2\027\uffd2\032\uffd2\034\uffd2\001\002" +
    "\000\052\002\uffc8\004\103\005\070\006\100\007\066\010" +
    "\075\011\102\012\076\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\027\uffc8\032" +
    "\uffc8\034\uffc8\001\002\000\052\002\uffc9\004\103\005\070" +
    "\006\100\007\066\010\075\011\102\012\076\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\027\uffc9\032\uffc9\034\uffc9\001\002\000\052\002" +
    "\uffcd\004\103\005\070\006\100\007\066\010\075\011\102" +
    "\012\076\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\027\uffcd\032\uffcd\034\uffcd" +
    "\001\002\000\052\002\uffce\004\103\005\070\006\100\007" +
    "\066\010\075\011\102\012\076\013\uffce\014\uffce\015\104" +
    "\016\072\017\101\020\077\021\073\022\074\024\uffce\027" +
    "\uffce\032\uffce\034\uffce\001\002\000\052\002\uffd5\004\uffd5" +
    "\005\uffd5\006\100\007\066\010\075\011\102\012\076\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\027\uffd5\032\uffd5\034\uffd5\001\002\000" +
    "\052\002\uffcf\004\103\005\070\006\100\007\066\010\075" +
    "\011\102\012\076\013\uffcf\014\071\015\104\016\072\017" +
    "\101\020\077\021\073\022\074\024\uffcf\027\uffcf\032\uffcf" +
    "\034\uffcf\001\002\000\052\002\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\102\012\076\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024" +
    "\uffd3\027\uffd3\032\uffd3\034\uffd3\001\002\000\042\004\103" +
    "\005\070\006\100\007\066\010\075\011\102\012\076\013" +
    "\067\014\071\015\104\016\072\017\101\020\077\021\073" +
    "\022\074\034\125\001\002\000\052\002\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\024\uffc3\027\uffc3\032\uffc3\034\uffc3\001\002\000\006" +
    "\027\064\032\127\001\002\000\004\027\130\001\002\000" +
    "\004\031\131\001\002\000\022\005\046\024\047\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\006\027\064\032\133\001\002\000\004\032\uffd7\001\002" +
    "\000\022\005\046\024\047\033\053\052\062\053\056\054" +
    "\036\055\044\056\050\001\002\000\024\005\046\024\047" +
    "\031\016\033\053\052\062\053\056\054\036\055\044\056" +
    "\050\001\002\000\024\005\046\024\047\031\016\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\004\031\016\001\002\000\004\031\016\001\002\000\022" +
    "\005\046\024\047\033\053\052\062\053\056\054\036\055" +
    "\044\056\050\001\002\000\022\005\046\024\047\033\053" +
    "\052\062\053\056\054\036\055\044\056\050\001\002\000" +
    "\026\005\046\024\047\030\145\031\016\033\053\052\062" +
    "\053\056\054\036\055\044\056\050\001\002\000\006\024" +
    "\uffb6\027\uffb6\001\002\000\006\024\uffb3\027\uffb3\001\002" +
    "\000\044\004\103\005\070\006\100\007\066\010\075\011" +
    "\102\012\076\013\067\014\071\015\104\016\072\017\101" +
    "\020\077\021\073\022\074\024\uffb5\027\uffb5\001\002\000" +
    "\006\024\151\027\152\001\002\000\006\024\uffb4\027\uffb4" +
    "\001\002\000\052\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\027" +
    "\uffb8\032\uffb8\034\uffb8\001\002\000\026\005\046\024\047" +
    "\030\145\031\016\033\053\052\062\053\056\054\036\055" +
    "\044\056\050\001\002\000\006\024\uffb7\027\uffb7\001\002" +
    "\000\042\004\103\005\070\006\100\007\066\010\075\011" +
    "\102\012\076\013\067\014\071\015\104\016\072\017\101" +
    "\020\077\021\073\022\074\024\155\001\002\000\052\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\027\uffeb\032\uffeb\034\uffeb" +
    "\001\002\000\042\004\103\005\070\006\100\007\066\010" +
    "\075\011\102\012\076\013\067\014\071\015\104\016\072" +
    "\017\101\020\077\021\073\022\074\024\157\001\002\000" +
    "\052\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\024\uffed\027\uffed\032\uffed" +
    "\034\uffed\001\002\000\004\024\161\001\002\000\052\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\027\uffe5\032\uffe5\034\uffe5" +
    "\001\002\000\004\024\163\001\002\000\052\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\024\uffe6\027\uffe6\032\uffe6\034\uffe6\001\002" +
    "\000\004\024\167\001\002\000\042\004\103\005\070\006" +
    "\100\007\066\010\075\011\102\012\076\013\067\014\071" +
    "\015\104\016\072\017\101\020\077\021\073\022\074\024" +
    "\uffe8\001\002\000\004\024\uffe7\001\002\000\052\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\024\uffea\027\uffea\032\uffea\034\uffea\001" +
    "\002\000\004\024\171\001\002\000\052\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\024\uffe9\027\uffe9\032\uffe9\034\uffe9\001\002\000" +
    "\042\004\103\005\070\006\100\007\066\010\075\011\102" +
    "\012\076\013\067\014\071\015\104\016\072\017\101\020" +
    "\077\021\073\022\074\024\173\001\002\000\052\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\024\uffec\027\uffec\032\uffec\034\uffec\001" +
    "\002\000\052\002\uffc4\004\uffc4\005\uffc4\006\100\007\066" +
    "\010\075\011\102\012\076\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\027\uffc4" +
    "\032\uffc4\034\uffc4\001\002\000\054\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\024\uffdc\025\uffdc\027\uffdc\032\uffdc\034\uffdc\001\002" +
    "\000\022\005\046\024\047\033\053\052\062\053\056\054" +
    "\036\055\044\056\050\001\002\000\042\002\uffdd\004\103" +
    "\005\070\006\100\007\066\010\075\011\102\012\076\013" +
    "\067\014\071\015\104\016\072\017\101\020\077\021\073" +
    "\022\074\001\002\000\004\056\223\001\002\000\004\031" +
    "\016\001\002\000\004\031\016\001\002\000\004\031\016" +
    "\001\002\000\004\031\016\001\002\000\004\031\016\001" +
    "\002\000\004\031\016\001\002\000\004\024\210\001\002" +
    "\000\004\002\uffe1\001\002\000\004\024\212\001\002\000" +
    "\004\002\uffdf\001\002\000\004\024\214\001\002\000\004" +
    "\002\uffe4\001\002\000\004\024\216\001\002\000\004\002" +
    "\uffe2\001\002\000\004\024\220\001\002\000\004\002\uffe0" +
    "\001\002\000\004\024\222\001\002\000\004\002\uffe3\001" +
    "\002\000\004\023\224\001\002\000\004\031\016\001\002" +
    "\000\004\024\226\001\002\000\004\002\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\052\002\031\005\011\006\007\007\010\010" +
    "\027\015\025\016\022\017\020\020\024\021\026\023\006" +
    "\024\005\025\014\026\030\027\016\030\023\031\003\032" +
    "\017\033\004\034\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\040\011" +
    "\041\012\044\013\056\014\042\015\057\016\053\017\051" +
    "\020\054\021\060\023\037\024\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\040\014\173\015\057\016\053\017\051\020" +
    "\054\021\060\023\037\024\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\040\013\125\014\042\015" +
    "\057\016\053\017\051\020\054\021\060\023\037\024\036" +
    "\001\001\000\002\001\001\000\024\006\040\014\123\015" +
    "\057\016\053\017\051\020\054\021\060\023\037\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\062\001\001\000\002\001\001\000\024\006" +
    "\040\014\064\015\057\016\053\017\051\020\054\021\060" +
    "\023\037\024\036\001\001\000\002\001\001\000\024\006" +
    "\040\014\122\015\057\016\053\017\051\020\054\021\060" +
    "\023\037\024\036\001\001\000\024\006\040\014\121\015" +
    "\057\016\053\017\051\020\054\021\060\023\037\024\036" +
    "\001\001\000\024\006\040\014\120\015\057\016\053\017" +
    "\051\020\054\021\060\023\037\024\036\001\001\000\024" +
    "\006\040\014\117\015\057\016\053\017\051\020\054\021" +
    "\060\023\037\024\036\001\001\000\024\006\040\014\116" +
    "\015\057\016\053\017\051\020\054\021\060\023\037\024" +
    "\036\001\001\000\024\006\040\014\115\015\057\016\053" +
    "\017\051\020\054\021\060\023\037\024\036\001\001\000" +
    "\024\006\040\014\114\015\057\016\053\017\051\020\054" +
    "\021\060\023\037\024\036\001\001\000\024\006\040\014" +
    "\113\015\057\016\053\017\051\020\054\021\060\023\037" +
    "\024\036\001\001\000\024\006\040\014\112\015\057\016" +
    "\053\017\051\020\054\021\060\023\037\024\036\001\001" +
    "\000\024\006\040\014\111\015\057\016\053\017\051\020" +
    "\054\021\060\023\037\024\036\001\001\000\024\006\040" +
    "\014\110\015\057\016\053\017\051\020\054\021\060\023" +
    "\037\024\036\001\001\000\024\006\040\014\107\015\057" +
    "\016\053\017\051\020\054\021\060\023\037\024\036\001" +
    "\001\000\024\006\040\014\106\015\057\016\053\017\051" +
    "\020\054\021\060\023\037\024\036\001\001\000\024\006" +
    "\040\014\105\015\057\016\053\017\051\020\054\021\060" +
    "\023\037\024\036\001\001\000\024\006\040\014\104\015" +
    "\057\016\053\017\051\020\054\021\060\023\037\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\040\013\131\014\042\015" +
    "\057\016\053\017\051\020\054\021\060\023\037\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\040\014\171\015\057\016\053\017\051\020\054\021\060" +
    "\023\037\024\036\001\001\000\030\006\040\010\165\014" +
    "\164\015\057\016\053\017\051\020\054\021\060\022\167" +
    "\023\037\024\036\001\001\000\030\006\040\010\165\014" +
    "\164\015\057\016\053\017\051\020\054\021\060\022\163" +
    "\023\037\024\036\001\001\000\004\010\161\001\001\000" +
    "\004\010\157\001\001\000\024\006\040\014\155\015\057" +
    "\016\053\017\051\020\054\021\060\023\037\024\036\001" +
    "\001\000\024\006\040\014\153\015\057\016\053\017\051" +
    "\020\054\021\060\023\037\024\036\001\001\000\032\003" +
    "\143\004\146\006\040\010\147\014\145\015\057\016\053" +
    "\017\051\020\054\021\060\023\037\024\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\152\006\040\010\147\014\145\015\057\016\053\017\051" +
    "\020\054\021\060\023\037\024\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\040\014" +
    "\176\015\057\016\053\017\051\020\054\021\060\023\037" +
    "\024\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\220\001\001\000\004\010\216\001\001\000\004" +
    "\010\214\001\001\000\004\010\212\001\001\000\004\010" +
    "\210\001\001\000\004\010\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\224" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConsolaSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConsolaSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConsolaSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
   
    
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConsolaSintactico$actions {



  private final ConsolaSintactico parser;

  /** Constructor */
  CUP$ConsolaSintactico$actions(ConsolaSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action_part00000000(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConsolaSintactico$result;

      /* select the action based on the action number */
      switch (CUP$ConsolaSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)).value;
		RESULT = start_val;
              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConsolaSintactico$parser.done_parsing();
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES_PROPIAS 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCIONES_PROPIAS ::= DECLARA_LISTA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES_PROPIAS ::= CALCULAR 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES_PROPIAS ::= SUCC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES_PROPIAS ::= DECC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES_PROPIAS ::= MIN 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCIONES_PROPIAS ::= MAX 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCIONES_PROPIAS ::= SUM 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCIONES_PROPIAS ::= PRODUCT 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCIONES_PROPIAS ::= REVERS 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES_PROPIAS ::= IMPR 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES_PROPIAS ::= PAR 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCIONES_PROPIAS ::= ASC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCIONES_PROPIAS ::= DESC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCIONES_PROPIAS ::= LENGTH 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCIONES_PROPIAS ::= CONCATENA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCIONES_PROPIAS ::= INDICE 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES_PROPIAS ::= LLAMA_FUNCION 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",3, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARA_LISTA ::= dolar let id igual LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECLARA_LISTA",5, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",11, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SUCC ::= dolar succ EXP dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUCC",12, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECC ::= dolar decc EXP dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DECC",13, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MIN ::= dolar min M dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MIN",14, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAX ::= dolar max M dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAX",15, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // M ::= EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // M ::= LISTA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("M",16, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUM ::= dolar sum LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("SUM",17, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PRODUCT ::= dolar product LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PRODUCT",18, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REVERS ::= dolar revers LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("REVERS",19, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPR ::= dolar impr LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("IMPR",20, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PAR ::= dolar par LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PAR",21, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASC ::= dolar asc LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("ASC",22, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DESC ::= dolar desc LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("DESC",23, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LENGTH ::= dolar tam LISTA dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LENGTH",24, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONCATENA ::= LISTA concatena LISTA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",25, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INDICE ::= id indice EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("INDICE",26, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA ::= corAbre LISTAS corCierra 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTAS ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",7, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTAS ::= MAS_CORCH 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",7, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES ::= EXPRESIONES coma EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES ::= EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",9, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAS_CORCH ::= corAbre EXPRESIONES corCierra coma corAbre EXPRESIONES corCierra 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",8, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP por EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP residuo EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP sqrt EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP pot EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP menorq EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP mayorq EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP menorigualq EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= EXP mayorigualq EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= EXP igualigual EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= SUM 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= PRODUCT 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= tam LISTA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= menos EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= parenAbre EXP parenCierra 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= CALCULAR 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= LLAMA_FUNCION 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= SUCC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= DECC 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= MIN 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= MAX 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= entero 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= cadena 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= caracter 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= id 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("EXP",10, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LLAMA_FUNCION ::= dolar id PARAMETROS dolar 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("LLAMA_FUNCION",4, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROS ::= PARAMETROS coma L_PARAM 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.elementAt(CUP$ConsolaSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROS ::= L_PARAM 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_PARAM ::= EXP 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_PARAM ::= LISTA 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L_PARAM ::= porcentaje 
            {
              Object RESULT =null;

              CUP$ConsolaSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConsolaSintactico$stack.peek()), RESULT);
            }
          return CUP$ConsolaSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConsolaSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConsolaSintactico$do_action(
    int                        CUP$ConsolaSintactico$act_num,
    java_cup.runtime.lr_parser CUP$ConsolaSintactico$parser,
    java.util.Stack            CUP$ConsolaSintactico$stack,
    int                        CUP$ConsolaSintactico$top)
    throws java.lang.Exception
    {
              return CUP$ConsolaSintactico$do_action_part00000000(
                               CUP$ConsolaSintactico$act_num,
                               CUP$ConsolaSintactico$parser,
                               CUP$ConsolaSintactico$stack,
                               CUP$ConsolaSintactico$top);
    }
}

}
