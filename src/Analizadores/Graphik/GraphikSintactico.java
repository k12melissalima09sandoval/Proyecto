
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Graphik;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphikSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphikSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphikSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphikSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\110\002\000\002\002" +
    "\006\000\002\007\003\000\002\007\002\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\006\003\000" +
    "\002\006\002\000\002\013\004\000\002\013\003\000\002" +
    "\076\005\000\002\004\004\000\002\004\003\000\002\005" +
    "\011\000\002\020\004\000\002\020\002\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\002\000" +
    "\002\003\004\000\002\003\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\035" +
    "\011\000\002\036\004\000\002\036\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\040\006\000\002\041\006\000\002\042\011\000\002" +
    "\043\007\000\002\044\007\000\002\022\010\000\002\022" +
    "\011\000\002\022\012\000\002\033\004\000\002\033\003" +
    "\000\002\033\002\000\002\023\005\000\002\023\003\000" +
    "\002\063\004\000\002\045\004\000\002\045\003\000\002" +
    "\037\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\046\004\000\002\046\002\000" +
    "\002\010\005\000\002\010\003\000\002\010\002\000\002" +
    "\024\004\000\002\050\011\000\002\051\013\000\002\106" +
    "\003\000\002\106\002\000\002\052\005\000\002\052\003" +
    "\000\002\073\004\000\002\016\004\000\002\016\003\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\006\000\002\017\005\000\002" +
    "\017\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\030\007\000\002\067\003" +
    "\000\002\105\007\000\002\104\004\000\002\103\004\000" +
    "\002\074\013\000\002\075\011\000\002\070\014\000\002" +
    "\071\004\000\002\071\004\000\002\072\007\000\002\077" +
    "\012\000\002\100\004\000\002\100\003\000\002\101\006" +
    "\000\002\102\005\000\002\102\002\000\002\065\012\000" +
    "\002\066\006\000\002\066\002\000\002\064\005\000\002" +
    "\026\007\000\002\026\010\000\002\026\011\000\002\047" +
    "\005\000\002\027\005\000\002\027\006\000\002\027\006" +
    "\000\002\031\004\000\002\031\003\000\002\062\007\000" +
    "\002\062\004\000\002\054\007\000\002\054\005\000\002" +
    "\055\007\000\002\056\003\000\002\056\002\000\002\107" +
    "\005\000\002\107\003\000\002\061\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\004\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\053\004\000\002" +
    "\025\004\000\002\025\003\000\002\060\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\010\012\000\016\000\026\000\001\002\000" +
    "\010\012\ufffd\016\012\026\ufffd\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\010\012\ufffe\016" +
    "\012\026\ufffe\001\002\000\010\012\ufffb\016\ufffb\026\ufffb" +
    "\001\002\000\006\012\ufff8\026\016\001\002\000\004\060" +
    "\013\001\002\000\004\114\014\001\002\000\010\012\ufffa" +
    "\016\ufffa\026\ufffa\001\002\000\004\012\026\001\002\000" +
    "\004\052\022\001\002\000\006\012\ufff6\026\ufff6\001\002" +
    "\000\006\012\ufff9\026\016\001\002\000\006\012\ufff7\026" +
    "\ufff7\001\002\000\004\114\023\001\002\000\006\012\ufff5" +
    "\026\ufff5\001\002\000\006\002\uffff\012\026\001\002\000" +
    "\006\002\ufff3\012\ufff3\001\002\000\004\052\027\001\002" +
    "\000\010\017\uffec\063\uffec\111\031\001\002\000\006\017" +
    "\036\063\ufff0\001\002\000\010\013\032\014\033\015\034" +
    "\001\002\000\014\017\uffed\063\uffed\110\uffed\113\uffed\114" +
    "\uffed\001\002\000\014\017\uffee\063\uffee\110\uffee\113\uffee" +
    "\114\uffee\001\002\000\014\017\uffef\063\uffef\110\uffef\113" +
    "\uffef\114\uffef\001\002\000\004\063\040\001\002\000\004" +
    "\052\037\001\002\000\004\063\ufff1\001\002\000\022\004" +
    "\045\005\046\006\041\007\057\010\055\011\050\020\056" +
    "\052\042\001\002\000\004\052\uffcb\001\002\000\004\052" +
    "\uffc7\001\002\000\004\052\u0158\001\002\000\024\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\020\uffe7\052" +
    "\uffe7\064\uffe7\001\002\000\004\052\uffcd\001\002\000\004" +
    "\052\uffcc\001\002\000\024\004\045\005\046\006\041\007" +
    "\057\010\055\011\050\020\056\052\042\064\u0157\001\002" +
    "\000\010\024\252\050\251\052\uffc8\001\002\000\024\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\020\uffea" +
    "\052\uffea\064\uffea\001\002\000\024\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\020\uffe6\052\uffe6\064\uffe6" +
    "\001\002\000\024\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\020\uffe8\052\uffe8\064\uffe8\001\002\000\024" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\020" +
    "\uffe9\052\uffe9\064\uffe9\001\002\000\004\052\uffc9\001\002" +
    "\000\020\004\045\005\046\006\041\007\057\010\055\011" +
    "\060\052\042\001\002\000\004\052\uffca\001\002\000\004" +
    "\052\uffc8\001\002\000\004\052\062\001\002\000\014\061" +
    "\065\110\uffec\111\031\113\uffec\114\uffec\001\002\000\010" +
    "\110\231\113\232\114\uffd4\001\002\000\012\061\uffcf\110" +
    "\uffcf\111\uffcf\114\uffcf\001\002\000\036\023\076\025\104" +
    "\042\102\051\113\052\112\053\100\054\111\055\107\056" +
    "\110\057\116\063\103\065\115\070\106\077\075\001\002" +
    "\000\012\061\065\110\uffec\111\031\114\uffec\001\002\000" +
    "\006\110\071\114\uffc5\001\002\000\012\061\uffd0\110\uffd0" +
    "\111\uffd0\114\uffd0\001\002\000\036\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\070\106\077\075\001\002\000" +
    "\004\114\073\001\002\000\024\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\020\uffd8\052\uffd8\064\uffd8\001" +
    "\002\000\056\062\uff68\064\uff68\066\uff68\067\uff68\070\uff68" +
    "\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68\100" +
    "\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106\uff68" +
    "\107\uff68\111\uff68\113\uff68\114\uff68\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\004\052\217\001\002\000\056\062\uff64" +
    "\064\uff64\066\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073" +
    "\uff64\074\uff64\075\uff64\076\uff64\100\uff64\101\uff64\102\uff64" +
    "\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\111\uff64\113" +
    "\uff64\114\uff64\001\002\000\056\062\uff61\064\uff61\066\uff61" +
    "\067\uff61\070\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075" +
    "\uff61\076\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61" +
    "\105\uff61\106\uff61\107\uff61\111\uff61\113\uff61\114\uff61\001" +
    "\002\000\044\067\137\070\124\071\135\072\121\073\120" +
    "\074\123\075\125\076\126\100\140\101\127\102\136\103" +
    "\134\104\130\105\131\106\132\107\133\114\uffc6\001\002" +
    "\000\004\065\214\001\002\000\042\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\064\uffc2\065\115\070\106\077\075\113" +
    "\uffc2\001\002\000\004\052\203\001\002\000\056\062\uff65" +
    "\064\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073" +
    "\uff65\074\uff65\075\uff65\076\uff65\100\uff65\101\uff65\102\uff65" +
    "\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\111\uff65\113" +
    "\uff65\114\uff65\001\002\000\036\023\076\025\104\042\102" +
    "\051\113\052\112\053\100\054\111\055\107\056\110\057" +
    "\116\063\103\065\115\070\106\077\075\001\002\000\056" +
    "\062\uff5e\064\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072" +
    "\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e\100\uff5e\101\uff5e" +
    "\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\111" +
    "\uff5e\113\uff5e\114\uff5e\001\002\000\056\062\uff5b\064\uff5b" +
    "\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074" +
    "\uff5b\075\uff5b\076\uff5b\100\uff5b\101\uff5b\102\uff5b\103\uff5b" +
    "\104\uff5b\105\uff5b\106\uff5b\107\uff5b\111\uff5b\113\uff5b\114" +
    "\uff5b\001\002\000\056\062\uff5f\064\uff5f\066\uff5f\067\uff5f" +
    "\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076" +
    "\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f" +
    "\106\uff5f\107\uff5f\111\uff5f\113\uff5f\114\uff5f\001\002\000" +
    "\062\061\163\062\uff5d\064\uff5d\066\uff5d\067\uff5d\070\uff5d" +
    "\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\100" +
    "\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d" +
    "\107\uff5d\111\uff5d\112\160\113\uff5d\114\uff5d\001\002\000" +
    "\056\062\uff60\064\uff60\066\uff60\067\uff60\070\uff60\071\uff60" +
    "\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\100\uff60\101" +
    "\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60" +
    "\111\uff60\113\uff60\114\uff60\001\002\000\056\062\uff66\064" +
    "\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66" +
    "\074\uff66\075\uff66\076\uff66\100\uff66\101\uff66\102\uff66\103" +
    "\uff66\104\uff66\105\uff66\106\uff66\107\uff66\111\uff66\113\uff66" +
    "\114\uff66\001\002\000\036\023\076\025\104\042\102\051" +
    "\113\052\112\053\100\054\111\055\107\056\110\057\116" +
    "\063\103\065\115\070\106\077\075\001\002\000\056\062" +
    "\uff5c\064\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c" +
    "\073\uff5c\074\uff5c\075\uff5c\076\uff5c\100\uff5c\101\uff5c\102" +
    "\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c\111\uff5c" +
    "\113\uff5c\114\uff5c\001\002\000\044\066\122\067\137\070" +
    "\124\071\135\072\121\073\120\074\123\075\125\076\126" +
    "\100\140\101\127\102\136\103\134\104\130\105\131\106" +
    "\132\107\133\001\002\000\036\023\076\025\104\042\102" +
    "\051\113\052\112\053\100\054\111\055\107\056\110\057" +
    "\116\063\103\065\115\070\106\077\075\001\002\000\036" +
    "\023\076\025\104\042\102\051\113\052\112\053\100\054" +
    "\111\055\107\056\110\057\116\063\103\065\115\070\106" +
    "\077\075\001\002\000\056\062\uff67\064\uff67\066\uff67\067" +
    "\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67" +
    "\076\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105" +
    "\uff67\106\uff67\107\uff67\111\uff67\113\uff67\114\uff67\001\002" +
    "\000\036\023\076\025\104\042\102\051\113\052\112\053" +
    "\100\054\111\055\107\056\110\057\116\063\103\065\115" +
    "\070\106\077\075\001\002\000\036\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\070\106\077\075\001\002\000" +
    "\036\023\076\025\104\042\102\051\113\052\112\053\100" +
    "\054\111\055\107\056\110\057\116\063\103\065\115\070" +
    "\106\077\075\001\002\000\036\023\076\025\104\042\102" +
    "\051\113\052\112\053\100\054\111\055\107\056\110\057" +
    "\116\063\103\065\115\070\106\077\075\001\002\000\036" +
    "\023\076\025\104\042\102\051\113\052\112\053\100\054" +
    "\111\055\107\056\110\057\116\063\103\065\115\070\106" +
    "\077\075\001\002\000\036\023\076\025\104\042\102\051" +
    "\113\052\112\053\100\054\111\055\107\056\110\057\116" +
    "\063\103\065\115\070\106\077\075\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\056\062\uff6b\064\uff6b\066\uff6b\067\uff6b" +
    "\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076" +
    "\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\105\uff6b" +
    "\106\uff6b\107\uff6b\111\uff6b\113\uff6b\114\uff6b\001\002\000" +
    "\056\062\uff6a\064\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a" +
    "\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\100\uff6a\101" +
    "\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a" +
    "\111\uff6a\113\uff6a\114\uff6a\001\002\000\036\023\076\025" +
    "\104\042\102\051\113\052\112\053\100\054\111\055\107" +
    "\056\110\057\116\063\103\065\115\070\106\077\075\001" +
    "\002\000\036\023\076\025\104\042\102\051\113\052\112" +
    "\053\100\054\111\055\107\056\110\057\116\063\103\065" +
    "\115\070\106\077\075\001\002\000\036\023\076\025\104" +
    "\042\102\051\113\052\112\053\100\054\111\055\107\056" +
    "\110\057\116\063\103\065\115\070\106\077\075\001\002" +
    "\000\036\023\076\025\104\042\102\051\113\052\112\053" +
    "\100\054\111\055\107\056\110\057\116\063\103\065\115" +
    "\070\106\077\075\001\002\000\036\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\070\106\077\075\001\002\000" +
    "\056\062\uff70\064\uff70\066\uff70\067\137\070\124\071\135" +
    "\072\121\073\120\074\uff70\075\uff70\076\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\132\107\133" +
    "\111\uff70\113\uff70\114\uff70\001\002\000\056\062\uff7a\064" +
    "\uff7a\066\uff7a\067\uff7a\070\uff7a\071\135\072\121\073\120" +
    "\074\uff7a\075\uff7a\076\uff7a\100\uff7a\101\uff7a\102\uff7a\103" +
    "\uff7a\104\uff7a\105\uff7a\106\132\107\133\111\uff7a\113\uff7a" +
    "\114\uff7a\001\002\000\056\062\uff6e\064\uff6e\066\uff6e\067" +
    "\137\070\124\071\135\072\121\073\120\074\uff6e\075\uff6e" +
    "\076\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105" +
    "\uff6e\106\132\107\133\111\uff6e\113\uff6e\114\uff6e\001\002" +
    "\000\056\062\uff78\064\uff78\066\uff78\067\uff78\070\uff78\071" +
    "\uff78\072\uff78\073\120\074\uff78\075\uff78\076\uff78\100\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\132\107" +
    "\133\111\uff78\113\uff78\114\uff78\001\002\000\056\062\uff6f" +
    "\064\uff6f\066\uff6f\067\137\070\124\071\135\072\121\073" +
    "\120\074\uff6f\075\uff6f\076\uff6f\100\uff6f\101\uff6f\102\uff6f" +
    "\103\uff6f\104\uff6f\105\uff6f\106\132\107\133\111\uff6f\113" +
    "\uff6f\114\uff6f\001\002\000\056\062\uff6c\064\uff6c\066\uff6c" +
    "\067\137\070\124\071\135\072\121\073\120\074\uff6c\075" +
    "\uff6c\076\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c" +
    "\105\uff6c\106\132\107\133\111\uff6c\113\uff6c\114\uff6c\001" +
    "\002\000\056\062\uff6d\064\uff6d\066\uff6d\067\137\070\124" +
    "\071\135\072\121\073\120\074\uff6d\075\uff6d\076\uff6d\100" +
    "\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\132" +
    "\107\133\111\uff6d\113\uff6d\114\uff6d\001\002\000\056\062" +
    "\uff71\064\uff71\066\uff71\067\137\070\124\071\135\072\121" +
    "\073\120\074\uff71\075\uff71\076\uff71\100\uff71\101\uff71\102" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\132\107\133\111\uff71" +
    "\113\uff71\114\uff71\001\002\000\056\062\uff74\064\uff74\066" +
    "\uff74\067\137\070\124\071\135\072\121\073\120\074\uff74" +
    "\075\125\076\uff74\100\140\101\127\102\136\103\134\104" +
    "\130\105\131\106\132\107\133\111\uff74\113\uff74\114\uff74" +
    "\001\002\000\056\062\uff73\064\uff73\066\uff73\067\137\070" +
    "\124\071\135\072\121\073\120\074\uff73\075\uff73\076\uff73" +
    "\100\140\101\127\102\136\103\134\104\130\105\131\106" +
    "\132\107\133\111\uff73\113\uff73\114\uff73\001\002\000\056" +
    "\062\uff79\064\uff79\066\uff79\067\uff79\070\uff79\071\135\072" +
    "\121\073\120\074\uff79\075\uff79\076\uff79\100\uff79\101\uff79" +
    "\102\uff79\103\uff79\104\uff79\105\uff79\106\132\107\133\111" +
    "\uff79\113\uff79\114\uff79\001\002\000\056\062\uff75\064\uff75" +
    "\066\uff75\067\137\070\124\071\135\072\121\073\120\074" +
    "\uff75\075\125\076\126\100\140\101\127\102\136\103\134" +
    "\104\130\105\131\106\132\107\133\111\uff75\113\uff75\114" +
    "\uff75\001\002\000\056\062\uff77\064\uff77\066\uff77\067\uff77" +
    "\070\uff77\071\uff77\072\uff77\073\120\074\uff77\075\uff77\076" +
    "\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77" +
    "\106\132\107\133\111\uff77\113\uff77\114\uff77\001\002\000" +
    "\056\062\uff76\064\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\120\074\uff76\075\uff76\076\uff76\100\uff76\101" +
    "\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\132\107\133" +
    "\111\uff76\113\uff76\114\uff76\001\002\000\062\062\uff85\064" +
    "\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\074\uff85\075\uff85\076\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\104\uff85\105\uff85\106\uff85\107\uff85\110\uff85\111\uff85" +
    "\112\uff85\113\uff85\114\uff85\001\002\000\004\052\171\001" +
    "\002\000\062\061\163\062\uff5a\064\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076" +
    "\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\106\uff5a\107\uff5a\110\uff5a\111\uff5a\113\uff5a\114\uff5a\001" +
    "\002\000\062\061\uff58\062\uff58\064\uff58\066\uff58\067\uff58" +
    "\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076" +
    "\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58" +
    "\106\uff58\107\uff58\110\uff58\111\uff58\113\uff58\114\uff58\001" +
    "\002\000\036\023\076\025\104\042\102\051\113\052\112" +
    "\053\100\054\111\055\107\056\110\057\116\063\103\065" +
    "\115\070\106\077\075\001\002\000\060\062\uff62\064\uff62" +
    "\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074" +
    "\uff62\075\uff62\076\uff62\100\uff62\101\uff62\102\uff62\103\uff62" +
    "\104\uff62\105\uff62\106\uff62\107\uff62\111\uff62\112\160\113" +
    "\uff62\114\uff62\001\002\000\062\062\uff86\064\uff86\066\uff86" +
    "\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075" +
    "\uff86\076\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86" +
    "\105\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113" +
    "\uff86\114\uff86\001\002\000\044\062\167\067\137\070\124" +
    "\071\135\072\121\073\120\074\123\075\125\076\126\100" +
    "\140\101\127\102\136\103\134\104\130\105\131\106\132" +
    "\107\133\001\002\000\062\061\uff57\062\uff57\064\uff57\066" +
    "\uff57\067\uff57\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57" +
    "\075\uff57\076\uff57\100\uff57\101\uff57\102\uff57\103\uff57\104" +
    "\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\113\uff57" +
    "\114\uff57\001\002\000\062\061\uff59\062\uff59\064\uff59\066" +
    "\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59" +
    "\075\uff59\076\uff59\100\uff59\101\uff59\102\uff59\103\uff59\104" +
    "\uff59\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\113\uff59" +
    "\114\uff59\001\002\000\064\062\uff83\064\uff83\065\172\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\076\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104" +
    "\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112\uff83" +
    "\113\uff83\114\uff83\001\002\000\040\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\066\uff7e\070\106\077\075\001" +
    "\002\000\004\066\201\001\002\000\006\066\uff7c\113\uff7c" +
    "\001\002\000\046\066\uff7b\067\137\070\124\071\135\072" +
    "\121\073\120\074\123\075\125\076\126\100\140\101\127" +
    "\102\136\103\134\104\130\105\131\106\132\107\133\113" +
    "\uff7b\001\002\000\006\066\uff7f\113\177\001\002\000\036" +
    "\023\076\025\104\042\102\051\113\052\112\053\100\054" +
    "\111\055\107\056\110\057\116\063\103\065\115\070\106" +
    "\077\075\001\002\000\006\066\uff7d\113\uff7d\001\002\000" +
    "\062\062\uff84\064\uff84\066\uff84\067\uff84\070\uff84\071\uff84" +
    "\072\uff84\073\uff84\074\uff84\075\uff84\076\uff84\100\uff84\101" +
    "\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84" +
    "\110\uff84\111\uff84\112\uff84\113\uff84\114\uff84\001\002\000" +
    "\056\062\uff69\064\uff69\066\uff69\067\uff69\070\uff69\071\135" +
    "\072\121\073\120\074\uff69\075\uff69\076\uff69\100\uff69\101" +
    "\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106\132\107\133" +
    "\111\uff69\113\uff69\114\uff69\001\002\000\004\065\204\001" +
    "\002\000\040\023\076\025\104\042\102\051\113\052\112" +
    "\053\100\054\111\055\107\056\110\057\116\063\103\065" +
    "\115\066\uff7e\070\106\077\075\001\002\000\004\066\206" +
    "\001\002\000\056\062\uff80\064\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106" +
    "\uff80\107\uff80\111\uff80\113\uff80\114\uff80\001\002\000\046" +
    "\064\uffc3\067\137\070\124\071\135\072\121\073\120\074" +
    "\123\075\125\076\126\100\140\101\127\102\136\103\134" +
    "\104\130\105\131\106\132\107\133\113\uffc3\001\002\000" +
    "\006\064\212\113\211\001\002\000\036\023\076\025\104" +
    "\042\102\051\113\052\112\053\100\054\111\055\107\056" +
    "\110\057\116\063\103\065\115\070\106\077\075\001\002" +
    "\000\056\062\uff63\064\uff63\066\uff63\067\uff63\070\uff63\071" +
    "\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\100\uff63" +
    "\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107" +
    "\uff63\111\uff63\113\uff63\114\uff63\001\002\000\046\064\uffc4" +
    "\067\137\070\124\071\135\072\121\073\120\074\123\075" +
    "\125\076\126\100\140\101\127\102\136\103\134\104\130" +
    "\105\131\106\132\107\133\113\uffc4\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\044\066\216\067\137\070\124\071\135" +
    "\072\121\073\120\074\123\075\125\076\126\100\140\101" +
    "\127\102\136\103\134\104\130\105\131\106\132\107\133" +
    "\001\002\000\056\062\uffde\064\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde" +
    "\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105\uffde\106" +
    "\uffde\107\uffde\111\uffde\113\uffde\114\uffde\001\002\000\006" +
    "\065\220\112\160\001\002\000\040\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\066\uff7e\070\106\077\075\001" +
    "\002\000\060\062\uff81\064\uff81\066\uff81\067\uff81\070\uff81" +
    "\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\100" +
    "\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81" +
    "\107\uff81\111\uff81\112\160\113\uff81\114\uff81\001\002\000" +
    "\004\066\223\001\002\000\056\062\uff82\064\uff82\066\uff82" +
    "\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\076\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\105\uff82\106\uff82\107\uff82\111\uff82\113\uff82\114\uff82\001" +
    "\002\000\056\062\uff72\064\uff72\066\uff72\067\137\070\124" +
    "\071\135\072\121\073\120\074\uff72\075\uff72\076\uff72\100" +
    "\140\101\127\102\136\103\134\104\130\105\131\106\132" +
    "\107\133\111\uff72\113\uff72\114\uff72\001\002\000\044\062" +
    "\226\067\137\070\124\071\135\072\121\073\120\074\123" +
    "\075\125\076\126\100\140\101\127\102\136\103\134\104" +
    "\130\105\131\106\132\107\133\001\002\000\012\061\uffce" +
    "\110\uffce\111\uffce\114\uffce\001\002\000\004\114\250\001" +
    "\002\000\004\114\uffd5\001\002\000\040\021\242\023\076" +
    "\025\104\042\102\051\113\052\112\053\100\054\111\055" +
    "\107\056\110\057\116\063\103\065\115\070\106\077\075" +
    "\001\002\000\004\052\235\001\002\000\006\113\uffd2\114" +
    "\uffd2\001\002\000\006\113\237\114\uffd6\001\002\000\010" +
    "\111\031\113\uffec\114\uffec\001\002\000\006\113\uffd1\114" +
    "\uffd1\001\002\000\004\052\235\001\002\000\006\113\uffd3" +
    "\114\uffd3\001\002\000\044\067\137\070\124\071\135\072" +
    "\121\073\120\074\123\075\125\076\126\100\140\101\127" +
    "\102\136\103\134\104\130\105\131\106\132\107\133\114" +
    "\uffc1\001\002\000\004\052\244\001\002\000\004\114\247" +
    "\001\002\000\004\065\245\001\002\000\004\066\246\001" +
    "\002\000\006\111\uff8a\114\uff8a\001\002\000\024\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\020\uffd7\052" +
    "\uffd7\064\uffd7\001\002\000\024\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\020\uffd9\052\uffd9\064\uffd9\001" +
    "\002\000\004\065\u0136\001\002\000\004\065\253\001\002" +
    "\000\004\066\254\001\002\000\004\063\255\001\002\000" +
    "\044\020\314\022\300\023\076\025\104\027\256\030\315" +
    "\031\272\035\260\036\262\037\267\040\305\041\310\047" +
    "\261\052\302\053\271\054\301\055\274\001\002\000\004" +
    "\065\u0131\001\002\000\052\020\uffb8\022\uffb8\023\uffb8\025" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\047\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\064\uffb8\001\002\000\004\065\u011e" +
    "\001\002\000\004\065\u011a\001\002\000\004\065\u0114\001" +
    "\002\000\046\020\314\022\300\023\076\025\104\027\256" +
    "\030\315\031\272\035\260\036\262\037\267\040\305\041" +
    "\310\047\261\052\302\053\271\054\301\055\274\064\u0113" +
    "\001\002\000\004\114\u0112\001\002\000\052\020\uffaf\022" +
    "\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\047" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\064\uffaf\001\002" +
    "\000\052\020\uffab\022\uffab\023\uffab\025\uffab\027\uffab\030" +
    "\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\047\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\064\uffab\001\002\000\004\063\u010a\001\002\000\052" +
    "\020\uffac\022\uffac\023\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\047\uffac\052\uffac\053\uffac\054\uffac\055\uffac\064" +
    "\uffac\001\002\000\006\106\uffa6\107\uffa6\001\002\000\004" +
    "\065\372\001\002\000\004\110\367\001\002\000\006\106" +
    "\uffa3\107\uffa3\001\002\000\052\020\uffae\022\uffae\023\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\047\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\064\uffae\001\002\000\006\106" +
    "\363\107\364\001\002\000\052\020\uffb0\022\uffb0\023\uffb0" +
    "\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\047\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\064\uffb0\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\006\106\uffa5\107\uffa5\001\002\000\014" +
    "\061\163\106\uffa4\107\uffa4\110\352\112\160\001\002\000" +
    "\052\020\uffb3\022\uffb3\023\uffb3\025\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\047\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\064\uffb3\001\002\000\052\020\uffb1\022\uffb1\023\uffb1\025" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\047\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\064\uffb1\001\002\000\004\114\351" +
    "\001\002\000\004\114\350\001\002\000\052\020\uffb2\022" +
    "\uffb2\023\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\047" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\064\uffb2\001\002" +
    "\000\004\114\347\001\002\000\052\020\uffaa\022\uffaa\023" +
    "\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\047\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\064\uffaa\001\002\000\004" +
    "\114\346\001\002\000\052\020\uffad\022\uffad\023\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\047\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\064\uffad\001\002\000\020\004\045" +
    "\005\046\006\041\007\057\010\055\011\060\052\042\001" +
    "\002\000\004\065\320\001\002\000\004\114\317\001\002" +
    "\000\052\020\uffb7\022\uffb7\023\uffb7\025\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\047\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\064\uffb7\001\002\000\036\023\076\025\104\042\102" +
    "\051\113\052\112\053\100\054\111\055\107\056\110\057" +
    "\116\063\103\065\115\070\106\077\075\001\002\000\044" +
    "\066\322\067\137\070\124\071\135\072\121\073\120\074" +
    "\123\075\125\076\126\100\140\101\127\102\136\103\134" +
    "\104\130\105\131\106\132\107\133\001\002\000\004\063" +
    "\323\001\002\000\044\020\314\022\300\023\076\025\104" +
    "\027\256\030\315\031\272\035\260\036\262\037\267\040" +
    "\305\041\310\047\261\052\302\053\271\054\301\055\274" +
    "\001\002\000\046\020\314\022\300\023\076\025\104\027" +
    "\256\030\315\031\272\035\260\036\262\037\267\040\305" +
    "\041\310\047\261\052\302\053\271\054\301\055\274\064" +
    "\326\001\002\000\052\020\uffb9\022\uffb9\023\uffb9\025\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\047\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\064\uffb9\001\002\000\054\020\uff8f\022" +
    "\uff8f\023\uff8f\025\uff8f\027\uff8f\030\uff8f\031\uff8f\032\327" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\047\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\064\uff8f" +
    "\001\002\000\004\063\331\001\002\000\052\020\uff91\022" +
    "\uff91\023\uff91\025\uff91\027\uff91\030\uff91\031\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\047" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\064\uff91\001\002" +
    "\000\044\020\314\022\300\023\076\025\104\027\256\030" +
    "\315\031\272\035\260\036\262\037\267\040\305\041\310" +
    "\047\261\052\302\053\271\054\301\055\274\001\002\000" +
    "\046\020\314\022\300\023\076\025\104\027\256\030\315" +
    "\031\272\035\260\036\262\037\267\040\305\041\310\047" +
    "\261\052\302\053\271\054\301\055\274\064\333\001\002" +
    "\000\052\020\uff90\022\uff90\023\uff90\025\uff90\027\uff90\030" +
    "\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\047\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\064\uff90\001\002\000\004\052\335\001\002\000\014" +
    "\061\065\110\uffec\111\031\113\uffec\114\uffec\001\002\000" +
    "\010\110\343\113\232\114\uffd4\001\002\000\012\061\065" +
    "\110\uffec\111\031\114\uffec\001\002\000\006\110\071\114" +
    "\uffc5\001\002\000\004\114\uff8c\001\002\000\004\114\uff8d" +
    "\001\002\000\040\021\344\023\076\025\104\042\102\051" +
    "\113\052\112\053\100\054\111\055\107\056\110\057\116" +
    "\063\103\065\115\070\106\077\075\001\002\000\004\052" +
    "\244\001\002\000\004\114\uff8b\001\002\000\052\020\uffb4" +
    "\022\uffb4\023\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\047\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\064\uffb4\001" +
    "\002\000\052\020\uff9e\022\uff9e\023\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\047\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\064\uff9e\001\002\000\052\020\uffb6\022\uffb6\023" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\047\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\064\uffb6\001\002\000\052" +
    "\020\uff9f\022\uff9f\023\uff9f\025\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\047\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\064" +
    "\uff9f\001\002\000\040\021\357\023\076\025\104\042\102" +
    "\051\113\052\112\053\100\054\111\055\107\056\110\057" +
    "\116\063\103\065\115\070\106\077\075\001\002\000\006" +
    "\110\354\112\160\001\002\000\036\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\070\106\077\075\001\002\000" +
    "\046\067\137\070\124\071\135\072\121\073\120\074\123" +
    "\075\125\076\126\100\140\101\127\102\136\103\134\104" +
    "\130\105\131\106\132\107\133\111\uff87\114\uff87\001\002" +
    "\000\046\067\137\070\124\071\135\072\121\073\120\074" +
    "\123\075\125\076\126\100\140\101\127\102\136\103\134" +
    "\104\130\105\131\106\132\107\133\111\uff89\114\uff89\001" +
    "\002\000\004\052\244\001\002\000\006\111\uff88\114\uff88" +
    "\001\002\000\044\067\137\070\124\071\135\072\121\073" +
    "\120\074\123\075\125\076\126\100\140\101\127\102\136" +
    "\103\134\104\130\105\131\106\132\107\133\114\362\001" +
    "\002\000\052\020\uff8e\022\uff8e\023\uff8e\025\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\047\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\064\uff8e\001\002\000\004\114\366\001\002\000" +
    "\004\114\365\001\002\000\052\020\uffa7\022\uffa7\023\uffa7" +
    "\025\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\047\uffa7\052\uffa7" +
    "\053\uffa7\054\uffa7\055\uffa7\064\uffa7\001\002\000\052\020" +
    "\uffa8\022\uffa8\023\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\047\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\064\uffa8" +
    "\001\002\000\036\023\076\025\104\042\102\051\113\052" +
    "\112\053\100\054\111\055\107\056\110\057\116\063\103" +
    "\065\115\070\106\077\075\001\002\000\044\067\137\070" +
    "\124\071\135\072\121\073\120\074\123\075\125\076\126" +
    "\100\140\101\127\102\136\103\134\104\130\105\131\106" +
    "\132\107\133\114\371\001\002\000\052\020\uffa9\022\uffa9" +
    "\023\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\047\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\064\uffa9\001\002\000" +
    "\036\023\076\025\104\042\102\051\113\052\112\053\100" +
    "\054\111\055\107\056\110\057\116\063\103\065\115\070" +
    "\106\077\075\001\002\000\044\066\374\067\137\070\124" +
    "\071\135\072\121\073\120\074\123\075\125\076\126\100" +
    "\140\101\127\102\136\103\134\104\130\105\131\106\132" +
    "\107\133\001\002\000\004\063\375\001\002\000\004\033" +
    "\u0100\001\002\000\010\033\uff95\034\uff95\064\uff95\001\002" +
    "\000\010\033\u0100\034\u0106\064\uff92\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\044\067\137\070\124\071\135\072\121" +
    "\073\120\074\123\075\125\076\126\100\140\101\127\102" +
    "\136\103\134\104\130\105\131\106\132\107\133\111\u0102" +
    "\001\002\000\044\020\314\022\300\023\076\025\104\027" +
    "\256\030\315\031\272\035\260\036\262\037\267\040\305" +
    "\041\310\047\261\052\302\053\271\054\301\055\274\001" +
    "\002\000\052\020\314\022\300\023\076\025\104\027\256" +
    "\030\315\031\272\033\uff94\034\uff94\035\260\036\262\037" +
    "\267\040\305\041\310\047\261\052\302\053\271\054\301" +
    "\055\274\064\uff94\001\002\000\010\033\uff96\034\uff96\064" +
    "\uff96\001\002\000\004\064\u0109\001\002\000\004\111\u0107" +
    "\001\002\000\044\020\314\022\300\023\076\025\104\027" +
    "\256\030\315\031\272\035\260\036\262\037\267\040\305" +
    "\041\310\047\261\052\302\053\271\054\301\055\274\001" +
    "\002\000\046\020\314\022\300\023\076\025\104\027\256" +
    "\030\315\031\272\035\260\036\262\037\267\040\305\041" +
    "\310\047\261\052\302\053\271\054\301\055\274\064\uff93" +
    "\001\002\000\052\020\uff97\022\uff97\023\uff97\025\uff97\027" +
    "\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\047\uff97\052\uff97\053\uff97\054" +
    "\uff97\055\uff97\064\uff97\001\002\000\044\020\314\022\300" +
    "\023\076\025\104\027\256\030\315\031\272\035\260\036" +
    "\262\037\267\040\305\041\310\047\261\052\302\053\271" +
    "\054\301\055\274\001\002\000\046\020\314\022\300\023" +
    "\076\025\104\027\256\030\315\031\272\035\260\036\262" +
    "\037\267\040\305\041\310\047\261\052\302\053\271\054" +
    "\301\055\274\064\u010c\001\002\000\004\036\u010d\001\002" +
    "\000\004\065\u010e\001\002\000\036\023\076\025\104\042" +
    "\102\051\113\052\112\053\100\054\111\055\107\056\110" +
    "\057\116\063\103\065\115\070\106\077\075\001\002\000" +
    "\044\066\u0110\067\137\070\124\071\135\072\121\073\120" +
    "\074\123\075\125\076\126\100\140\101\127\102\136\103" +
    "\134\104\130\105\131\106\132\107\133\001\002\000\004" +
    "\114\u0111\001\002\000\052\020\uff9d\022\uff9d\023\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\047\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\064\uff9d\001\002\000\052\020\uffb5" +
    "\022\uffb5\023\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\047\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\064\uffb5\001" +
    "\002\000\024\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\020\uffc0\052\uffc0\064\uffc0\001\002\000\036\023" +
    "\076\025\104\042\102\051\113\052\112\053\100\054\111" +
    "\055\107\056\110\057\116\063\103\065\115\070\106\077" +
    "\075\001\002\000\044\066\u0116\067\137\070\124\071\135" +
    "\072\121\073\120\074\123\075\125\076\126\100\140\101" +
    "\127\102\136\103\134\104\130\105\131\106\132\107\133" +
    "\001\002\000\004\063\u0117\001\002\000\044\020\314\022" +
    "\300\023\076\025\104\027\256\030\315\031\272\035\260" +
    "\036\262\037\267\040\305\041\310\047\261\052\302\053" +
    "\271\054\301\055\274\001\002\000\046\020\314\022\300" +
    "\023\076\025\104\027\256\030\315\031\272\035\260\036" +
    "\262\037\267\040\305\041\310\047\261\052\302\053\271" +
    "\054\301\055\274\064\u0119\001\002\000\052\020\uff9c\022" +
    "\uff9c\023\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\047" +
    "\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\064\uff9c\001\002" +
    "\000\036\023\076\025\104\042\102\051\113\052\112\053" +
    "\100\054\111\055\107\056\110\057\116\063\103\065\115" +
    "\070\106\077\075\001\002\000\044\066\u011c\067\137\070" +
    "\124\071\135\072\121\073\120\074\123\075\125\076\126" +
    "\100\140\101\127\102\136\103\134\104\130\105\131\106" +
    "\132\107\133\001\002\000\004\114\u011d\001\002\000\052" +
    "\020\uffa0\022\uffa0\023\uffa0\025\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\047\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\064" +
    "\uffa0\001\002\000\006\020\u011f\052\u0123\001\002\000\020" +
    "\004\045\005\046\006\041\007\057\010\055\011\060\052" +
    "\042\001\002\000\036\023\076\025\104\042\102\051\113" +
    "\052\112\053\100\054\111\055\107\056\110\057\116\063" +
    "\103\065\115\070\106\077\075\001\002\000\004\111\u0125" +
    "\001\002\000\004\111\u0124\001\002\000\006\110\352\112" +
    "\160\001\002\000\036\023\uff9a\025\uff9a\042\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\063" +
    "\uff9a\065\uff9a\070\uff9a\077\uff9a\001\002\000\036\023\uff99" +
    "\025\uff99\042\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\056\uff99\057\uff99\063\uff99\065\uff99\070\uff99\077\uff99" +
    "\001\002\000\044\067\137\070\124\071\135\072\121\073" +
    "\120\074\123\075\125\076\126\100\140\101\127\102\136" +
    "\103\134\104\130\105\131\106\132\107\133\111\u0127\001" +
    "\002\000\036\023\076\025\104\042\102\051\113\052\112" +
    "\053\100\054\111\055\107\056\110\057\116\063\103\065" +
    "\115\070\106\077\075\001\002\000\044\066\u0129\067\137" +
    "\070\124\071\135\072\121\073\120\074\123\075\125\076" +
    "\126\100\140\101\127\102\136\103\134\104\130\105\131" +
    "\106\132\107\133\001\002\000\004\063\u012a\001\002\000" +
    "\044\020\314\022\300\023\076\025\104\027\256\030\315" +
    "\031\272\035\260\036\262\037\267\040\305\041\310\047" +
    "\261\052\302\053\271\054\301\055\274\001\002\000\046" +
    "\020\314\022\300\023\076\025\104\027\256\030\315\031" +
    "\272\035\260\036\262\037\267\040\305\041\310\047\261" +
    "\052\302\053\271\054\301\055\274\064\u012c\001\002\000" +
    "\052\020\uff9b\022\uff9b\023\uff9b\025\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\047\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\064\uff9b\001\002\000\004\052\u012e\001\002\000\004\110" +
    "\u012f\001\002\000\036\023\076\025\104\042\102\051\113" +
    "\052\112\053\100\054\111\055\107\056\110\057\116\063" +
    "\103\065\115\070\106\077\075\001\002\000\044\067\137" +
    "\070\124\071\135\072\121\073\120\074\123\075\125\076" +
    "\126\100\140\101\127\102\136\103\134\104\130\105\131" +
    "\106\132\107\133\111\uff98\001\002\000\036\023\076\025" +
    "\104\042\102\051\113\052\112\053\100\054\111\055\107" +
    "\056\110\057\116\063\103\065\115\070\106\077\075\001" +
    "\002\000\004\066\u0134\001\002\000\044\066\uffa1\067\137" +
    "\070\124\071\135\072\121\073\120\074\123\075\125\076" +
    "\126\100\140\101\127\102\136\103\134\104\130\105\131" +
    "\106\132\107\133\001\002\000\004\114\u0135\001\002\000" +
    "\052\020\uffa2\022\uffa2\023\uffa2\025\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\047\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\064\uffa2\001\002\000\004\066\u0137\001\002\000\004\063" +
    "\u0138\001\002\000\012\043\u013c\044\u013b\045\u0139\046\u013a" +
    "\001\002\000\004\065\u0152\001\002\000\004\065\u014e\001" +
    "\002\000\004\065\u0148\001\002\000\004\110\u0145\001\002" +
    "\000\014\043\uffe2\044\uffe2\045\uffe2\046\uffe2\064\uffe2\001" +
    "\002\000\014\043\uffe3\044\uffe3\045\uffe3\046\uffe3\064\uffe3" +
    "\001\002\000\014\043\uffdf\044\uffdf\045\uffdf\046\uffdf\064" +
    "\uffdf\001\002\000\014\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\064\uffe0\001\002\000\014\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\064\uffe1\001\002\000\014\043\u013c\044\u013b\045\u0139" +
    "\046\u013a\064\u0143\001\002\000\024\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\020\uffe5\052\uffe5\064\uffe5" +
    "\001\002\000\014\043\uffe4\044\uffe4\045\uffe4\046\uffe4\064" +
    "\uffe4\001\002\000\036\023\076\025\104\042\102\051\113" +
    "\052\112\053\100\054\111\055\107\056\110\057\116\063" +
    "\103\065\115\070\106\077\075\001\002\000\044\067\137" +
    "\070\124\071\135\072\121\073\120\074\123\075\125\076" +
    "\126\100\140\101\127\102\136\103\134\104\130\105\131" +
    "\106\132\107\133\114\u0147\001\002\000\014\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\064\uffdd\001\002\000\036\023\076" +
    "\025\104\042\102\051\113\052\112\053\100\054\111\055" +
    "\107\056\110\057\116\063\103\065\115\070\106\077\075" +
    "\001\002\000\044\066\u014a\067\137\070\124\071\135\072" +
    "\121\073\120\074\123\075\125\076\126\100\140\101\127" +
    "\102\136\103\134\104\130\105\131\106\132\107\133\001" +
    "\002\000\004\110\u014b\001\002\000\036\023\076\025\104" +
    "\042\102\051\113\052\112\053\100\054\111\055\107\056" +
    "\110\057\116\063\103\065\115\070\106\077\075\001\002" +
    "\000\044\067\137\070\124\071\135\072\121\073\120\074" +
    "\123\075\125\076\126\100\140\101\127\102\136\103\134" +
    "\104\130\105\131\106\132\107\133\114\u014d\001\002\000" +
    "\014\043\uffdc\044\uffdc\045\uffdc\046\uffdc\064\uffdc\001\002" +
    "\000\036\023\076\025\104\042\102\051\113\052\112\053" +
    "\100\054\111\055\107\056\110\057\116\063\103\065\115" +
    "\070\106\077\075\001\002\000\044\066\u0150\067\137\070" +
    "\124\071\135\072\121\073\120\074\123\075\125\076\126" +
    "\100\140\101\127\102\136\103\134\104\130\105\131\106" +
    "\132\107\133\001\002\000\004\114\u0151\001\002\000\014" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\064\uffda\001\002\000" +
    "\036\023\076\025\104\042\102\051\113\052\112\053\100" +
    "\054\111\055\107\056\110\057\116\063\103\065\115\070" +
    "\106\077\075\001\002\000\044\066\u0154\067\137\070\124" +
    "\071\135\072\121\073\120\074\123\075\125\076\126\100" +
    "\140\101\127\102\136\103\134\104\130\105\131\106\132" +
    "\107\133\001\002\000\004\114\u0155\001\002\000\014\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\064\uffdb\001\002\000\024" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\020" +
    "\uffeb\052\uffeb\064\uffeb\001\002\000\006\002\ufff2\012\ufff2" +
    "\001\002\000\004\065\u0159\001\002\000\022\004\045\005" +
    "\046\006\041\007\057\010\055\011\060\052\042\066\uffbd" +
    "\001\002\000\004\052\u0165\001\002\000\004\066\u0160\001" +
    "\002\000\006\066\uffbb\113\uffbb\001\002\000\006\066\uffbe" +
    "\113\u015e\001\002\000\020\004\045\005\046\006\041\007" +
    "\057\010\055\011\060\052\042\001\002\000\006\066\uffbc" +
    "\113\uffbc\001\002\000\006\063\uffec\111\031\001\002\000" +
    "\004\063\u0162\001\002\000\044\020\314\022\300\023\076" +
    "\025\104\027\256\030\315\031\272\035\260\036\262\037" +
    "\267\040\305\041\310\047\261\052\302\053\271\054\301" +
    "\055\274\001\002\000\046\020\314\022\300\023\076\025" +
    "\104\027\256\030\315\031\272\035\260\036\262\037\267" +
    "\040\305\041\310\047\261\052\302\053\271\054\301\055" +
    "\274\064\u0164\001\002\000\024\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\020\uffbf\052\uffbf\064\uffbf\001" +
    "\002\000\006\066\uffba\113\uffba\001\002\000\006\002\ufff4" +
    "\012\ufff4\001\002\000\010\012\ufffc\016\ufffc\026\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\006\002\004\110\003\001\001\000\010\007" +
    "\010\011\006\012\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0166\001\001\000\002\001\001\000" +
    "\010\006\014\013\017\076\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\023\005" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0165\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\027\001\001\000\004\020" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\046\022\053\032\042" +
    "\035\043\050\052\051\051\057\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\022\053\032" +
    "\042\035\043\050\052\051\051\057\u0155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\062\037\063\045\065\001\001\000\006" +
    "\024\227\033\226\001\001\000\002\001\001\000\014\034" +
    "\224\040\073\053\104\054\113\055\076\001\001\000\006" +
    "\015\066\037\067\001\001\000\004\046\071\001\001\000" +
    "\002\001\001\000\014\034\100\040\073\053\104\054\113" +
    "\055\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\223\040\073\053\104\054\113" +
    "\055\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\207\034\206\040\073\053\104\054\113\055\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\201" +
    "\040\073\053\104\054\113\055\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\160" +
    "\031\163\060\161\062\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\116\040\073\053\104\054\113" +
    "\055\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\155\040\073\053\104\054\113\055\076\001\001" +
    "\000\014\034\154\040\073\053\104\054\113\055\076\001" +
    "\001\000\002\001\001\000\014\034\153\040\073\053\104" +
    "\054\113\055\076\001\001\000\014\034\152\040\073\053" +
    "\104\054\113\055\076\001\001\000\014\034\151\040\073" +
    "\053\104\054\113\055\076\001\001\000\014\034\150\040" +
    "\073\053\104\054\113\055\076\001\001\000\014\034\147" +
    "\040\073\053\104\054\113\055\076\001\001\000\014\034" +
    "\146\040\073\053\104\054\113\055\076\001\001\000\014" +
    "\034\145\040\073\053\104\054\113\055\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\144\040\073" +
    "\053\104\054\113\055\076\001\001\000\014\034\143\040" +
    "\073\053\104\054\113\055\076\001\001\000\014\034\142" +
    "\040\073\053\104\054\113\055\076\001\001\000\014\034" +
    "\141\040\073\053\104\054\113\055\076\001\001\000\014" +
    "\034\140\040\073\053\104\054\113\055\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\167\001\001\000\002\001\001\000\014\034\165\040" +
    "\073\053\104\054\113\055\076\001\001\000\004\062\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\034\174" +
    "\040\073\053\104\054\113\055\076\056\172\061\173\107" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\034\174\040\073\053" +
    "\104\054\113\055\076\061\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\034\174\040\073\053\104\054\113\055\076\056\204" +
    "\061\173\107\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\212" +
    "\040\073\053\104\054\113\055\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\214\040\073\053\104" +
    "\054\113\055\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\220\062\156\001\001\000\022\034\174" +
    "\040\073\053\104\054\113\055\076\056\221\061\173\107" +
    "\175\001\001\000\004\062\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\034\240\040\073\053\104\054\113\055\076\001\001\000" +
    "\006\023\233\063\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\235\001\001\000\002\001\001\000" +
    "\004\063\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\014\275\016\262" +
    "\017\256\026\315\027\311\030\310\053\272\054\305\055" +
    "\263\064\302\065\306\070\276\074\274\075\264\077\303" +
    "\103\267\104\312\105\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\014\275\017\324\026\315\027\311\030" +
    "\310\053\272\054\305\055\263\064\302\065\306\070\276" +
    "\074\274\075\264\077\303\103\267\104\312\105\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\360\040\073\053\104\054\113\055\076\001\001\000\002" +
    "\001\001\000\012\025\160\031\352\060\161\062\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\034\320\040\073\053\104\054\113" +
    "\055\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\014\275\016\323\017\256\026\315\027\311\030\310" +
    "\053\272\054\305\055\263\064\302\065\306\070\276\074" +
    "\274\075\264\077\303\103\267\104\312\105\265\001\001" +
    "\000\044\014\275\017\324\026\315\027\311\030\310\053" +
    "\272\054\305\055\263\064\302\065\306\070\276\074\274" +
    "\075\264\077\303\103\267\104\312\105\265\001\001\000" +
    "\002\001\001\000\004\066\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\014\275\016\331\017\256\026" +
    "\315\027\311\030\310\053\272\054\305\055\263\064\302" +
    "\065\306\070\276\074\274\075\264\077\303\103\267\104" +
    "\312\105\265\001\001\000\044\014\275\017\324\026\315" +
    "\027\311\030\310\053\272\054\305\055\263\064\302\065" +
    "\306\070\276\074\274\075\264\077\303\103\267\104\312" +
    "\105\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\335\037\063\045\336\001\001\000\006\024\227" +
    "\033\341\001\001\000\006\015\337\037\067\001\001\000" +
    "\004\046\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\240\040\073\053\104\054\113\055\076\001" +
    "\001\000\004\047\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\355\040\073\053\104\054\113\055\076" +
    "\001\001\000\004\062\164\001\001\000\014\034\354\040" +
    "\073\053\104\054\113\055\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\367\040\073\053\104\054\113\055\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\372\040" +
    "\073\053\104\054\113\055\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\100\376\101\375\001\001\000" +
    "\002\001\001\000\006\101\u0103\102\u0104\001\001\000\014" +
    "\034\u0100\040\073\053\104\054\113\055\076\001\001\000" +
    "\002\001\001\000\046\014\275\016\u0102\017\256\026\315" +
    "\027\311\030\310\053\272\054\305\055\263\064\302\065" +
    "\306\070\276\074\274\075\264\077\303\103\267\104\312" +
    "\105\265\001\001\000\044\014\275\017\324\026\315\027" +
    "\311\030\310\053\272\054\305\055\263\064\302\065\306" +
    "\070\276\074\274\075\264\077\303\103\267\104\312\105" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\014\275\016\u0107\017\256\026\315\027" +
    "\311\030\310\053\272\054\305\055\263\064\302\065\306" +
    "\070\276\074\274\075\264\077\303\103\267\104\312\105" +
    "\265\001\001\000\044\014\275\017\324\026\315\027\311" +
    "\030\310\053\272\054\305\055\263\064\302\065\306\070" +
    "\276\074\274\075\264\077\303\103\267\104\312\105\265" +
    "\001\001\000\002\001\001\000\046\014\275\016\u010a\017" +
    "\256\026\315\027\311\030\310\053\272\054\305\055\263" +
    "\064\302\065\306\070\276\074\274\075\264\077\303\103" +
    "\267\104\312\105\265\001\001\000\044\014\275\017\324" +
    "\026\315\027\311\030\310\053\272\054\305\055\263\064" +
    "\302\065\306\070\276\074\274\075\264\077\303\103\267" +
    "\104\312\105\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\u010e\040\073\053\104\054\113\055\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\034\u0114" +
    "\040\073\053\104\054\113\055\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\014\275\016\u0117\017\256" +
    "\026\315\027\311\030\310\053\272\054\305\055\263\064" +
    "\302\065\306\070\276\074\274\075\264\077\303\103\267" +
    "\104\312\105\265\001\001\000\044\014\275\017\324\026" +
    "\315\027\311\030\310\053\272\054\305\055\263\064\302" +
    "\065\306\070\276\074\274\075\264\077\303\103\267\104" +
    "\312\105\265\001\001\000\002\001\001\000\014\034\u011a" +
    "\040\073\053\104\054\113\055\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\u0120" +
    "\071\u011f\072\u0121\001\001\000\004\032\u012c\001\001\000" +
    "\014\034\u0125\040\073\053\104\054\113\055\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\352\062" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\034\u0127\040\073\053\104\054\113\055" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\014\275\016\u012a\017\256\026\315\027\311\030\310\053" +
    "\272\054\305\055\263\064\302\065\306\070\276\074\274" +
    "\075\264\077\303\103\267\104\312\105\265\001\001\000" +
    "\044\014\275\017\324\026\315\027\311\030\310\053\272" +
    "\054\305\055\263\064\302\065\306\070\276\074\274\075" +
    "\264\077\303\103\267\104\312\105\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\u012f\040\073\053\104\054\113\055\076\001\001\000\002" +
    "\001\001\000\016\034\u0132\040\073\053\104\054\113\055" +
    "\076\067\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\u013d\036\u0141\041\u013c\042\u0140" +
    "\043\u013f\044\u013e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\u0143\041\u013c\042\u0140\043\u013f" +
    "\044\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\u0145\040\073\053\104\054\113\055\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\u0148\040" +
    "\073\053\104\054\113\055\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\u014b\040\073\053\104\054" +
    "\113\055\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\u014e\040\073\053\104\054\113\055\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\034\u0152\040\073\053\104\054\113\055\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\032\u0159\052\u015c\073\u015b\106\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\u0159\073\u015e\001\001\000\002\001\001" +
    "\000\004\015\u0160\001\001\000\002\001\001\000\046\014" +
    "\275\016\u0162\017\256\026\315\027\311\030\310\053\272" +
    "\054\305\055\263\064\302\065\306\070\276\074\274\075" +
    "\264\077\303\103\267\104\312\105\265\001\001\000\044" +
    "\014\275\017\324\026\315\027\311\030\310\053\272\054" +
    "\305\055\263\064\302\065\306\070\276\074\274\075\264" +
    "\077\303\103\267\104\312\105\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphikSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphikSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphikSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    public static Nodo raiz;
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        //Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        //Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphikSintactico$actions {



  private final GraphikSintactico parser;

  /** Constructor */
  CUP$GraphikSintactico$actions(GraphikSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraphikSintactico$do_action_part00000000(
    int                        CUP$GraphikSintactico$act_num,
    java_cup.runtime.lr_parser CUP$GraphikSintactico$parser,
    java.util.Stack            CUP$GraphikSintactico$stack,
    int                        CUP$GraphikSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphikSintactico$result;

      /* select the action based on the action number */
      switch (CUP$GraphikSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = start_val;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphikSintactico$parser.done_parsing();
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("Empezo Graphik \n");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",70, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 IM IN L_ALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Raiz");
                nuevo.Hijo(a);
                nuevo.Hijo(b);
                nuevo.Hijo(c);
                RESULT = nuevo;
                System.out.println("Finalizo Graphik \n");
                parser.raiz=nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IM ::= IMPORTACIONES 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IM",5, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IM ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Importa");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IM",5, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACIONES ::= IMPORTACIONES L_IMPORTACIONES 
            {
              Nodo RESULT =null;
		int importaleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int importaright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo importa = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		importa.Hijo(nodo); RESULT =importa;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",7, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACIONES ::= L_IMPORTACIONES 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Importa"); nuevo.Hijo(nodo);RESULT=nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",7, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_IMPORTACIONES ::= importar nombreArchivo fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_IMPORTACIONES",8, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN ::= INCLUYE_HK 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IN",4, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Incluye");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IN",4, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INCLUYE_HK ::= INCLUYE_HK L_INCLUYE 
            {
              Nodo RESULT =null;
		int incluyeleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int incluyeright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo incluye = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		incluye.Hijo(nodo); RESULT =incluye;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",9, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INCLUYE_HK ::= L_INCLUYE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Incluye"); nuevo.Hijo(nodo);RESULT=nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",9, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_INCLUYE ::= incluirHK id fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_INCLUYE",60, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ALS ::= L_ALS ALS 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 als.Hijo(nodo); RESULT = als; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ALS ::= ALS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("ListaAls"); nuevo.Hijo(nodo); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALS ::= Tals id VISIBILIDAD HEREDA llaveAbre CUERPO_ALS llaveCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Als");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(v);
            nuevo.Hijo(h);
            nuevo.Hijo(corpo);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // HEREDA ::= hereda id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  
            Nodo nuevo = new Nodo("Hereda"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i); 
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // HEREDA ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Hereda");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dospuntos publico 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Publico");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= dospuntos privado 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Privado");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VISIBILIDAD ::= dospuntos protegido 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Protegido");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VISIBILIDAD ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Publico");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_ALS ::= CUERPO_ALS L_CUERPO 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		als.Hijo(nodo); RESULT = als;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_ALS ::= L_CUERPO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("SentenciasAls");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= DECLARACION_GLOBAL 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",45, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= METODO_INICIO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",45, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= DATOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",45, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= METODOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",45, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATOS ::= Tvacio datos parenAbre parenCierra llaveAbre CUERPO_DATOS llaveCierra 
            {
              Nodo RESULT =null;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("MetodoDatos");
                Nodo tipo = new Nodo("TipoVacio");
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DATOS",27, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_DATOS ::= CUERPO_DATOS L_DATOS 
            {
              Nodo RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo datos = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		datos.Hijo(nodo); RESULT = datos;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_DATOS",28, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_DATOS ::= L_DATOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("CuerpoDatos");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_DATOS",28, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_DATOS ::= PROCESAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_DATOS ::= DONDE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_DATOS ::= DONDECADA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_DATOS ::= DONDETODO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COLUMNA ::= columna parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Columna");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",30, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PROCESAR ::= procesar igual EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Procesar");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PROCESAR",31, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DONDE ::= donde parenAbre EXP parenCierra igual EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Donde");
                Nodo e = new Nodo("Exp");
                Nodo e2 = new Nodo("Exp");
                e.Hijo(exp);
                e2.Hijo(exp2);
                nuevo.Hijo(e);
                nuevo.Hijo(e2);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDE",32, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DONDECADA ::= dondecada parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
                Nodo nuevo = new Nodo("DondeCada");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDECADA",33, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DONDETODO ::= dondetodo parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
                Nodo nuevo = new Nodo("DondeTodo");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDETODO",34, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_GLOBAL ::= var TIPO_DATO id VISIBILIDAD OPCION fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("DeclaraGlobalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",16, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_GLOBAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("DeclaraGlobalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",16, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_GLOBAL ::= var TIPO_DATO id VISIBILIDAD igual nuevo LLAMAR_INSTANCIA fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("InstanciaGlobal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",16, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPCION ::= coma L_VAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPCION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo n= new Nodo("Asignacion"); n.Hijo(nodo);RESULT = n;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPCION ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Asignacion");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_VAR ::= L_VAR coma V 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 v.setNombre("L");
            nodo.Hijo(v);
            RESULT = nodo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",17, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L_VAR ::= V 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		v.setNombre("L");
            Nodo nuevo = new Nodo("ListaID");
        nuevo.Hijo(v);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",17, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // V ::= id VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("");
           Nodo i= new Nodo(id);
                nuevo.Hijo(i);
                nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("V",49, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARREGLO ::= ARREGLO ARR 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo arr = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                        arr.Hijo(a);
                        RESULT=arr;
                    
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",35, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARREGLO ::= ARR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Dimensiones");
        nuevo.Hijo(a);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",35, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARR ::= corAbre EXP corCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Exp");
                        nuevo.Hijo(exp);
                        RESULT=nuevo;
                    
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARR",29, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_DATO ::= Tentero 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("numero"); 
           
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_DATO ::= Tdecimal 
            {
              Nodo RESULT =null;
		  
           RESULT= new Nodo("decimal"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_DATO ::= Tcaracter 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("caracter"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_DATO ::= Tcadena 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("cadena"); 
             
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_DATO ::= Tbool 
            {
              Nodo RESULT =null;
		  
            RESULT= new Nodo("bool"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO_DATO ::= Tvacio 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("vacio"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_DATO ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  
            Nodo nuevo = new Nodo("Als"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_ARREGLO ::= igual EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",36, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION_ARREGLO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Posiciones");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",36, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_POSICIONES ::= L_POSICIONES coma EXP 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		p.Hijo(nodo); RESULT = p;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_POSICIONES",6, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_POSICIONES ::= EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Posiciones"); 
                nuevo.Hijo(nodo); 
                RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_POSICIONES",6, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_POSICIONES ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("null");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_POSICIONES",6, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= igual EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO_INICIO ::= Tvacio inicio parenAbre parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("MetodoInicio");
                Nodo corpo = new Nodo("CuerpoInicio");
                Nodo tipo = new Nodo("TipoVacio");
                corpo.Hijo(sent);
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("METODO_INICIO",38, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= TIPO_DATO id parenAbre L_PARAMETROS parenCierra VISIBILIDAD llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Metodo");
                Nodo corpo = new Nodo("CuerpoMetodo");
                Nodo i = new Nodo(id);
                corpo.Hijo(s);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                nuevo.Hijo(p);
                nuevo.Hijo(v);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("METODOS",39, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_PARAMETROS ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",68, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_PARAMETROS ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Parametros");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",68, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= PARAMETROS coma PP 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                pp.setNombre("P");
                p.Hijo(pp);
                RESULT = p;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETROS ::= PP 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                pp.setNombre("P");
                Nodo nuevo = new Nodo("Parametros");
                nuevo.Hijo(pp);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",40, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PP ::= TIPO_DATO id 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("");
                Nodo i = new Nodo(id);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PP",57, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= SENTENCIAS L_SENT 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		sent.Hijo(nodo); RESULT = sent;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS ::= L_SENT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo n = new Nodo("Sentencias"); n.Hijo(nodo); RESULT = n;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_SENT ::= DECLARACION_LOCAL fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_SENT ::= LLAMAR fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_SENT ::= LLAMARHK fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_SENT ::= ASIGNA fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L_SENT ::= RETORNA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // L_SENT ::= SENTENCIA_SI 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L_SENT ::= SENTENCIA_SELECCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L_SENT ::= SENTENCIA_PARA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L_SENT ::= SENTENCIA_MIENTRAS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_SENT ::= SENTENCIA_HMIENTRAS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_SENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L_SENT ::= TERMINAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // L_SENT ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // L_SENT ::= GRAPHIKAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // L_SENT ::= LLAMADA_ARREGLO igual EXP fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("AsignaPosicion");
                nuevo.Hijo(nodo);
                nuevo.Hijo(exp);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // L_SENT ::= INCDEC incremento fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
                Nodo nuevo = new Nodo("Incremento");
                nuevo.Hijo(nodo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // L_SENT ::= INCDEC decremento fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
            Nodo nuevo = new Nodo("Decremento");
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCDEC ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCDEC",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INCDEC ::= dec 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("decimal"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCDEC",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INCDEC ::= id 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCDEC",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INCDEC ::= carac 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCDEC",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // GRAPHIKAR ::= graphikar parenAbre ARR_GRAPHIK parenCierra fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("Graphikar");
                nuevo.Hijo(nodo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("GRAPHIKAR",22, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARR_GRAPHIK ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARR_GRAPHIK",53, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IMPRIMIR ::= imprimir parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("Imprimir"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",67, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTINUAR ::= continuar fin 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Continuar");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",66, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TERMINAR ::= terminar fin 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Terminar");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR",65, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_HMIENTRAS ::= hacer llaveAbre SENTENCIAS llaveCierra mientras parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("SentenciaHacer");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoHacer"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(s);
                            nuevo.Hijo(e);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HMIENTRAS",58, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_MIENTRAS ::= mientras parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaMientras");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoMientras"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(e);
                            nuevo.Hijo(s);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",59, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_PARA ::= para parenAbre ASIGNA_PARA EXP dospuntos EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaPara");
                            Nodo e = new Nodo("Exp"); 
                            Nodo e2 = new Nodo("Exp"); 
                            Nodo sent = new Nodo("CuerpoPara"); 
                            sent.Hijo(s);
                            e.Hijo(cond);
                            e2.Hijo(exp);
                            nuevo.Hijo(a);
                            nuevo.Hijo(e);
                            nuevo.Hijo(e2);
                            nuevo.Hijo(sent);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",54, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ASIGNA_PARA ::= DECLARACION_PARA dospuntos 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",55, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ASIGNA_PARA ::= ASIGNA dospuntos 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",55, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION_PARA ::= var TIPO_DATO id igual EXP 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalVariable");
                Nodo l= new Nodo("ListaID");
                Nodo t2= new Nodo("Publico");
                Nodo l2= new Nodo("L");
                Nodo e= new Nodo("Exp");
                Nodo i= new Nodo(id);
                l.Hijo(l2);
                l2.Hijo(i);
                l2.Hijo(t2);
                e.Hijo(exp);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(e);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",56, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_SELECCION ::= seleccion parenAbre EXP parenCierra llaveAbre CASOS DEFECTO llaveCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo casos = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaSeleccion");
                            Nodo e = new Nodo("Exp"); 
                            e.Hijo(exp);
                            nuevo.Hijo(e);
                            nuevo.Hijo(casos);
                            nuevo.Hijo(def);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",61, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASOS ::= CASOS L_CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		caso.Hijo(nodo); RESULT = caso;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",62, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASOS ::= L_CASO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("ListaCasos"); nuevo.Hijo(nodo);RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",62, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // L_CASO ::= caso EXP dospuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Caso");
              Nodo e = new Nodo("Exp");
              Nodo c = new Nodo("CuerpoCaso");
                e.Hijo(exp); 
                c.Hijo(sent);
                nuevo.Hijo(e);
                nuevo.Hijo(c);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CASO",63, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DEFECTO ::= defecto dospuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("CuerpoDefecto"); nuevo.Hijo(sent); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",64, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DEFECTO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("CuerpoDefecto");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",64, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_SI ::= si parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra SENTENCIA_SINO 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int corposinoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int corposinoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo corposino = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("SentenciaSi");
                    Nodo e= new Nodo("Exp");
                    Nodo si= new Nodo("CuerpoSi");
                    si.Hijo(corpo);
                    e.Hijo(exp);
                    nuevo.Hijo(e);
                    nuevo.Hijo(si);
                    nuevo.Hijo(corposino);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",51, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_SINO ::= sino llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("CuerpoSino");
                    nuevo.Hijo(sent);
                    RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",52, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_SINO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("CuerpoSino");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",52, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RETORNA ::= retornar EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Retorno"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("RETORNA",50, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD OPCION 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION_LOCAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD igual nuevo LLAMAR_INSTANCIA 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("InstanciaLocal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LLAMAR_INSTANCIA ::= id parenAbre parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR_INSTANCIA",37, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNA ::= id igual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("Exp");
                nuevo.Hijo(i);
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",21, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNA ::= id igual nuevo LLAMAR_INSTANCIA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("InstanciaLocal");
                nuevo.Hijo(i);
                e.Hijo(ins);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",21, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNA ::= id L_ACCESO igual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("AsignacionAcceso");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("Exp");
                nuevo.Hijo(i);
                nuevo.Hijo(nodo);
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",21, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // L_ACCESO ::= L_ACCESO A 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		a.setNombre("L_Acceso"); nodo.Hijo(a); RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ACCESO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // L_ACCESO ::= A 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		a.setNombre("L_Acceso");
        Nodo nuevo = new Nodo("Acceso");
        nuevo.Hijo(a);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ACCESO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // A ::= punto id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo  = new Nodo(""); Nodo i = new Nodo(id); nuevo.Hijo(i); nuevo.Hijo(nodo); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("A",48, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // A ::= punto id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo(""); Nodo i = new Nodo(id); nuevo.Hijo(i); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("A",48, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // LLAMAR ::= llamar id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("LlamaFun");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",42, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LLAMAR ::= llamar id L_ACCESO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("LlamaFunAcceso");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",42, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LLAMARHK ::= llamarHK id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		

            Nodo nuevo = new Nodo("LlamarHK"); 
            Nodo i = new Nodo(id);  
            nuevo.Hijo(i); 
            nuevo.Hijo(nodo);         
            RESULT = nuevo;    
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK",43, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAM_LLAMA ::= PARAM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAM_LLAMA ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Parametros");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARAM ::= PARAM coma P 
            {
              Nodo RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 param.Hijo(p); RESULT = param;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM",69, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAM ::= P 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Parametros"); nuevo.Hijo(p); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM",69, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // P ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("P",47, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= EXP por EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= EXP potencia EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("^");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= EXP or EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("||");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= EXP xor EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("&|");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXP ::= EXP and EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("&&");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("!");
        nuevo.Hijo(m);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP ::= EXP menorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP ::= EXP mayorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXP ::= EXP menorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXP ::= EXP mayorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP ::= EXP igualigual EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("==");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP ::= EXP diferente EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("!=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP ::= EXP incremento 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
        Nodo nuevo = new Nodo("Incremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXP ::= EXP decremento 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
        Nodo nuevo = new Nodo("Decremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP ::= menos EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("Unario");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP ::= COLUMNA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP ::= parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXP ::= LLAMAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= LLAMADA_ARREGLO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXP ::= LLAMARHK 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= llaveAbre L_POSICIONES llaveCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXP ::= id L_ACCESO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("Acceso");
        Nodo n=new Nodo(id);
        nuevo.Hijo(n);
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXP ::= cad 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXP ::= dec 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("decimal"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXP ::= carac 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXP ::= falso 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("falso");
            Nodo n = new Nodo("falso");
            nuevo.Hijo(n);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXP ::= verdadero 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("verdadero"); 
            Nodo n = new Nodo("verdadero");
            nuevo.Hijo(n);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LLAMADA_ARREGLO ::= id DIM 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("LlamaArreglo");
                    Nodo n=new Nodo(id);
                    nuevo.Hijo(n);
                    nuevo.Hijo(dim);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",41, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DIM ::= DIM D 
            {
              Nodo RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		dim.Hijo(d);RESULT = dim;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DIM",19, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DIM ::= D 
            {
              Nodo RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		                    
            Nodo d = new Nodo("Dimensiones");
            d.Hijo(dim);
            RESULT = d;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DIM",19, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // D ::= corAbre EXP corCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("D",46, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphikSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraphikSintactico$do_action(
    int                        CUP$GraphikSintactico$act_num,
    java_cup.runtime.lr_parser CUP$GraphikSintactico$parser,
    java.util.Stack            CUP$GraphikSintactico$stack,
    int                        CUP$GraphikSintactico$top)
    throws java.lang.Exception
    {
              return CUP$GraphikSintactico$do_action_part00000000(
                               CUP$GraphikSintactico$act_num,
                               CUP$GraphikSintactico$parser,
                               CUP$GraphikSintactico$stack,
                               CUP$GraphikSintactico$top);
    }
}

}
