
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Graphik;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class GraphikSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public GraphikSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public GraphikSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GraphikSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\107\002\000\002\002" +
    "\006\000\002\007\003\000\002\007\002\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\006\003\000" +
    "\002\006\002\000\002\013\004\000\002\013\003\000\002" +
    "\075\005\000\002\004\004\000\002\004\003\000\002\005" +
    "\011\000\002\017\004\000\002\017\002\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\002\000" +
    "\002\003\004\000\002\003\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\034" +
    "\011\000\002\035\004\000\002\035\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\037\006\000\002\040\006\000\002" +
    "\041\011\000\002\042\007\000\002\043\007\000\002\021" +
    "\010\000\002\021\011\000\002\021\012\000\002\032\004" +
    "\000\002\032\003\000\002\032\002\000\002\022\005\000" +
    "\002\022\003\000\002\062\004\000\002\044\004\000\002" +
    "\044\003\000\002\036\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\045\004\000" +
    "\002\045\002\000\002\010\005\000\002\010\003\000\002" +
    "\023\004\000\002\047\011\000\002\050\013\000\002\105" +
    "\003\000\002\105\002\000\002\051\005\000\002\051\003" +
    "\000\002\072\004\000\002\015\004\000\002\015\003\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\027\007\000\002\066\003\000\002" +
    "\104\007\000\002\103\004\000\002\102\004\000\002\073" +
    "\013\000\002\074\011\000\002\067\014\000\002\070\004" +
    "\000\002\070\004\000\002\071\007\000\002\076\012\000" +
    "\002\077\004\000\002\077\003\000\002\100\006\000\002" +
    "\101\005\000\002\101\002\000\002\064\012\000\002\065" +
    "\006\000\002\065\002\000\002\063\005\000\002\025\007" +
    "\000\002\025\010\000\002\025\011\000\002\046\005\000" +
    "\002\026\005\000\002\026\006\000\002\026\006\000\002" +
    "\030\004\000\002\030\003\000\002\061\007\000\002\061" +
    "\004\000\002\053\007\000\002\053\005\000\002\054\007" +
    "\000\002\055\003\000\002\055\002\000\002\106\005\000" +
    "\002\106\003\000\002\060\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\033\004\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\052\004\000\002\024\004\000\002\024\003" +
    "\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\010\012\000\016\000\026\000\001\002\000" +
    "\010\012\ufffd\016\012\026\ufffd\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\010\012\ufffe\016" +
    "\012\026\ufffe\001\002\000\010\012\ufffb\016\ufffb\026\ufffb" +
    "\001\002\000\006\012\ufff8\026\016\001\002\000\004\060" +
    "\013\001\002\000\004\114\014\001\002\000\010\012\ufffa" +
    "\016\ufffa\026\ufffa\001\002\000\004\012\026\001\002\000" +
    "\004\052\022\001\002\000\006\012\ufff6\026\ufff6\001\002" +
    "\000\006\012\ufff9\026\016\001\002\000\006\012\ufff7\026" +
    "\ufff7\001\002\000\004\114\023\001\002\000\006\012\ufff5" +
    "\026\ufff5\001\002\000\006\002\uffff\012\026\001\002\000" +
    "\006\002\ufff3\012\ufff3\001\002\000\004\052\027\001\002" +
    "\000\010\017\uffec\063\uffec\111\031\001\002\000\006\017" +
    "\036\063\ufff0\001\002\000\010\013\032\014\033\015\034" +
    "\001\002\000\014\017\uffed\063\uffed\110\uffed\113\uffed\114" +
    "\uffed\001\002\000\014\017\uffee\063\uffee\110\uffee\113\uffee" +
    "\114\uffee\001\002\000\014\017\uffef\063\uffef\110\uffef\113" +
    "\uffef\114\uffef\001\002\000\004\063\040\001\002\000\004" +
    "\052\037\001\002\000\004\063\ufff1\001\002\000\022\004" +
    "\045\005\044\006\041\007\057\010\056\011\050\020\055" +
    "\052\042\001\002\000\004\052\uffca\001\002\000\004\052" +
    "\uffc6\001\002\000\004\052\u014b\001\002\000\004\052\uffcb" +
    "\001\002\000\004\052\uffcc\001\002\000\024\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\020\uffe7\052\uffe7" +
    "\064\uffe7\001\002\000\024\004\045\005\044\006\041\007" +
    "\057\010\056\011\050\020\055\052\042\064\u014a\001\002" +
    "\000\010\024\245\050\244\052\uffc7\001\002\000\024\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\020\uffea" +
    "\052\uffea\064\uffea\001\002\000\024\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\020\uffe6\052\uffe6\064\uffe6" +
    "\001\002\000\024\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\020\uffe8\052\uffe8\064\uffe8\001\002\000\024" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\020" +
    "\uffe9\052\uffe9\064\uffe9\001\002\000\020\004\045\005\044" +
    "\006\041\007\057\010\056\011\060\052\042\001\002\000" +
    "\004\052\uffc8\001\002\000\004\052\uffc9\001\002\000\004" +
    "\052\uffc7\001\002\000\004\052\062\001\002\000\014\061" +
    "\065\110\uffec\111\031\113\uffec\114\uffec\001\002\000\010" +
    "\110\224\113\225\114\uffd3\001\002\000\012\061\uffce\110" +
    "\uffce\111\uffce\114\uffce\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\012" +
    "\061\065\110\uffec\111\031\114\uffec\001\002\000\006\110" +
    "\071\114\uffc4\001\002\000\012\061\uffcf\110\uffcf\111\uffcf" +
    "\114\uffcf\001\002\000\034\023\102\025\111\051\101\052" +
    "\074\053\105\054\077\055\113\056\103\057\104\063\112" +
    "\065\107\070\106\077\076\001\002\000\004\114\073\001" +
    "\002\000\024\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\020\uffd7\052\uffd7\064\uffd7\001\002\000\062\061" +
    "\213\062\uff65\064\uff65\066\uff65\067\uff65\070\uff65\071\uff65" +
    "\072\uff65\073\uff65\074\uff65\075\uff65\076\uff65\100\uff65\101" +
    "\uff65\102\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65" +
    "\111\uff65\112\177\113\uff65\114\uff65\001\002\000\056\062" +
    "\uff6c\064\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\074\uff6c\075\uff6c\076\uff6c\100\uff6c\101\uff6c\102" +
    "\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\111\uff6c" +
    "\113\uff6c\114\uff6c\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\056\062" +
    "\uff67\064\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67" +
    "\073\uff67\074\uff67\075\uff67\076\uff67\100\uff67\101\uff67\102" +
    "\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67\111\uff67" +
    "\113\uff67\114\uff67\001\002\000\056\062\uff6e\064\uff6e\066" +
    "\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e" +
    "\075\uff6e\076\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104" +
    "\uff6e\105\uff6e\106\uff6e\107\uff6e\111\uff6e\113\uff6e\114\uff6e" +
    "\001\002\000\056\062\uff68\064\uff68\066\uff68\067\uff68\070" +
    "\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\uff68" +
    "\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106" +
    "\uff68\107\uff68\111\uff68\113\uff68\114\uff68\001\002\000\004" +
    "\052\174\001\002\000\056\062\uff63\064\uff63\066\uff63\067" +
    "\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63" +
    "\076\uff63\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105" +
    "\uff63\106\uff63\107\uff63\111\uff63\113\uff63\114\uff63\001\002" +
    "\000\056\062\uff64\064\uff64\066\uff64\067\uff64\070\uff64\071" +
    "\uff64\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64\100\uff64" +
    "\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107" +
    "\uff64\111\uff64\113\uff64\114\uff64\001\002\000\056\062\uff69" +
    "\064\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073" +
    "\uff69\074\uff69\075\uff69\076\uff69\100\uff69\101\uff69\102\uff69" +
    "\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69\111\uff69\113" +
    "\uff69\114\uff69\001\002\000\034\023\102\025\111\051\101" +
    "\052\074\053\105\054\077\055\113\056\103\057\104\063" +
    "\112\065\107\070\106\077\076\001\002\000\034\023\102" +
    "\025\111\051\101\052\074\053\105\054\077\055\113\056" +
    "\103\057\104\063\112\065\107\070\106\077\076\001\002" +
    "\000\056\062\uff6d\064\uff6d\066\uff6d\067\uff6d\070\uff6d\071" +
    "\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\100\uff6d" +
    "\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d\107" +
    "\uff6d\111\uff6d\113\uff6d\114\uff6d\001\002\000\004\052\160" +
    "\001\002\000\034\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\056\062\uff66\064\uff66\066" +
    "\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66" +
    "\075\uff66\076\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104" +
    "\uff66\105\uff66\106\uff66\107\uff66\111\uff66\113\uff66\114\uff66" +
    "\001\002\000\044\067\133\070\121\071\130\072\116\073" +
    "\115\074\117\075\120\076\124\100\134\101\123\102\132" +
    "\103\131\104\122\105\125\106\126\107\127\114\uffc5\001" +
    "\002\000\034\023\102\025\111\051\101\052\074\053\105" +
    "\054\077\055\113\056\103\057\104\063\112\065\107\070" +
    "\106\077\076\001\002\000\034\023\102\025\111\051\101" +
    "\052\074\053\105\054\077\055\113\056\103\057\104\063" +
    "\112\065\107\070\106\077\076\001\002\000\034\023\102" +
    "\025\111\051\101\052\074\053\105\054\077\055\113\056" +
    "\103\057\104\063\112\065\107\070\106\077\076\001\002" +
    "\000\034\023\102\025\111\051\101\052\074\053\105\054" +
    "\077\055\113\056\103\057\104\063\112\065\107\070\106" +
    "\077\076\001\002\000\034\023\102\025\111\051\101\052" +
    "\074\053\105\054\077\055\113\056\103\057\104\063\112" +
    "\065\107\070\106\077\076\001\002\000\034\023\102\025" +
    "\111\051\101\052\074\053\105\054\077\055\113\056\103" +
    "\057\104\063\112\065\107\070\106\077\076\001\002\000" +
    "\034\023\102\025\111\051\101\052\074\053\105\054\077" +
    "\055\113\056\103\057\104\063\112\065\107\070\106\077" +
    "\076\001\002\000\034\023\102\025\111\051\101\052\074" +
    "\053\105\054\077\055\113\056\103\057\104\063\112\065" +
    "\107\070\106\077\076\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\056" +
    "\062\uff72\064\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072" +
    "\uff72\073\uff72\074\uff72\075\uff72\076\uff72\100\uff72\101\uff72" +
    "\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72\111" +
    "\uff72\113\uff72\114\uff72\001\002\000\056\062\uff71\064\uff71" +
    "\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074" +
    "\uff71\075\uff71\076\uff71\100\uff71\101\uff71\102\uff71\103\uff71" +
    "\104\uff71\105\uff71\106\uff71\107\uff71\111\uff71\113\uff71\114" +
    "\uff71\001\002\000\034\023\102\025\111\051\101\052\074" +
    "\053\105\054\077\055\113\056\103\057\104\063\112\065" +
    "\107\070\106\077\076\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\034" +
    "\023\102\025\111\051\101\052\074\053\105\054\077\055" +
    "\113\056\103\057\104\063\112\065\107\070\106\077\076" +
    "\001\002\000\034\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\056\062" +
    "\uff77\064\uff77\066\uff77\067\133\070\121\071\130\072\116" +
    "\073\115\074\uff77\075\uff77\076\uff77\100\uff77\101\uff77\102" +
    "\uff77\103\uff77\104\uff77\105\uff77\106\126\107\127\111\uff77" +
    "\113\uff77\114\uff77\001\002\000\056\062\uff81\064\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\130\072\116\073\115\074\uff81" +
    "\075\uff81\076\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\106\126\107\127\111\uff81\113\uff81\114\uff81" +
    "\001\002\000\056\062\uff75\064\uff75\066\uff75\067\133\070" +
    "\121\071\130\072\116\073\115\074\uff75\075\uff75\076\uff75" +
    "\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106" +
    "\126\107\127\111\uff75\113\uff75\114\uff75\001\002\000\056" +
    "\062\uff76\064\uff76\066\uff76\067\133\070\121\071\130\072" +
    "\116\073\115\074\uff76\075\uff76\076\uff76\100\uff76\101\uff76" +
    "\102\uff76\103\uff76\104\uff76\105\uff76\106\126\107\127\111" +
    "\uff76\113\uff76\114\uff76\001\002\000\056\062\uff7f\064\uff7f" +
    "\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\115\074" +
    "\uff7f\075\uff7f\076\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\104\uff7f\105\uff7f\106\126\107\127\111\uff7f\113\uff7f\114" +
    "\uff7f\001\002\000\056\062\uff73\064\uff73\066\uff73\067\133" +
    "\070\121\071\130\072\116\073\115\074\uff73\075\uff73\076" +
    "\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73\105\uff73" +
    "\106\126\107\127\111\uff73\113\uff73\114\uff73\001\002\000" +
    "\056\062\uff7b\064\uff7b\066\uff7b\067\133\070\121\071\130" +
    "\072\116\073\115\074\uff7b\075\120\076\uff7b\100\134\101" +
    "\123\102\132\103\131\104\122\105\125\106\126\107\127" +
    "\111\uff7b\113\uff7b\114\uff7b\001\002\000\056\062\uff78\064" +
    "\uff78\066\uff78\067\133\070\121\071\130\072\116\073\115" +
    "\074\uff78\075\uff78\076\uff78\100\uff78\101\uff78\102\uff78\103" +
    "\uff78\104\uff78\105\uff78\106\126\107\127\111\uff78\113\uff78" +
    "\114\uff78\001\002\000\056\062\uff74\064\uff74\066\uff74\067" +
    "\133\070\121\071\130\072\116\073\115\074\uff74\075\uff74" +
    "\076\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105" +
    "\uff74\106\126\107\127\111\uff74\113\uff74\114\uff74\001\002" +
    "\000\056\062\uff80\064\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\130\072\116\073\115\074\uff80\075\uff80\076\uff80\100\uff80" +
    "\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\126\107" +
    "\127\111\uff80\113\uff80\114\uff80\001\002\000\056\062\uff7a" +
    "\064\uff7a\066\uff7a\067\133\070\121\071\130\072\116\073" +
    "\115\074\uff7a\075\uff7a\076\uff7a\100\134\101\123\102\132" +
    "\103\131\104\122\105\125\106\126\107\127\111\uff7a\113" +
    "\uff7a\114\uff7a\001\002\000\056\062\uff7c\064\uff7c\066\uff7c" +
    "\067\133\070\121\071\130\072\116\073\115\074\uff7c\075" +
    "\120\076\124\100\134\101\123\102\132\103\131\104\122" +
    "\105\125\106\126\107\127\111\uff7c\113\uff7c\114\uff7c\001" +
    "\002\000\056\062\uff7e\064\uff7e\066\uff7e\067\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\073\115\074\uff7e\075\uff7e\076\uff7e\100" +
    "\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\126" +
    "\107\127\111\uff7e\113\uff7e\114\uff7e\001\002\000\056\062" +
    "\uff7d\064\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\073\115\074\uff7d\075\uff7d\076\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\103\uff7d\104\uff7d\105\uff7d\106\126\107\127\111\uff7d" +
    "\113\uff7d\114\uff7d\001\002\000\046\064\uffc2\067\133\070" +
    "\121\071\130\072\116\073\115\074\117\075\120\076\124" +
    "\100\134\101\123\102\132\103\131\104\122\105\125\106" +
    "\126\107\127\113\uffc2\001\002\000\006\064\156\113\155" +
    "\001\002\000\034\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\056\062\uff6b\064\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\107\uff6b\111\uff6b\113\uff6b\114\uff6b" +
    "\001\002\000\046\064\uffc3\067\133\070\121\071\130\072" +
    "\116\073\115\074\117\075\120\076\124\100\134\101\123" +
    "\102\132\103\131\104\122\105\125\106\126\107\127\113" +
    "\uffc3\001\002\000\004\065\161\001\002\000\036\023\102" +
    "\025\111\051\101\052\074\053\105\054\077\055\113\056" +
    "\103\057\104\063\112\065\107\066\uff85\070\106\077\076" +
    "\001\002\000\004\066\170\001\002\000\006\066\uff83\113" +
    "\uff83\001\002\000\046\066\uff82\067\133\070\121\071\130" +
    "\072\116\073\115\074\117\075\120\076\124\100\134\101" +
    "\123\102\132\103\131\104\122\105\125\106\126\107\127" +
    "\113\uff82\001\002\000\006\066\uff86\113\166\001\002\000" +
    "\034\023\102\025\111\051\101\052\074\053\105\054\077" +
    "\055\113\056\103\057\104\063\112\065\107\070\106\077" +
    "\076\001\002\000\006\066\uff84\113\uff84\001\002\000\056" +
    "\062\uff87\064\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\073\uff87\074\uff87\075\uff87\076\uff87\100\uff87\101\uff87" +
    "\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\111" +
    "\uff87\113\uff87\114\uff87\001\002\000\044\066\172\067\133" +
    "\070\121\071\130\072\116\073\115\074\117\075\120\076" +
    "\124\100\134\101\123\102\132\103\131\104\122\105\125" +
    "\106\126\107\127\001\002\000\056\062\uff6f\064\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104" +
    "\uff6f\105\uff6f\106\uff6f\107\uff6f\111\uff6f\113\uff6f\114\uff6f" +
    "\001\002\000\056\062\uff70\064\uff70\066\uff70\067\uff70\070" +
    "\uff70\071\130\072\116\073\115\074\uff70\075\uff70\076\uff70" +
    "\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106" +
    "\126\107\127\111\uff70\113\uff70\114\uff70\001\002\000\006" +
    "\065\176\112\177\001\002\000\062\062\uff8c\064\uff8c\066" +
    "\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c" +
    "\075\uff8c\076\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104" +
    "\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\112\uff8c" +
    "\113\uff8c\114\uff8c\001\002\000\036\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\066\uff85\070\106\077\076\001\002\000" +
    "\004\052\202\001\002\000\060\062\uff88\064\uff88\066\uff88" +
    "\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075" +
    "\uff88\076\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88" +
    "\105\uff88\106\uff88\107\uff88\111\uff88\112\177\113\uff88\114" +
    "\uff88\001\002\000\062\062\uff8d\064\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d" +
    "\106\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114" +
    "\uff8d\001\002\000\064\062\uff8a\064\uff8a\065\203\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a" +
    "\105\uff8a\106\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a\113" +
    "\uff8a\114\uff8a\001\002\000\036\023\102\025\111\051\101" +
    "\052\074\053\105\054\077\055\113\056\103\057\104\063" +
    "\112\065\107\066\uff85\070\106\077\076\001\002\000\004" +
    "\066\205\001\002\000\062\062\uff8b\064\uff8b\066\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b" +
    "\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105" +
    "\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b" +
    "\114\uff8b\001\002\000\004\066\207\001\002\000\056\062" +
    "\uff89\064\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\074\uff89\075\uff89\076\uff89\100\uff89\101\uff89\102" +
    "\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\111\uff89" +
    "\113\uff89\114\uff89\001\002\000\056\062\uff79\064\uff79\066" +
    "\uff79\067\133\070\121\071\130\072\116\073\115\074\uff79" +
    "\075\uff79\076\uff79\100\134\101\123\102\132\103\131\104" +
    "\122\105\125\106\126\107\127\111\uff79\113\uff79\114\uff79" +
    "\001\002\000\060\061\213\062\uff62\064\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62" +
    "\076\uff62\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105" +
    "\uff62\106\uff62\107\uff62\111\uff62\113\uff62\114\uff62\001\002" +
    "\000\060\061\uff60\062\uff60\064\uff60\066\uff60\067\uff60\070" +
    "\uff60\071\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60" +
    "\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106" +
    "\uff60\107\uff60\111\uff60\113\uff60\114\uff60\001\002\000\034" +
    "\023\102\025\111\051\101\052\074\053\105\054\077\055" +
    "\113\056\103\057\104\063\112\065\107\070\106\077\076" +
    "\001\002\000\060\062\uff6a\064\uff6a\066\uff6a\067\uff6a\070" +
    "\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106" +
    "\uff6a\107\uff6a\111\uff6a\112\177\113\uff6a\114\uff6a\001\002" +
    "\000\044\062\216\067\133\070\121\071\130\072\116\073" +
    "\115\074\117\075\120\076\124\100\134\101\123\102\132" +
    "\103\131\104\122\105\125\106\126\107\127\001\002\000" +
    "\060\061\uff5f\062\uff5f\064\uff5f\066\uff5f\067\uff5f\070\uff5f" +
    "\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\100" +
    "\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f" +
    "\107\uff5f\111\uff5f\113\uff5f\114\uff5f\001\002\000\060\061" +
    "\uff61\062\uff61\064\uff61\066\uff61\067\uff61\070\uff61\071\uff61" +
    "\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\100\uff61\101" +
    "\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61" +
    "\111\uff61\113\uff61\114\uff61\001\002\000\044\062\221\067" +
    "\133\070\121\071\130\072\116\073\115\074\117\075\120" +
    "\076\124\100\134\101\123\102\132\103\131\104\122\105" +
    "\125\106\126\107\127\001\002\000\012\061\uffcd\110\uffcd" +
    "\111\uffcd\114\uffcd\001\002\000\004\114\243\001\002\000" +
    "\004\114\uffd4\001\002\000\036\021\235\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\004" +
    "\052\230\001\002\000\006\113\uffd1\114\uffd1\001\002\000" +
    "\006\113\232\114\uffd5\001\002\000\010\111\031\113\uffec" +
    "\114\uffec\001\002\000\006\113\uffd0\114\uffd0\001\002\000" +
    "\004\052\230\001\002\000\006\113\uffd2\114\uffd2\001\002" +
    "\000\044\067\133\070\121\071\130\072\116\073\115\074" +
    "\117\075\120\076\124\100\134\101\123\102\132\103\131" +
    "\104\122\105\125\106\126\107\127\114\uffc1\001\002\000" +
    "\004\052\237\001\002\000\004\114\242\001\002\000\004" +
    "\065\240\001\002\000\004\066\241\001\002\000\006\111" +
    "\uff91\114\uff91\001\002\000\024\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\020\uffd6\052\uffd6\064\uffd6\001" +
    "\002\000\024\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\020\uffd8\052\uffd8\064\uffd8\001\002\000\004\065" +
    "\u0124\001\002\000\004\065\246\001\002\000\004\066\247" +
    "\001\002\000\004\063\250\001\002\000\036\020\302\022" +
    "\267\023\102\025\111\027\251\030\304\031\264\035\253" +
    "\036\255\037\262\040\274\041\276\047\254\052\270\001" +
    "\002\000\004\065\u011f\001\002\000\044\020\uffb8\022\uffb8" +
    "\023\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\047\uffb8" +
    "\052\uffb8\064\uffb8\001\002\000\004\065\u010d\001\002\000" +
    "\004\065\u0109\001\002\000\004\065\u0103\001\002\000\040" +
    "\020\302\022\267\023\102\025\111\027\251\030\304\031" +
    "\264\035\253\036\255\037\262\040\274\041\276\047\254" +
    "\052\270\064\u0102\001\002\000\004\114\u0101\001\002\000" +
    "\044\020\uffaf\022\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\047\uffaf\052\uffaf\064\uffaf\001\002\000\044" +
    "\020\uffab\022\uffab\023\uffab\025\uffab\027\uffab\030\uffab\031" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\047\uffab\052\uffab\064\uffab\001\002\000\004\063" +
    "\371\001\002\000\044\020\uffac\022\uffac\023\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\047\uffac\052\uffac\064\uffac" +
    "\001\002\000\004\065\351\001\002\000\044\020\uffae\022" +
    "\uffae\023\uffae\025\uffae\027\uffae\030\uffae\031\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\047" +
    "\uffae\052\uffae\064\uffae\001\002\000\044\020\uffb0\022\uffb0" +
    "\023\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\047\uffb0" +
    "\052\uffb0\064\uffb0\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\006\110" +
    "\340\112\177\001\002\000\044\020\uffb3\022\uffb3\023\uffb3" +
    "\025\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\047\uffb3\052\uffb3" +
    "\064\uffb3\001\002\000\044\020\uffb1\022\uffb1\023\uffb1\025" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\047\uffb1\052\uffb1\064" +
    "\uffb1\001\002\000\004\114\337\001\002\000\004\114\336" +
    "\001\002\000\044\020\uffb2\022\uffb2\023\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\047\uffb2\052\uffb2\064\uffb2\001" +
    "\002\000\004\114\335\001\002\000\044\020\uffaa\022\uffaa" +
    "\023\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\047\uffaa" +
    "\052\uffaa\064\uffaa\001\002\000\004\114\334\001\002\000" +
    "\044\020\uffad\022\uffad\023\uffad\025\uffad\027\uffad\030\uffad" +
    "\031\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\041\uffad\047\uffad\052\uffad\064\uffad\001\002\000\020" +
    "\004\045\005\044\006\041\007\057\010\056\011\060\052" +
    "\042\001\002\000\004\114\321\001\002\000\004\065\305" +
    "\001\002\000\034\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\044\066\307\067\133\070" +
    "\121\071\130\072\116\073\115\074\117\075\120\076\124" +
    "\100\134\101\123\102\132\103\131\104\122\105\125\106" +
    "\126\107\127\001\002\000\004\063\310\001\002\000\036" +
    "\020\302\022\267\023\102\025\111\027\251\030\304\031" +
    "\264\035\253\036\255\037\262\040\274\041\276\047\254" +
    "\052\270\001\002\000\040\020\302\022\267\023\102\025" +
    "\111\027\251\030\304\031\264\035\253\036\255\037\262" +
    "\040\274\041\276\047\254\052\270\064\313\001\002\000" +
    "\044\020\uffb9\022\uffb9\023\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\047\uffb9\052\uffb9\064\uffb9\001\002\000\046" +
    "\020\uff96\022\uff96\023\uff96\025\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\314\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\047\uff96\052\uff96\064\uff96\001\002\000" +
    "\004\063\316\001\002\000\044\020\uff98\022\uff98\023\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\047\uff98\052\uff98" +
    "\064\uff98\001\002\000\036\020\302\022\267\023\102\025" +
    "\111\027\251\030\304\031\264\035\253\036\255\037\262" +
    "\040\274\041\276\047\254\052\270\001\002\000\040\020" +
    "\302\022\267\023\102\025\111\027\251\030\304\031\264" +
    "\035\253\036\255\037\262\040\274\041\276\047\254\052" +
    "\270\064\320\001\002\000\044\020\uff97\022\uff97\023\uff97" +
    "\025\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\047\uff97\052\uff97" +
    "\064\uff97\001\002\000\044\020\uffb7\022\uffb7\023\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\047\uffb7\052\uffb7\064" +
    "\uffb7\001\002\000\004\052\323\001\002\000\014\061\065" +
    "\110\uffec\111\031\113\uffec\114\uffec\001\002\000\010\110" +
    "\331\113\225\114\uffd3\001\002\000\012\061\065\110\uffec" +
    "\111\031\114\uffec\001\002\000\006\110\071\114\uffc4\001" +
    "\002\000\004\114\uff93\001\002\000\004\114\uff94\001\002" +
    "\000\036\021\332\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\004\052\237\001\002\000" +
    "\004\114\uff92\001\002\000\044\020\uffb4\022\uffb4\023\uffb4" +
    "\025\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\047\uffb4\052\uffb4" +
    "\064\uffb4\001\002\000\044\020\uffa5\022\uffa5\023\uffa5\025" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\047\uffa5\052\uffa5\064" +
    "\uffa5\001\002\000\044\020\uffa6\022\uffa6\023\uffa6\025\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\047\uffa6\052\uffa6\064\uffa6" +
    "\001\002\000\044\020\uffb6\022\uffb6\023\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\047\uffb6\052\uffb6\064\uffb6\001" +
    "\002\000\036\021\345\023\102\025\111\051\101\052\074" +
    "\053\105\054\077\055\113\056\103\057\104\063\112\065" +
    "\107\070\106\077\076\001\002\000\006\110\342\112\177" +
    "\001\002\000\034\023\102\025\111\051\101\052\074\053" +
    "\105\054\077\055\113\056\103\057\104\063\112\065\107" +
    "\070\106\077\076\001\002\000\046\067\133\070\121\071" +
    "\130\072\116\073\115\074\117\075\120\076\124\100\134" +
    "\101\123\102\132\103\131\104\122\105\125\106\126\107" +
    "\127\111\uff8e\114\uff8e\001\002\000\046\067\133\070\121" +
    "\071\130\072\116\073\115\074\117\075\120\076\124\100" +
    "\134\101\123\102\132\103\131\104\122\105\125\106\126" +
    "\107\127\111\uff90\114\uff90\001\002\000\004\052\237\001" +
    "\002\000\006\111\uff8f\114\uff8f\001\002\000\044\067\133" +
    "\070\121\071\130\072\116\073\115\074\117\075\120\076" +
    "\124\100\134\101\123\102\132\103\131\104\122\105\125" +
    "\106\126\107\127\114\350\001\002\000\044\020\uff95\022" +
    "\uff95\023\uff95\025\uff95\027\uff95\030\uff95\031\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\047" +
    "\uff95\052\uff95\064\uff95\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\044" +
    "\066\353\067\133\070\121\071\130\072\116\073\115\074" +
    "\117\075\120\076\124\100\134\101\123\102\132\103\131" +
    "\104\122\105\125\106\126\107\127\001\002\000\004\063" +
    "\354\001\002\000\004\033\357\001\002\000\010\033\uff9c" +
    "\034\uff9c\064\uff9c\001\002\000\010\033\357\034\365\064" +
    "\uff99\001\002\000\034\023\102\025\111\051\101\052\074" +
    "\053\105\054\077\055\113\056\103\057\104\063\112\065" +
    "\107\070\106\077\076\001\002\000\044\067\133\070\121" +
    "\071\130\072\116\073\115\074\117\075\120\076\124\100" +
    "\134\101\123\102\132\103\131\104\122\105\125\106\126" +
    "\107\127\111\361\001\002\000\036\020\302\022\267\023" +
    "\102\025\111\027\251\030\304\031\264\035\253\036\255" +
    "\037\262\040\274\041\276\047\254\052\270\001\002\000" +
    "\044\020\302\022\267\023\102\025\111\027\251\030\304" +
    "\031\264\033\uff9b\034\uff9b\035\253\036\255\037\262\040" +
    "\274\041\276\047\254\052\270\064\uff9b\001\002\000\010" +
    "\033\uff9d\034\uff9d\064\uff9d\001\002\000\004\064\370\001" +
    "\002\000\004\111\366\001\002\000\036\020\302\022\267" +
    "\023\102\025\111\027\251\030\304\031\264\035\253\036" +
    "\255\037\262\040\274\041\276\047\254\052\270\001\002" +
    "\000\040\020\302\022\267\023\102\025\111\027\251\030" +
    "\304\031\264\035\253\036\255\037\262\040\274\041\276" +
    "\047\254\052\270\064\uff9a\001\002\000\044\020\uff9e\022" +
    "\uff9e\023\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\047" +
    "\uff9e\052\uff9e\064\uff9e\001\002\000\036\020\302\022\267" +
    "\023\102\025\111\027\251\030\304\031\264\035\253\036" +
    "\255\037\262\040\274\041\276\047\254\052\270\001\002" +
    "\000\040\020\302\022\267\023\102\025\111\027\251\030" +
    "\304\031\264\035\253\036\255\037\262\040\274\041\276" +
    "\047\254\052\270\064\373\001\002\000\004\036\374\001" +
    "\002\000\004\065\375\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\044" +
    "\066\377\067\133\070\121\071\130\072\116\073\115\074" +
    "\117\075\120\076\124\100\134\101\123\102\132\103\131" +
    "\104\122\105\125\106\126\107\127\001\002\000\004\114" +
    "\u0100\001\002\000\044\020\uffa4\022\uffa4\023\uffa4\025\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\047\uffa4\052\uffa4\064\uffa4" +
    "\001\002\000\044\020\uffb5\022\uffb5\023\uffb5\025\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\047\uffb5\052\uffb5\064\uffb5\001" +
    "\002\000\024\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\020\uffc0\052\uffc0\064\uffc0\001\002\000\034\023" +
    "\102\025\111\051\101\052\074\053\105\054\077\055\113" +
    "\056\103\057\104\063\112\065\107\070\106\077\076\001" +
    "\002\000\044\066\u0105\067\133\070\121\071\130\072\116" +
    "\073\115\074\117\075\120\076\124\100\134\101\123\102" +
    "\132\103\131\104\122\105\125\106\126\107\127\001\002" +
    "\000\004\063\u0106\001\002\000\036\020\302\022\267\023" +
    "\102\025\111\027\251\030\304\031\264\035\253\036\255" +
    "\037\262\040\274\041\276\047\254\052\270\001\002\000" +
    "\040\020\302\022\267\023\102\025\111\027\251\030\304" +
    "\031\264\035\253\036\255\037\262\040\274\041\276\047" +
    "\254\052\270\064\u0108\001\002\000\044\020\uffa3\022\uffa3" +
    "\023\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\047\uffa3" +
    "\052\uffa3\064\uffa3\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\044\066" +
    "\u010b\067\133\070\121\071\130\072\116\073\115\074\117" +
    "\075\120\076\124\100\134\101\123\102\132\103\131\104" +
    "\122\105\125\106\126\107\127\001\002\000\004\114\u010c" +
    "\001\002\000\044\020\uffa7\022\uffa7\023\uffa7\025\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\047\uffa7\052\uffa7\064\uffa7\001" +
    "\002\000\006\020\u010e\052\270\001\002\000\020\004\045" +
    "\005\044\006\041\007\057\010\056\011\060\052\042\001" +
    "\002\000\034\023\102\025\111\051\101\052\074\053\105" +
    "\054\077\055\113\056\103\057\104\063\112\065\107\070" +
    "\106\077\076\001\002\000\004\111\u0113\001\002\000\004" +
    "\111\u0112\001\002\000\034\023\uffa1\025\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\063\uffa1" +
    "\065\uffa1\070\uffa1\077\uffa1\001\002\000\034\023\uffa0\025" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\063\uffa0\065\uffa0\070\uffa0\077\uffa0\001\002\000" +
    "\044\067\133\070\121\071\130\072\116\073\115\074\117" +
    "\075\120\076\124\100\134\101\123\102\132\103\131\104" +
    "\122\105\125\106\126\107\127\111\u0115\001\002\000\034" +
    "\023\102\025\111\051\101\052\074\053\105\054\077\055" +
    "\113\056\103\057\104\063\112\065\107\070\106\077\076" +
    "\001\002\000\044\066\u0117\067\133\070\121\071\130\072" +
    "\116\073\115\074\117\075\120\076\124\100\134\101\123" +
    "\102\132\103\131\104\122\105\125\106\126\107\127\001" +
    "\002\000\004\063\u0118\001\002\000\036\020\302\022\267" +
    "\023\102\025\111\027\251\030\304\031\264\035\253\036" +
    "\255\037\262\040\274\041\276\047\254\052\270\001\002" +
    "\000\040\020\302\022\267\023\102\025\111\027\251\030" +
    "\304\031\264\035\253\036\255\037\262\040\274\041\276" +
    "\047\254\052\270\064\u011a\001\002\000\044\020\uffa2\022" +
    "\uffa2\023\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\047" +
    "\uffa2\052\uffa2\064\uffa2\001\002\000\004\052\u011c\001\002" +
    "\000\004\110\u011d\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\044\067" +
    "\133\070\121\071\130\072\116\073\115\074\117\075\120" +
    "\076\124\100\134\101\123\102\132\103\131\104\122\105" +
    "\125\106\126\107\127\111\uff9f\001\002\000\034\023\102" +
    "\025\111\051\101\052\074\053\105\054\077\055\113\056" +
    "\103\057\104\063\112\065\107\070\106\077\076\001\002" +
    "\000\004\066\u0122\001\002\000\044\066\uffa8\067\133\070" +
    "\121\071\130\072\116\073\115\074\117\075\120\076\124" +
    "\100\134\101\123\102\132\103\131\104\122\105\125\106" +
    "\126\107\127\001\002\000\004\114\u0123\001\002\000\044" +
    "\020\uffa9\022\uffa9\023\uffa9\025\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\047\uffa9\052\uffa9\064\uffa9\001\002\000\004\066" +
    "\u0125\001\002\000\004\063\u0126\001\002\000\014\042\u012a" +
    "\043\u012b\044\u0127\045\u0129\046\u0128\001\002\000\004\065" +
    "\u0143\001\002\000\004\065\u013f\001\002\000\004\065\u013b" +
    "\001\002\000\004\065\u0138\001\002\000\004\110\u0135\001" +
    "\002\000\016\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\064\uffe1\001\002\000\016\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\064\uffe2\001\002\000\016\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\064\uffe3\001\002\000\016\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\064\uffde\001\002" +
    "\000\016\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\064" +
    "\uffdf\001\002\000\016\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\064\uffe0\001\002\000\016\042\u012a\043\u012b\044" +
    "\u0127\045\u0129\046\u0128\064\u0133\001\002\000\024\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\020\uffe5\052" +
    "\uffe5\064\uffe5\001\002\000\016\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\064\uffe4\001\002\000\034\023\102\025" +
    "\111\051\101\052\074\053\105\054\077\055\113\056\103" +
    "\057\104\063\112\065\107\070\106\077\076\001\002\000" +
    "\044\067\133\070\121\071\130\072\116\073\115\074\117" +
    "\075\120\076\124\100\134\101\123\102\132\103\131\104" +
    "\122\105\125\106\126\107\127\114\u0137\001\002\000\016" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\064\uffdc\001" +
    "\002\000\034\023\102\025\111\051\101\052\074\053\105" +
    "\054\077\055\113\056\103\057\104\063\112\065\107\070" +
    "\106\077\076\001\002\000\044\066\u013a\067\133\070\121" +
    "\071\130\072\116\073\115\074\117\075\120\076\124\100" +
    "\134\101\123\102\132\103\131\104\122\105\125\106\126" +
    "\107\127\001\002\000\016\042\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\064\uffdd\001\002\000\034\023\102\025\111" +
    "\051\101\052\074\053\105\054\077\055\113\056\103\057" +
    "\104\063\112\065\107\070\106\077\076\001\002\000\044" +
    "\066\u013d\067\133\070\121\071\130\072\116\073\115\074" +
    "\117\075\120\076\124\100\134\101\123\102\132\103\131" +
    "\104\122\105\125\106\126\107\127\001\002\000\004\114" +
    "\u013e\001\002\000\016\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\064\uffda\001\002\000\034\023\102\025\111\051" +
    "\101\052\074\053\105\054\077\055\113\056\103\057\104" +
    "\063\112\065\107\070\106\077\076\001\002\000\044\066" +
    "\u0141\067\133\070\121\071\130\072\116\073\115\074\117" +
    "\075\120\076\124\100\134\101\123\102\132\103\131\104" +
    "\122\105\125\106\126\107\127\001\002\000\004\114\u0142" +
    "\001\002\000\016\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\064\uffd9\001\002\000\034\023\102\025\111\051\101" +
    "\052\074\053\105\054\077\055\113\056\103\057\104\063" +
    "\112\065\107\070\106\077\076\001\002\000\044\066\u0145" +
    "\067\133\070\121\071\130\072\116\073\115\074\117\075" +
    "\120\076\124\100\134\101\123\102\132\103\131\104\122" +
    "\105\125\106\126\107\127\001\002\000\004\110\u0146\001" +
    "\002\000\034\023\102\025\111\051\101\052\074\053\105" +
    "\054\077\055\113\056\103\057\104\063\112\065\107\070" +
    "\106\077\076\001\002\000\044\067\133\070\121\071\130" +
    "\072\116\073\115\074\117\075\120\076\124\100\134\101" +
    "\123\102\132\103\131\104\122\105\125\106\126\107\127" +
    "\114\u0148\001\002\000\016\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\064\uffdb\001\002\000\024\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\020\uffeb\052\uffeb\064" +
    "\uffeb\001\002\000\006\002\ufff2\012\ufff2\001\002\000\004" +
    "\065\u014c\001\002\000\022\004\045\005\044\006\041\007" +
    "\057\010\056\011\060\052\042\066\uffbd\001\002\000\004" +
    "\052\u0158\001\002\000\004\066\u0153\001\002\000\006\066" +
    "\uffbb\113\uffbb\001\002\000\006\066\uffbe\113\u0151\001\002" +
    "\000\020\004\045\005\044\006\041\007\057\010\056\011" +
    "\060\052\042\001\002\000\006\066\uffbc\113\uffbc\001\002" +
    "\000\006\063\uffec\111\031\001\002\000\004\063\u0155\001" +
    "\002\000\036\020\302\022\267\023\102\025\111\027\251" +
    "\030\304\031\264\035\253\036\255\037\262\040\274\041" +
    "\276\047\254\052\270\001\002\000\040\020\302\022\267" +
    "\023\102\025\111\027\251\030\304\031\264\035\253\036" +
    "\255\037\262\040\274\041\276\047\254\052\270\064\u0157" +
    "\001\002\000\024\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\020\uffbf\052\uffbf\064\uffbf\001\002\000\006" +
    "\066\uffba\113\uffba\001\002\000\006\002\ufff4\012\ufff4\001" +
    "\002\000\010\012\ufffc\016\ufffc\026\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0158\000\006\002\004\107\003\001\001\000\010\007" +
    "\010\011\006\012\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0159\001\001\000\002\001\001\000" +
    "\010\006\014\013\017\075\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\023\005" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0158\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\027\001\001\000\004\017" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\046\021\053\031\042" +
    "\034\045\047\052\050\051\056\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\053\031" +
    "\042\034\045\047\052\050\051\056\u0148\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\062\036\063\044\065\001\001\000\006" +
    "\023\222\032\221\001\001\000\002\001\001\000\012\033" +
    "\217\052\107\053\077\054\074\001\001\000\006\014\066" +
    "\036\067\001\001\000\004\045\071\001\001\000\002\001" +
    "\001\000\012\033\113\052\107\053\077\054\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\210\030" +
    "\213\057\211\061\174\001\001\000\002\001\001\000\012" +
    "\033\207\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\172\052\107\053\077\054\074\001\001\000\012" +
    "\033\170\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\153\033\152\052\107" +
    "\053\077\054\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\151\052\107\053\077\054\074\001\001" +
    "\000\012\033\150\052\107\053\077\054\074\001\001\000" +
    "\012\033\147\052\107\053\077\054\074\001\001\000\012" +
    "\033\146\052\107\053\077\054\074\001\001\000\012\033" +
    "\145\052\107\053\077\054\074\001\001\000\012\033\144" +
    "\052\107\053\077\054\074\001\001\000\012\033\143\052" +
    "\107\053\077\054\074\001\001\000\012\033\142\052\107" +
    "\053\077\054\074\001\001\000\012\033\141\052\107\053" +
    "\077\054\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\033\140\052\107\053\077\054\074\001\001\000" +
    "\012\033\137\052\107\053\077\054\074\001\001\000\012" +
    "\033\136\052\107\053\077\054\074\001\001\000\012\033" +
    "\135\052\107\053\077\054\074\001\001\000\012\033\134" +
    "\052\107\053\077\054\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\156\052\107" +
    "\053\077\054\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\033\163\052\107\053\077" +
    "\054\074\055\161\060\162\106\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\033\163\052\107\053\077\054\074\060\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\177\061" +
    "\174\001\001\000\002\001\001\000\020\033\163\052\107" +
    "\053\077\054\074\055\205\060\162\106\164\001\001\000" +
    "\002\001\001\000\004\061\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\033\163\052\107\053\077\054" +
    "\074\055\203\060\162\106\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\216\001\001\000\002\001\001" +
    "\000\012\033\214\052\107\053\077\054\074\001\001\000" +
    "\004\061\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\233\052\107" +
    "\053\077\054\074\001\001\000\006\022\226\062\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\230" +
    "\001\001\000\002\001\001\000\004\062\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\015\255\016\251\025\302\026\277\027\276" +
    "\053\272\054\256\063\270\064\274\067\265\073\264\074" +
    "\257\076\271\102\262\103\300\104\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\016\311\025\302\026\277" +
    "\027\276\053\272\054\256\063\270\064\274\067\265\073" +
    "\264\074\257\076\271\102\262\103\300\104\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\346\052\107\053" +
    "\077\054\074\001\001\000\006\030\340\061\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\305\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\015\310\016\251\025\302" +
    "\026\277\027\276\053\272\054\256\063\270\064\274\067" +
    "\265\073\264\074\257\076\271\102\262\103\300\104\260" +
    "\001\001\000\040\016\311\025\302\026\277\027\276\053" +
    "\272\054\256\063\270\064\274\067\265\073\264\074\257" +
    "\076\271\102\262\103\300\104\260\001\001\000\002\001" +
    "\001\000\004\065\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\015\316\016\251\025\302\026\277\027" +
    "\276\053\272\054\256\063\270\064\274\067\265\073\264" +
    "\074\257\076\271\102\262\103\300\104\260\001\001\000" +
    "\040\016\311\025\302\026\277\027\276\053\272\054\256" +
    "\063\270\064\274\067\265\073\264\074\257\076\271\102" +
    "\262\103\300\104\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\323\036\063\044" +
    "\324\001\001\000\006\023\222\032\327\001\001\000\006" +
    "\014\325\036\067\001\001\000\004\045\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\233\052\107" +
    "\053\077\054\074\001\001\000\004\046\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\343\052\107\053" +
    "\077\054\074\001\001\000\004\061\200\001\001\000\012" +
    "\033\342\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\351\052\107\053\077\054\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\077\355\100\354\001\001\000" +
    "\002\001\001\000\006\100\362\101\363\001\001\000\012" +
    "\033\357\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\042\015\361\016\251\025\302\026\277\027\276" +
    "\053\272\054\256\063\270\064\274\067\265\073\264\074" +
    "\257\076\271\102\262\103\300\104\260\001\001\000\040" +
    "\016\311\025\302\026\277\027\276\053\272\054\256\063" +
    "\270\064\274\067\265\073\264\074\257\076\271\102\262" +
    "\103\300\104\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\015\366\016\251\025\302" +
    "\026\277\027\276\053\272\054\256\063\270\064\274\067" +
    "\265\073\264\074\257\076\271\102\262\103\300\104\260" +
    "\001\001\000\040\016\311\025\302\026\277\027\276\053" +
    "\272\054\256\063\270\064\274\067\265\073\264\074\257" +
    "\076\271\102\262\103\300\104\260\001\001\000\002\001" +
    "\001\000\042\015\371\016\251\025\302\026\277\027\276" +
    "\053\272\054\256\063\270\064\274\067\265\073\264\074" +
    "\257\076\271\102\262\103\300\104\260\001\001\000\040" +
    "\016\311\025\302\026\277\027\276\053\272\054\256\063" +
    "\270\064\274\067\265\073\264\074\257\076\271\102\262" +
    "\103\300\104\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\375\052\107\053\077\054\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\u0103\052\107" +
    "\053\077\054\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\015\u0106\016\251\025\302\026\277\027\276" +
    "\053\272\054\256\063\270\064\274\067\265\073\264\074" +
    "\257\076\271\102\262\103\300\104\260\001\001\000\040" +
    "\016\311\025\302\026\277\027\276\053\272\054\256\063" +
    "\270\064\274\067\265\073\264\074\257\076\271\102\262" +
    "\103\300\104\260\001\001\000\002\001\001\000\012\033" +
    "\u0109\052\107\053\077\054\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\u010f\070" +
    "\u010e\071\u0110\001\001\000\004\031\u011a\001\001\000\012" +
    "\033\u0113\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\u0115\052\107\053\077\054" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\015\u0118\016\251\025\302\026\277\027\276\053\272\054" +
    "\256\063\270\064\274\067\265\073\264\074\257\076\271" +
    "\102\262\103\300\104\260\001\001\000\040\016\311\025" +
    "\302\026\277\027\276\053\272\054\256\063\270\064\274" +
    "\067\265\073\264\074\257\076\271\102\262\103\300\104" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\033\u011d\052\107\053\077\054\074\001" +
    "\001\000\002\001\001\000\014\033\u0120\052\107\053\077" +
    "\054\074\066\u011f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\u012d\035\u0131\037\u012c\040" +
    "\u012b\041\u0130\042\u012f\043\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\u0133\037\u012c\040\u012b\041\u0130\042\u012f" +
    "\043\u012e\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\u0135\052\107\053\077\054\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\u0138\052\107\053" +
    "\077\054\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\033\u013b\052\107\053\077\054\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\u013f\052\107\053\077\054\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\033\u0143" +
    "\052\107\053\077\054\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\033\u0146\052\107\053\077\054\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\u014c" +
    "\051\u014f\072\u014e\105\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\u014c\072\u0151\001\001\000\002\001\001\000\004\014" +
    "\u0153\001\001\000\002\001\001\000\042\015\u0155\016\251" +
    "\025\302\026\277\027\276\053\272\054\256\063\270\064" +
    "\274\067\265\073\264\074\257\076\271\102\262\103\300" +
    "\104\260\001\001\000\040\016\311\025\302\026\277\027" +
    "\276\053\272\054\256\063\270\064\274\067\265\073\264" +
    "\074\257\076\271\102\262\103\300\104\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GraphikSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GraphikSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GraphikSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    public static Nodo raiz;
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        //Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        //Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$GraphikSintactico$actions {



  private final GraphikSintactico parser;

  /** Constructor */
  CUP$GraphikSintactico$actions(GraphikSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$GraphikSintactico$do_action_part00000000(
    int                        CUP$GraphikSintactico$act_num,
    java_cup.runtime.lr_parser CUP$GraphikSintactico$parser,
    java.util.Stack            CUP$GraphikSintactico$stack,
    int                        CUP$GraphikSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GraphikSintactico$result;

      /* select the action based on the action number */
      switch (CUP$GraphikSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = start_val;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GraphikSintactico$parser.done_parsing();
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
System.out.println("Empezo Graphik \n");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 IM IN L_ALS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Raiz");
                nuevo.Hijo(a);
                nuevo.Hijo(b);
                nuevo.Hijo(c);
                RESULT = nuevo;
                System.out.println("Finalizo Graphik \n");
                parser.raiz=nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IM ::= IMPORTACIONES 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IM",5, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IM ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Importa");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IM",5, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACIONES ::= IMPORTACIONES L_IMPORTACIONES 
            {
              Nodo RESULT =null;
		int importaleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int importaright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo importa = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		importa.Hijo(nodo); RESULT =importa;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",7, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACIONES ::= L_IMPORTACIONES 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Importa"); nuevo.Hijo(nodo);RESULT=nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",7, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_IMPORTACIONES ::= importar nombreArchivo fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_IMPORTACIONES",8, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IN ::= INCLUYE_HK 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IN",4, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IN ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Incluye");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IN",4, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INCLUYE_HK ::= INCLUYE_HK L_INCLUYE 
            {
              Nodo RESULT =null;
		int incluyeleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int incluyeright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo incluye = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		incluye.Hijo(nodo); RESULT =incluye;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",9, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INCLUYE_HK ::= L_INCLUYE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Incluye"); nuevo.Hijo(nodo);RESULT=nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",9, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_INCLUYE ::= incluirHK id fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_INCLUYE",59, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_ALS ::= L_ALS ALS 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 als.Hijo(nodo); RESULT = als; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_ALS ::= ALS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("ListaAls"); nuevo.Hijo(nodo); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALS ::= Tals id VISIBILIDAD HEREDA llaveAbre CUERPO_ALS llaveCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo h = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Als");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(v);
            nuevo.Hijo(h);
            nuevo.Hijo(corpo);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // HEREDA ::= hereda id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  
            Nodo nuevo = new Nodo("Hereda"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i); 
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // HEREDA ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Hereda");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",13, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dospuntos publico 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Publico");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= dospuntos privado 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Privado");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VISIBILIDAD ::= dospuntos protegido 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Protegido");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VISIBILIDAD ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Publico");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",10, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_ALS ::= CUERPO_ALS L_CUERPO 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		als.Hijo(nodo); RESULT = als;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_ALS ::= L_CUERPO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("SentenciasAls");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CUERPO ::= DECLARACION_GLOBAL 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CUERPO ::= METODO_INICIO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CUERPO ::= DATOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CUERPO ::= METODOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",44, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATOS ::= Tvacio datos parenAbre parenCierra llaveAbre CUERPO_DATOS llaveCierra 
            {
              Nodo RESULT =null;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("MetodoDatos");
                Nodo tipo = new Nodo("TipoVacio");
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DATOS",26, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_DATOS ::= CUERPO_DATOS L_DATOS 
            {
              Nodo RESULT =null;
		int datosleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int datosright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo datos = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		datos.Hijo(nodo); RESULT = datos;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_DATOS",27, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_DATOS ::= L_DATOS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("CuerpoDatos");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_DATOS",27, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // L_DATOS ::= COLUMNA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_DATOS ::= PROCESAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_DATOS ::= DONDE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_DATOS ::= DONDECADA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_DATOS ::= DONDETODO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_DATOS",14, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COLUMNA ::= columna parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Columna");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",29, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PROCESAR ::= procesar igual EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Procesar");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PROCESAR",30, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DONDE ::= donde parenAbre EXP parenCierra igual EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Donde");
                Nodo e = new Nodo("Exp");
                Nodo e2 = new Nodo("Exp");
                e.Hijo(exp);
                e2.Hijo(exp2);
                nuevo.Hijo(e);
                nuevo.Hijo(e2);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDE",31, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DONDECADA ::= dondecada parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
                Nodo nuevo = new Nodo("DondeCada");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDECADA",32, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DONDETODO ::= dondetodo parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		
                Nodo nuevo = new Nodo("DondeTodo");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DONDETODO",33, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_GLOBAL ::= var TIPO_DATO id VISIBILIDAD OPCION fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("DeclaraGlobalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_GLOBAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("DeclaraGlobalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_GLOBAL ::= var TIPO_DATO id VISIBILIDAD igual nuevo LLAMAR_INSTANCIA fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		 Nodo nuevo = new Nodo("InstanciaGlobal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",15, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPCION ::= coma L_VAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPCION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo n= new Nodo("Asignacion"); n.Hijo(nodo);RESULT = n;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPCION ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Asignacion");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("OPCION",24, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // L_VAR ::= L_VAR coma V 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 v.setNombre("L");
            nodo.Hijo(v);
            RESULT = nodo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",16, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // L_VAR ::= V 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		v.setNombre("L");
            Nodo nuevo = new Nodo("ListaID");
        nuevo.Hijo(v);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",16, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // V ::= id VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("");
           Nodo i= new Nodo(id);
                nuevo.Hijo(i);
                nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("V",48, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARREGLO ::= ARREGLO ARR 
            {
              Nodo RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo arr = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                        arr.Hijo(a);
                        RESULT=arr;
                    
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARREGLO ::= ARR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Dimensiones");
        nuevo.Hijo(a);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARR ::= corAbre EXP corCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Exp");
                        nuevo.Hijo(exp);
                        RESULT=nuevo;
                    
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARR",28, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_DATO ::= Tentero 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("numero"); 
           
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_DATO ::= Tdecimal 
            {
              Nodo RESULT =null;
		  
           RESULT= new Nodo("decimal"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_DATO ::= Tcaracter 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("caracter"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_DATO ::= Tcadena 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("cadena"); 
             
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO_DATO ::= Tbool 
            {
              Nodo RESULT =null;
		  
            RESULT= new Nodo("bool"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_DATO ::= Tvacio 
            {
              Nodo RESULT =null;
		  
            RESULT = new Nodo("vacio"); 
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_DATO ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  
            Nodo nuevo = new Nodo("Als"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",23, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIGNACION_ARREGLO ::= igual EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",35, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIGNACION_ARREGLO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Posiciones");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",35, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_POSICIONES ::= L_POSICIONES coma EXP 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		p.Hijo(nodo); RESULT = p;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_POSICIONES",6, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_POSICIONES ::= EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Posiciones"); 
                nuevo.Hijo(nodo); 
                RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_POSICIONES",6, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= igual EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO_INICIO ::= Tvacio inicio parenAbre parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                    Nodo nuevo = new Nodo("MetodoInicio");
                Nodo corpo = new Nodo("CuerpoInicio");
                Nodo tipo = new Nodo("TipoVacio");
                corpo.Hijo(sent);
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("METODO_INICIO",37, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODOS ::= TIPO_DATO id parenAbre L_PARAMETROS parenCierra VISIBILIDAD llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Metodo");
                Nodo corpo = new Nodo("CuerpoMetodo");
                Nodo i = new Nodo(id);
                corpo.Hijo(s);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                nuevo.Hijo(p);
                nuevo.Hijo(v);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("METODOS",38, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_PARAMETROS ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_PARAMETROS ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Parametros");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAMETROS",67, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROS ::= PARAMETROS coma PP 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                pp.setNombre("P");
                p.Hijo(pp);
                RESULT = p;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PARAMETROS ::= PP 
            {
              Nodo RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo pp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                pp.setNombre("P");
                Nodo nuevo = new Nodo("Parametros");
                nuevo.Hijo(pp);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PP ::= TIPO_DATO id 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("");
                Nodo i = new Nodo(id);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PP",56, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= SENTENCIAS L_SENT 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		sent.Hijo(nodo); RESULT = sent;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS ::= L_SENT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo n = new Nodo("Sentencias"); n.Hijo(nodo); RESULT = n;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",11, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_SENT ::= DECLARACION_LOCAL fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_SENT ::= LLAMAR fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_SENT ::= LLAMARHK fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_SENT ::= ASIGNA fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L_SENT ::= RETORNA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // L_SENT ::= SENTENCIA_SI 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L_SENT ::= SENTENCIA_SELECCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L_SENT ::= SENTENCIA_PARA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // L_SENT ::= SENTENCIA_MIENTRAS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // L_SENT ::= SENTENCIA_HMIENTRAS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // L_SENT ::= CONTINUAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // L_SENT ::= TERMINAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // L_SENT ::= IMPRIMIR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // L_SENT ::= GRAPHIKAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",12, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // GRAPHIKAR ::= graphikar parenAbre ARR_GRAPHIK parenCierra fin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("Graphikar");
                nuevo.Hijo(nodo);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("GRAPHIKAR",21, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARR_GRAPHIK ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ARR_GRAPHIK",52, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IMPRIMIR ::= imprimir parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("Imprimir"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",66, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTINUAR ::= continuar fin 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Continuar");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",65, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TERMINAR ::= terminar fin 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Terminar");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR",64, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_HMIENTRAS ::= hacer llaveAbre SENTENCIAS llaveCierra mientras parenAbre EXP parenCierra fin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		Nodo nuevo = new Nodo("SentenciaHacer");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoHacer"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(s);
                            nuevo.Hijo(e);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HMIENTRAS",57, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_MIENTRAS ::= mientras parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaMientras");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoMientras"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(e);
                            nuevo.Hijo(s);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",58, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_PARA ::= para parenAbre ASIGNA_PARA EXP dospuntos EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaPara");
                            Nodo e = new Nodo("Exp"); 
                            Nodo e2 = new Nodo("Exp"); 
                            Nodo sent = new Nodo("CuerpoPara"); 
                            sent.Hijo(s);
                            e.Hijo(cond);
                            e2.Hijo(exp);
                            nuevo.Hijo(a);
                            nuevo.Hijo(e);
                            nuevo.Hijo(e2);
                            nuevo.Hijo(sent);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",53, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNA_PARA ::= DECLARACION_PARA dospuntos 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",54, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNA_PARA ::= ASIGNA dospuntos 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",54, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION_PARA ::= var TIPO_DATO id igual EXP 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalVariable");
                Nodo l= new Nodo("ListaID");
                Nodo e= new Nodo("Exp");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                e.Hijo(exp);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(e);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",55, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_SELECCION ::= seleccion parenAbre EXP parenCierra llaveAbre CASOS DEFECTO llaveCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo casos = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("SentenciaSeleccion");
                            Nodo e = new Nodo("Exp"); 
                            e.Hijo(exp);
                            nuevo.Hijo(e);
                            nuevo.Hijo(casos);
                            nuevo.Hijo(def);
                            RESULT = nuevo;
                        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",60, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASOS ::= CASOS L_CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		caso.Hijo(nodo); RESULT = caso;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",61, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASOS ::= L_CASO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("ListaCasos"); nuevo.Hijo(nodo);RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",61, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_CASO ::= caso EXP dospuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Caso");
              Nodo e = new Nodo("Exp");
              Nodo c = new Nodo("CuerpoCaso");
                e.Hijo(exp); 
                c.Hijo(sent);
                nuevo.Hijo(e);
                nuevo.Hijo(c);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_CASO",62, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DEFECTO ::= defecto dospuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("CuerpoDefecto"); nuevo.Hijo(sent); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",63, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DEFECTO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("CuerpoDefecto");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",63, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_SI ::= si parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra SENTENCIA_SINO 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int corposinoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int corposinoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo corposino = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("SentenciaSi");
                    Nodo e= new Nodo("Exp");
                    Nodo si= new Nodo("CuerpoSi");
                    si.Hijo(corpo);
                    e.Hijo(exp);
                    nuevo.Hijo(e);
                    nuevo.Hijo(si);
                    nuevo.Hijo(corposino);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",50, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_SINO ::= sino llaveAbre SENTENCIAS llaveCierra 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("CuerpoSino");
                    nuevo.Hijo(sent);
                    RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",51, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_SINO ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("CuerpoSino");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",51, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RETORNA ::= retornar EXP fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Retorno"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("RETORNA",49, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD OPCION 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",19, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION_LOCAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("DeclaraLocalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",19, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD igual nuevo LLAMAR_INSTANCIA 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("InstanciaLocal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",19, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LLAMAR_INSTANCIA ::= id parenAbre parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		RESULT = new Nodo(id);
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR_INSTANCIA",36, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNA ::= id igual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("Exp");
                nuevo.Hijo(i);
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNA ::= id igual nuevo LLAMAR_INSTANCIA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo ins = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("InstanciaLocal");
                nuevo.Hijo(i);
                e.Hijo(ins);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNA ::= id L_ACCESO igual EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("AsignacionAcceso");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("Exp");
                nuevo.Hijo(i);
                nuevo.Hijo(nodo);
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",20, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // L_ACCESO ::= L_ACCESO A 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		a.setNombre("L_Acceso"); nodo.Hijo(a); RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ACCESO",22, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // L_ACCESO ::= A 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		a.setNombre("L_Acceso");
        Nodo nuevo = new Nodo("Acceso");
        nuevo.Hijo(a);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("L_ACCESO",22, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // A ::= punto id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo  = new Nodo(""); Nodo i = new Nodo(id); nuevo.Hijo(i); nuevo.Hijo(nodo); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("A",47, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // A ::= punto id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo(""); Nodo i = new Nodo(id); nuevo.Hijo(i); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("A",47, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LLAMAR ::= llamar id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("LlamaFun");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",41, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // LLAMAR ::= llamar id L_ACCESO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("LlamaFunAcceso");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",41, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LLAMARHK ::= llamarHK id parenAbre PARAM_LLAMA parenCierra 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		

            Nodo nuevo = new Nodo("LlamarHK"); 
            Nodo i = new Nodo(id);  
            nuevo.Hijo(i); 
            nuevo.Hijo(nodo);         
            RESULT = nuevo;    
            
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK",42, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAM_LLAMA ::= PARAM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",43, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAM_LLAMA ::= 
            {
              Nodo RESULT =null;
		RESULT = new Nodo("Parametros");
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",43, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAM ::= PARAM coma P 
            {
              Nodo RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		 param.Hijo(p); RESULT = param;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM",68, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAM ::= P 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Parametros"); nuevo.Hijo(p); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("PARAM",68, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // P ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("P",46, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= EXP por EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= EXP potencia EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("potencia");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= EXP or EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("||");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= EXP xor EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("&|");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= EXP and EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("&&");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXP ::= not EXP 
            {
              Nodo RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("!");
        nuevo.Hijo(m);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXP ::= EXP menorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXP ::= EXP mayorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXP ::= EXP menorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= EXP mayorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= EXP igualigual EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("==");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXP ::= EXP diferente EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("!=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXP ::= EXP incremento 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
        Nodo nuevo = new Nodo("Incremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP ::= EXP decremento 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		
        Nodo nuevo = new Nodo("Decremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP ::= menos EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("Unario");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXP ::= parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXP ::= LLAMAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP ::= LLAMADA_ARREGLO 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP ::= LLAMARHK 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP ::= llaveAbre L_POSICIONES llaveCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		RESULT = nodo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXP ::= id L_ACCESO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
        Nodo nuevo = new Nodo("Acceso");
        Nodo n=new Nodo(id);
        nuevo.Hijo(n);
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP ::= num 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP ::= cad 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP ::= dec 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("decimal"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXP ::= carac 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXP ::= falso 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("falso"); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= verdadero 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("verdadero"); 
            RESULT = nuevo; 
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LLAMADA_ARREGLO ::= id DIM 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("LlamaArreglo");
                    Nodo n=new Nodo(id);
                    nuevo.Hijo(n);
                    nuevo.Hijo(dim);
                    RESULT = nuevo;
                
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",40, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DIM ::= DIM D 
            {
              Nodo RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		dim.Hijo(d);RESULT = dim;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DIM",18, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DIM ::= D 
            {
              Nodo RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.peek()).value;
		                    
            Nodo d = new Nodo("Dimensiones");
            d.Hijo(dim);
            RESULT = d;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("DIM",18, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // D ::= corAbre EXP corCierra 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-1)).value;
		Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;
              CUP$GraphikSintactico$result = parser.getSymbolFactory().newSymbol("D",45, ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.elementAt(CUP$GraphikSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$GraphikSintactico$stack.peek()), RESULT);
            }
          return CUP$GraphikSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$GraphikSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$GraphikSintactico$do_action(
    int                        CUP$GraphikSintactico$act_num,
    java_cup.runtime.lr_parser CUP$GraphikSintactico$parser,
    java.util.Stack            CUP$GraphikSintactico$stack,
    int                        CUP$GraphikSintactico$top)
    throws java.lang.Exception
    {
              return CUP$GraphikSintactico$do_action_part00000000(
                               CUP$GraphikSintactico$act_num,
                               CUP$GraphikSintactico$parser,
                               CUP$GraphikSintactico$stack,
                               CUP$GraphikSintactico$top);
    }
}

}
