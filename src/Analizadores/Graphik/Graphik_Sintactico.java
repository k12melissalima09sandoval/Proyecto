
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Graphik_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public Graphik_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Graphik_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Graphik_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\005\000\002\006" +
    "\004\000\002\006\003\000\002\007\005\000\002\010\004" +
    "\000\002\010\003\000\002\011\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\011\000\002\015\004\000\002" +
    "\015\002\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\010\000\002\017\011\000\002\025\004\000\002" +
    "\025\003\000\002\025\002\000\002\027\004\000\002\027" +
    "\003\000\002\030\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\031\004\000\002" +
    "\033\005\000\002\033\003\000\002\032\005\000\002\032" +
    "\003\000\002\021\004\000\002\020\006\000\002\020\004" +
    "\000\002\035\011\000\002\036\004\000\002\036\003\000" +
    "\002\037\013\000\002\040\006\000\002\040\004\000\002" +
    "\013\004\000\002\013\003\000\002\014\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\064" +
    "\007\000\002\063\004\000\002\062\004\000\002\054\013" +
    "\000\002\055\011\000\002\050\013\000\002\052\004\000" +
    "\002\051\004\000\002\051\004\000\002\053\007\000\002" +
    "\056\012\000\002\057\004\000\002\057\003\000\002\061" +
    "\005\000\002\060\006\000\002\046\012\000\002\047\006" +
    "\000\002\047\002\000\002\045\005\000\002\022\007\000" +
    "\002\022\010\000\002\023\005\000\002\042\010\000\002" +
    "\043\010\000\002\044\005\000\002\044\003\000\002\041" +
    "\013\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\004\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\016\007\001\002\000\006\016\007\026" +
    "\014\001\002\000\006\016\ufffe\026\ufffe\001\002\000\004" +
    "\002\012\001\002\000\004\060\010\001\002\000\004\114" +
    "\011\001\002\000\006\016\ufffd\026\ufffd\001\002\000\004" +
    "\002\001\001\002\000\006\016\uffff\026\uffff\001\002\000" +
    "\004\052\u0112\001\002\000\006\012\ufffb\026\ufffb\001\002" +
    "\000\006\012\022\026\014\001\002\000\006\002\000\012" +
    "\022\001\002\000\006\002\ufff8\012\ufff8\001\002\000\006" +
    "\012\ufffc\026\ufffc\001\002\000\004\052\023\001\002\000" +
    "\010\017\ufff1\063\ufff1\111\025\001\002\000\006\017\032" +
    "\063\ufff5\001\002\000\010\013\026\014\027\015\030\001" +
    "\002\000\014\017\ufff2\063\ufff2\110\ufff2\113\ufff2\114\ufff2" +
    "\001\002\000\014\017\ufff3\063\ufff3\110\ufff3\113\ufff3\114" +
    "\ufff3\001\002\000\014\017\ufff4\063\ufff4\110\ufff4\113\ufff4" +
    "\114\ufff4\001\002\000\004\063\034\001\002\000\004\052" +
    "\033\001\002\000\004\063\ufff6\001\002\000\022\004\041" +
    "\005\037\006\035\007\053\010\051\011\043\012\046\020" +
    "\052\001\002\000\004\052\uffe1\001\002\000\004\052\u0104" +
    "\001\002\000\004\052\uffe2\001\002\000\006\020\uffec\064" +
    "\uffec\001\002\000\004\052\uffe3\001\002\000\004\064\u0103" +
    "\001\002\000\006\024\174\052\uffdd\001\002\000\022\004" +
    "\041\005\037\006\035\007\053\010\051\011\054\012\046" +
    "\064\uffee\001\002\000\022\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\064\uffd2\001\002\000\004" +
    "\052\uffde\001\002\000\004\064\uffef\001\002\000\006\020" +
    "\052\064\ufff0\001\002\000\004\052\uffdf\001\002\000\020" +
    "\004\041\005\037\006\035\007\053\010\051\011\054\012" +
    "\046\001\002\000\004\052\uffe0\001\002\000\004\052\uffdd" +
    "\001\002\000\004\052\056\001\002\000\014\061\061\110" +
    "\ufff1\111\025\113\ufff1\114\ufff1\001\002\000\010\061\uffe5" +
    "\110\uffe5\111\uffe5\001\002\000\010\110\160\113\161\114" +
    "\uffe7\001\002\000\026\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\065\100\070\074\077\071\001" +
    "\002\000\010\061\061\110\ufff1\111\025\001\002\000\010" +
    "\061\uffe6\110\uffe6\111\uffe6\001\002\000\004\110\065\001" +
    "\002\000\030\051\073\052\070\053\076\054\072\055\103" +
    "\056\077\057\075\063\102\065\100\070\074\077\071\001" +
    "\002\000\004\114\067\001\002\000\006\020\uffea\064\uffea" +
    "\001\002\000\060\062\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\111\uff8c\113\uff8c\114\uff8c\001\002" +
    "\000\026\051\073\052\070\053\076\054\072\055\103\056" +
    "\077\057\075\065\100\070\074\077\071\001\002\000\060" +
    "\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071" +
    "\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\111\uff8e\113\uff8e\114\uff8e\001\002\000\060\062\uff8f" +
    "\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\100\uff8f\101\uff8f" +
    "\102\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\111" +
    "\uff8f\113\uff8f\114\uff8f\001\002\000\026\051\073\052\070" +
    "\053\076\054\072\055\103\056\077\057\075\065\100\070" +
    "\074\077\071\001\002\000\060\062\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b" +
    "\104\uff8b\105\uff8b\106\uff8b\107\uff8b\111\uff8b\113\uff8b\114" +
    "\uff8b\001\002\000\060\062\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\105\uff90\106\uff90\107\uff90\111\uff90\113\uff90\114\uff90\001" +
    "\002\000\060\062\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a" +
    "\106\uff8a\107\uff8a\111\uff8a\113\uff8a\114\uff8a\001\002\000" +
    "\026\051\073\052\070\053\076\054\072\055\103\056\077" +
    "\057\075\065\100\070\074\077\071\001\002\000\006\113" +
    "\145\114\uffdc\001\002\000\030\051\073\052\070\053\076" +
    "\054\072\055\103\056\077\057\075\063\102\065\100\070" +
    "\074\077\071\001\002\000\060\062\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\076\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\105\uff8d\106\uff8d\107\uff8d\111\uff8d\113\uff8d\114" +
    "\uff8d\001\002\000\010\064\uffda\113\uffda\114\uffda\001\002" +
    "\000\050\064\uffd8\067\124\070\111\071\121\072\107\073" +
    "\106\074\110\075\112\076\115\100\125\101\114\102\123" +
    "\103\122\104\113\105\116\106\117\107\120\113\uffd8\114" +
    "\uffd8\001\002\000\026\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\065\100\070\074\077\071\001" +
    "\002\000\026\051\073\052\070\053\076\054\072\055\103" +
    "\056\077\057\075\065\100\070\074\077\071\001\002\000" +
    "\026\051\073\052\070\053\076\054\072\055\103\056\077" +
    "\057\075\065\100\070\074\077\071\001\002\000\026\051" +
    "\073\052\070\053\076\054\072\055\103\056\077\057\075" +
    "\065\100\070\074\077\071\001\002\000\026\051\073\052" +
    "\070\053\076\054\072\055\103\056\077\057\075\065\100" +
    "\070\074\077\071\001\002\000\026\051\073\052\070\053" +
    "\076\054\072\055\103\056\077\057\075\065\100\070\074" +
    "\077\071\001\002\000\026\051\073\052\070\053\076\054" +
    "\072\055\103\056\077\057\075\065\100\070\074\077\071" +
    "\001\002\000\026\051\073\052\070\053\076\054\072\055" +
    "\103\056\077\057\075\065\100\070\074\077\071\001\002" +
    "\000\026\051\073\052\070\053\076\054\072\055\103\056" +
    "\077\057\075\065\100\070\074\077\071\001\002\000\060" +
    "\062\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071" +
    "\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107" +
    "\uff94\111\uff94\113\uff94\114\uff94\001\002\000\060\062\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\100\uff93\101\uff93" +
    "\102\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\111" +
    "\uff93\113\uff93\114\uff93\001\002\000\026\051\073\052\070" +
    "\053\076\054\072\055\103\056\077\057\075\065\100\070" +
    "\074\077\071\001\002\000\026\051\073\052\070\053\076" +
    "\054\072\055\103\056\077\057\075\065\100\070\074\077" +
    "\071\001\002\000\026\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\065\100\070\074\077\071\001" +
    "\002\000\026\051\073\052\070\053\076\054\072\055\103" +
    "\056\077\057\075\065\100\070\074\077\071\001\002\000" +
    "\026\051\073\052\070\053\076\054\072\055\103\056\077" +
    "\057\075\065\100\070\074\077\071\001\002\000\060\062" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\124\070\111\071\121" +
    "\072\107\073\106\074\uff99\075\uff99\076\uff99\100\uff99\101" +
    "\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106\117\107\120" +
    "\111\uff99\113\uff99\114\uff99\001\002\000\060\062\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\121\072\107" +
    "\073\106\074\uffa3\075\uffa3\076\uffa3\100\uffa3\101\uffa3\102" +
    "\uffa3\103\uffa3\104\uffa3\105\uffa3\106\117\107\120\111\uffa3" +
    "\113\uffa3\114\uffa3\001\002\000\060\062\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\124\070\111\071\121\072\107\073\106" +
    "\074\uff97\075\uff97\076\uff97\100\uff97\101\uff97\102\uff97\103" +
    "\uff97\104\uff97\105\uff97\106\117\107\120\111\uff97\113\uff97" +
    "\114\uff97\001\002\000\060\062\uff98\064\uff98\065\uff98\066" +
    "\uff98\067\124\070\111\071\121\072\107\073\106\074\uff98" +
    "\075\uff98\076\uff98\100\uff98\101\uff98\102\uff98\103\uff98\104" +
    "\uff98\105\uff98\106\117\107\120\111\uff98\113\uff98\114\uff98" +
    "\001\002\000\060\062\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\073\106\074\uffa1\075\uffa1" +
    "\076\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105" +
    "\uffa1\106\117\107\120\111\uffa1\113\uffa1\114\uffa1\001\002" +
    "\000\060\062\uff95\064\uff95\065\uff95\066\uff95\067\124\070" +
    "\111\071\121\072\107\073\106\074\uff95\075\uff95\076\uff95" +
    "\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106" +
    "\117\107\120\111\uff95\113\uff95\114\uff95\001\002\000\060" +
    "\062\uff9d\064\uff9d\065\uff9d\066\uff9d\067\124\070\111\071" +
    "\121\072\107\073\106\074\uff9d\075\112\076\uff9d\100\125" +
    "\101\114\102\123\103\122\104\113\105\116\106\117\107" +
    "\120\111\uff9d\113\uff9d\114\uff9d\001\002\000\060\062\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\124\070\111\071\121\072" +
    "\107\073\106\074\uff9a\075\uff9a\076\uff9a\100\uff9a\101\uff9a" +
    "\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\117\107\120\111" +
    "\uff9a\113\uff9a\114\uff9a\001\002\000\060\062\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\124\070\111\071\121\072\107\073" +
    "\106\074\uff96\075\uff96\076\uff96\100\uff96\101\uff96\102\uff96" +
    "\103\uff96\104\uff96\105\uff96\106\117\107\120\111\uff96\113" +
    "\uff96\114\uff96\001\002\000\060\062\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\124\070\111\071\121\072\107\073\106\074" +
    "\uff9c\075\uff9c\076\uff9c\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\111\uff9c\113\uff9c\114" +
    "\uff9c\001\002\000\060\062\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\121\072\107\073\106\074\uffa2\075" +
    "\uffa2\076\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2" +
    "\105\uffa2\106\117\107\120\111\uffa2\113\uffa2\114\uffa2\001" +
    "\002\000\060\062\uff9e\064\uff9e\065\uff9e\066\uff9e\067\124" +
    "\070\111\071\121\072\107\073\106\074\uff9e\075\112\076" +
    "\115\100\125\101\114\102\123\103\122\104\113\105\116" +
    "\106\117\107\120\111\uff9e\113\uff9e\114\uff9e\001\002\000" +
    "\060\062\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\073\106\074\uffa0\075\uffa0\076\uffa0\100" +
    "\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\117" +
    "\107\120\111\uffa0\113\uffa0\114\uffa0\001\002\000\060\062" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\072\uff9f\073\106\074\uff9f\075\uff9f\076\uff9f\100\uff9f\101" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\117\107\120" +
    "\111\uff9f\113\uff9f\114\uff9f\001\002\000\006\064\146\113" +
    "\145\001\002\000\030\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\063\102\065\100\070\074\077" +
    "\071\001\002\000\010\064\uffd9\113\uffd9\114\uffd9\001\002" +
    "\000\010\064\uffdb\113\uffdb\114\uffdb\001\002\000\044\066" +
    "\151\067\124\070\111\071\121\072\107\073\106\074\110" +
    "\075\112\076\115\100\125\101\114\102\123\103\122\104" +
    "\113\105\116\106\117\107\120\001\002\000\060\062\uff91" +
    "\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072" +
    "\uff91\073\uff91\074\uff91\075\uff91\076\uff91\100\uff91\101\uff91" +
    "\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91\111" +
    "\uff91\113\uff91\114\uff91\001\002\000\060\062\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\121\072\107\073" +
    "\106\074\uff92\075\uff92\076\uff92\100\uff92\101\uff92\102\uff92" +
    "\103\uff92\104\uff92\105\uff92\106\117\107\120\111\uff92\113" +
    "\uff92\114\uff92\001\002\000\060\062\uff9b\064\uff9b\065\uff9b" +
    "\066\uff9b\067\124\070\111\071\121\072\107\073\106\074" +
    "\uff9b\075\uff9b\076\uff9b\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\111\uff9b\113\uff9b\114" +
    "\uff9b\001\002\000\044\062\155\067\124\070\111\071\121" +
    "\072\107\073\106\074\110\075\112\076\115\100\125\101" +
    "\114\102\123\103\122\104\113\105\116\106\117\107\120" +
    "\001\002\000\010\061\uffe4\110\uffe4\111\uffe4\001\002\000" +
    "\004\114\171\001\002\000\004\114\uffe8\001\002\000\026" +
    "\051\073\052\070\053\076\054\072\055\103\056\077\057" +
    "\075\065\100\070\074\077\071\001\002\000\004\052\163" +
    "\001\002\000\006\113\165\114\uffe9\001\002\000\010\111" +
    "\025\113\ufff1\114\ufff1\001\002\000\006\113\uffd5\114\uffd5" +
    "\001\002\000\004\052\166\001\002\000\010\111\025\113" +
    "\ufff1\114\ufff1\001\002\000\006\113\uffd6\114\uffd6\001\002" +
    "\000\044\067\124\070\111\071\121\072\107\073\106\074" +
    "\110\075\112\076\115\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\114\uffd7\001\002\000" +
    "\006\020\uffeb\064\uffeb\001\002\000\006\020\uffed\064\uffed" +
    "\001\002\000\022\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\064\uffd3\001\002\000\004\065\175" +
    "\001\002\000\004\066\176\001\002\000\034\020\231\022" +
    "\217\023\202\025\214\030\233\031\213\035\200\036\204" +
    "\037\211\040\223\041\226\050\203\052\220\001\002\000" +
    "\044\020\uffcd\022\uffcd\023\uffcd\025\uffcd\030\uffcd\031\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\050\uffcd\052\uffcd\063\uffcd\064\uffcd\001\002\000\004" +
    "\065\360\001\002\000\044\020\uffcb\022\uffcb\023\uffcb\025" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\050\uffcb\052\uffcb\063\uffcb\064" +
    "\uffcb\001\002\000\004\052\353\001\002\000\004\065\347" +
    "\001\002\000\004\065\341\001\002\000\036\020\231\022" +
    "\217\023\202\025\214\030\233\031\213\035\200\036\204" +
    "\037\211\040\223\041\226\050\203\052\220\063\337\001" +
    "\002\000\044\020\uffbf\022\uffbf\023\uffbf\025\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\041\uffbf\050\uffbf\052\uffbf\063\uffbf\064\uffbf\001\002" +
    "\000\044\020\uffc9\022\uffc9\023\uffc9\025\uffc9\030\uffc9\031" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\050\uffc9\052\uffc9\063\uffc9\064\uffc9\001\002\000" +
    "\044\020\uffc3\022\uffc3\023\uffc3\025\uffc3\030\uffc3\031\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\050\uffc3\052\uffc3\063\uffc3\064\uffc3\001\002\000\004" +
    "\063\327\001\002\000\044\020\uffc0\022\uffc0\023\uffc0\025" +
    "\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\050\uffc0\052\uffc0\063\uffc0\064" +
    "\uffc0\001\002\000\004\065\307\001\002\000\004\052\277" +
    "\001\002\000\044\020\uffc2\022\uffc2\023\uffc2\025\uffc2\030" +
    "\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\050\uffc2\052\uffc2\063\uffc2\064\uffc2\001" +
    "\002\000\044\020\uffc4\022\uffc4\023\uffc4\025\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\050\uffc4\052\uffc4\063\uffc4\064\uffc4\001\002" +
    "\000\026\051\073\052\070\053\076\054\072\055\103\056" +
    "\077\057\075\065\100\070\074\077\071\001\002\000\004" +
    "\110\273\001\002\000\044\020\uffc7\022\uffc7\023\uffc7\025" +
    "\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\050\uffc7\052\uffc7\063\uffc7\064" +
    "\uffc7\001\002\000\044\020\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\050\uffc5\052\uffc5\063\uffc5\064\uffc5" +
    "\001\002\000\004\114\272\001\002\000\044\020\uffca\022" +
    "\uffca\023\uffca\025\uffca\030\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\050\uffca\052" +
    "\uffca\063\uffca\064\uffca\001\002\000\044\020\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\050\uffc6\052\uffc6" +
    "\063\uffc6\064\uffc6\001\002\000\004\114\271\001\002\000" +
    "\004\114\270\001\002\000\044\020\uffc1\022\uffc1\023\uffc1" +
    "\025\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\050\uffc1\052\uffc1\063\uffc1" +
    "\064\uffc1\001\002\000\022\004\041\005\037\006\035\007" +
    "\053\010\051\011\054\012\046\052\251\001\002\000\004" +
    "\114\250\001\002\000\004\065\234\001\002\000\026\051" +
    "\073\052\070\053\076\054\072\055\103\056\077\057\075" +
    "\065\100\070\074\077\071\001\002\000\044\066\236\067" +
    "\124\070\111\071\121\072\107\073\106\074\110\075\112" +
    "\076\115\100\125\101\114\102\123\103\122\104\113\105" +
    "\116\106\117\107\120\001\002\000\004\063\237\001\002" +
    "\000\034\020\231\022\217\023\202\025\214\030\233\031" +
    "\213\035\200\036\204\037\211\040\223\041\226\050\203" +
    "\052\220\001\002\000\036\020\231\022\217\023\202\025" +
    "\214\030\233\031\213\035\200\036\204\037\211\040\223" +
    "\041\226\050\203\052\220\064\242\001\002\000\044\020" +
    "\uffce\022\uffce\023\uffce\025\uffce\030\uffce\031\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\050" +
    "\uffce\052\uffce\063\uffce\064\uffce\001\002\000\046\020\uffad" +
    "\022\uffad\023\uffad\025\uffad\030\uffad\031\uffad\032\243\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\050\uffad\052\uffad\063\uffad\064\uffad\001\002\000\004\063" +
    "\245\001\002\000\044\020\uffaf\022\uffaf\023\uffaf\025\uffaf" +
    "\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\050\uffaf\052\uffaf\063\uffaf\064\uffaf" +
    "\001\002\000\034\020\231\022\217\023\202\025\214\030" +
    "\233\031\213\035\200\036\204\037\211\040\223\041\226" +
    "\050\203\052\220\001\002\000\036\020\231\022\217\023" +
    "\202\025\214\030\233\031\213\035\200\036\204\037\211" +
    "\040\223\041\226\050\203\052\220\064\247\001\002\000" +
    "\044\020\uffae\022\uffae\023\uffae\025\uffae\030\uffae\031\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\050\uffae\052\uffae\063\uffae\064\uffae\001\002\000\044" +
    "\020\uffcc\022\uffcc\023\uffcc\025\uffcc\030\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\050\uffcc\052\uffcc\063\uffcc\064\uffcc\001\002\000\004\052" +
    "\261\001\002\000\004\052\253\001\002\000\014\061\061" +
    "\110\ufff1\111\025\113\ufff1\114\ufff1\001\002\000\010\110" +
    "\160\113\161\114\uffe7\001\002\000\010\061\061\110\ufff1" +
    "\111\025\001\002\000\004\110\065\001\002\000\004\114" +
    "\uffaa\001\002\000\004\114\uffab\001\002\000\004\110\262" +
    "\001\002\000\004\021\263\001\002\000\004\052\264\001" +
    "\002\000\004\065\265\001\002\000\004\066\266\001\002" +
    "\000\004\114\267\001\002\000\044\020\uffa4\022\uffa4\023" +
    "\uffa4\025\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\050\uffa4\052\uffa4\063" +
    "\uffa4\064\uffa4\001\002\000\044\020\uffc8\022\uffc8\023\uffc8" +
    "\025\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\050\uffc8\052\uffc8\063\uffc8" +
    "\064\uffc8\001\002\000\044\020\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\050\uffbc\052\uffbc\063\uffbc\064" +
    "\uffbc\001\002\000\044\020\uffbd\022\uffbd\023\uffbd\025\uffbd" +
    "\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\050\uffbd\052\uffbd\063\uffbd\064\uffbd" +
    "\001\002\000\026\051\073\052\070\053\076\054\072\055" +
    "\103\056\077\057\075\065\100\070\074\077\071\001\002" +
    "\000\046\067\124\070\111\071\121\072\107\073\106\074" +
    "\110\075\112\076\115\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\111\uffa9\114\uffa9\001" +
    "\002\000\044\067\124\070\111\071\121\072\107\073\106" +
    "\074\110\075\112\076\115\100\125\101\114\102\123\103" +
    "\122\104\113\105\116\106\117\107\120\114\276\001\002" +
    "\000\044\020\uffac\022\uffac\023\uffac\025\uffac\030\uffac\031" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\050\uffac\052\uffac\063\uffac\064\uffac\001\002\000" +
    "\004\065\300\001\002\000\026\051\073\052\070\053\076" +
    "\054\072\055\103\056\077\057\075\065\100\070\074\077" +
    "\071\001\002\000\006\066\304\113\303\001\002\000\046" +
    "\066\uffa5\067\124\070\111\071\121\072\107\073\106\074" +
    "\110\075\112\076\115\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\113\uffa5\001\002\000" +
    "\026\051\073\052\070\053\076\054\072\055\103\056\077" +
    "\057\075\065\100\070\074\077\071\001\002\000\004\114" +
    "\305\001\002\000\044\020\uffa7\022\uffa7\023\uffa7\025\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\050\uffa7\052\uffa7\063\uffa7\064\uffa7" +
    "\001\002\000\046\066\uffa6\067\124\070\111\071\121\072" +
    "\107\073\106\074\110\075\112\076\115\100\125\101\114" +
    "\102\123\103\122\104\113\105\116\106\117\107\120\113" +
    "\uffa6\001\002\000\026\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\065\100\070\074\077\071\001" +
    "\002\000\044\066\311\067\124\070\111\071\121\072\107" +
    "\073\106\074\110\075\112\076\115\100\125\101\114\102" +
    "\123\103\122\104\113\105\116\106\117\107\120\001\002" +
    "\000\004\063\312\001\002\000\004\033\315\001\002\000" +
    "\006\033\uffb2\034\uffb2\001\002\000\006\033\315\034\323" +
    "\001\002\000\026\051\073\052\070\053\076\054\072\055" +
    "\103\056\077\057\075\065\100\070\074\077\071\001\002" +
    "\000\044\067\124\070\111\071\121\072\107\073\106\074" +
    "\110\075\112\076\115\100\125\101\114\102\123\103\122" +
    "\104\113\105\116\106\117\107\120\111\317\001\002\000" +
    "\034\020\231\022\217\023\202\025\214\030\233\031\213" +
    "\035\200\036\204\037\211\040\223\041\226\050\203\052" +
    "\220\001\002\000\040\020\231\022\217\023\202\025\214" +
    "\030\233\031\213\033\uffb0\034\uffb0\035\200\036\204\037" +
    "\211\040\223\041\226\050\203\052\220\001\002\000\006" +
    "\033\uffb3\034\uffb3\001\002\000\004\064\326\001\002\000" +
    "\004\111\324\001\002\000\034\020\231\022\217\023\202" +
    "\025\214\030\233\031\213\035\200\036\204\037\211\040" +
    "\223\041\226\050\203\052\220\001\002\000\036\020\231" +
    "\022\217\023\202\025\214\030\233\031\213\035\200\036" +
    "\204\037\211\040\223\041\226\050\203\052\220\064\uffb1" +
    "\001\002\000\044\020\uffb4\022\uffb4\023\uffb4\025\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\050\uffb4\052\uffb4\063\uffb4\064\uffb4\001" +
    "\002\000\034\020\231\022\217\023\202\025\214\030\233" +
    "\031\213\035\200\036\204\037\211\040\223\041\226\050" +
    "\203\052\220\001\002\000\036\020\231\022\217\023\202" +
    "\025\214\030\233\031\213\035\200\036\204\037\211\040" +
    "\223\041\226\050\203\052\220\064\331\001\002\000\004" +
    "\036\332\001\002\000\004\065\333\001\002\000\026\051" +
    "\073\052\070\053\076\054\072\055\103\056\077\057\075" +
    "\065\100\070\074\077\071\001\002\000\044\065\335\067" +
    "\124\070\111\071\121\072\107\073\106\074\110\075\112" +
    "\076\115\100\125\101\114\102\123\103\122\104\113\105" +
    "\116\106\117\107\120\001\002\000\004\114\336\001\002" +
    "\000\044\020\uffbb\022\uffbb\023\uffbb\025\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\050\uffbb\052\uffbb\063\uffbb\064\uffbb\001\002\000" +
    "\004\064\340\001\002\000\004\064\uffd4\001\002\000\026" +
    "\051\073\052\070\053\076\054\072\055\103\056\077\057" +
    "\075\065\100\070\074\077\071\001\002\000\044\066\343" +
    "\067\124\070\111\071\121\072\107\073\106\074\110\075" +
    "\112\076\115\100\125\101\114\102\123\103\122\104\113" +
    "\105\116\106\117\107\120\001\002\000\004\063\344\001" +
    "\002\000\034\020\231\022\217\023\202\025\214\030\233" +
    "\031\213\035\200\036\204\037\211\040\223\041\226\050" +
    "\203\052\220\001\002\000\036\020\231\022\217\023\202" +
    "\025\214\030\233\031\213\035\200\036\204\037\211\040" +
    "\223\041\226\050\203\052\220\064\346\001\002\000\044" +
    "\020\uffba\022\uffba\023\uffba\025\uffba\030\uffba\031\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\050\uffba\052\uffba\063\uffba\064\uffba\001\002\000\026\051" +
    "\073\052\070\053\076\054\072\055\103\056\077\057\075" +
    "\065\100\070\074\077\071\001\002\000\044\066\351\067" +
    "\124\070\111\071\121\072\107\073\106\074\110\075\112" +
    "\076\115\100\125\101\114\102\123\103\122\104\113\105" +
    "\116\106\117\107\120\001\002\000\004\114\352\001\002" +
    "\000\044\020\uffbe\022\uffbe\023\uffbe\025\uffbe\030\uffbe\031" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\050\uffbe\052\uffbe\063\uffbe\064\uffbe\001\002\000" +
    "\004\065\354\001\002\000\026\051\073\052\070\053\076" +
    "\054\072\055\103\056\077\057\075\065\100\070\074\077" +
    "\071\001\002\000\006\066\356\113\303\001\002\000\004" +
    "\114\357\001\002\000\044\020\uffa8\022\uffa8\023\uffa8\025" +
    "\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\050\uffa8\052\uffa8\063\uffa8\064" +
    "\uffa8\001\002\000\006\020\361\052\220\001\002\000\020" +
    "\004\041\005\037\006\035\007\053\010\051\011\054\012" +
    "\046\001\002\000\026\051\073\052\070\053\076\054\072" +
    "\055\103\056\077\057\075\065\100\070\074\077\071\001" +
    "\002\000\004\111\366\001\002\000\004\111\365\001\002" +
    "\000\026\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\065\uffb7\070\uffb7\077\uffb7\001\002\000\026" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\065\uffb6\070\uffb6\077\uffb6\001\002\000\044\067\124" +
    "\070\111\071\121\072\107\073\106\074\110\075\112\076" +
    "\115\100\125\101\114\102\123\103\122\104\113\105\116" +
    "\106\117\107\120\111\376\001\002\000\026\051\073\052" +
    "\070\053\076\054\072\055\103\056\077\057\075\065\100" +
    "\070\074\077\071\001\002\000\044\066\372\067\124\070" +
    "\111\071\121\072\107\073\106\074\110\075\112\076\115" +
    "\100\125\101\114\102\123\103\122\104\113\105\116\106" +
    "\117\107\120\001\002\000\004\063\373\001\002\000\034" +
    "\020\231\022\217\023\202\025\214\030\233\031\213\035" +
    "\200\036\204\037\211\040\223\041\226\050\203\052\220" +
    "\001\002\000\036\020\231\022\217\023\202\025\214\030" +
    "\233\031\213\035\200\036\204\037\211\040\223\041\226" +
    "\050\203\052\220\064\375\001\002\000\044\020\uffb9\022" +
    "\uffb9\023\uffb9\025\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\050\uffb9\052" +
    "\uffb9\063\uffb9\064\uffb9\001\002\000\026\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\065\uffb8\070" +
    "\uffb8\077\uffb8\001\002\000\004\052\u0100\001\002\000\004" +
    "\110\u0101\001\002\000\026\051\073\052\070\053\076\054" +
    "\072\055\103\056\077\057\075\065\100\070\074\077\071" +
    "\001\002\000\044\067\124\070\111\071\121\072\107\073" +
    "\106\074\110\075\112\076\115\100\125\101\114\102\123" +
    "\103\122\104\113\105\116\106\117\107\120\111\uffb5\001" +
    "\002\000\006\002\ufff7\012\ufff7\001\002\000\004\065\u0105" +
    "\001\002\000\020\004\041\005\037\006\035\007\053\010" +
    "\051\011\054\012\046\001\002\000\004\052\u0110\001\002" +
    "\000\006\066\u0109\113\u0108\001\002\000\020\004\041\005" +
    "\037\006\035\007\053\010\051\011\054\012\046\001\002" +
    "\000\006\063\ufff1\111\025\001\002\000\004\063\u010b\001" +
    "\002\000\034\020\231\022\217\023\202\025\214\030\233" +
    "\031\213\035\200\036\204\037\211\040\223\041\226\050" +
    "\203\052\220\001\002\000\036\020\231\022\217\023\202" +
    "\025\214\030\233\031\213\035\200\036\204\037\211\040" +
    "\223\041\226\050\203\052\220\064\u010d\001\002\000\022" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\064\uffd1\001\002\000\004\052\u010f\001\002\000\006" +
    "\066\uffd0\113\uffd0\001\002\000\006\066\uffcf\113\uffcf\001" +
    "\002\000\006\002\ufff9\012\ufff9\001\002\000\004\114\u0113" +
    "\001\002\000\006\012\ufffa\026\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\010\002\005\006\003\007\004\001\001\000" +
    "\010\007\012\010\015\011\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\016\005\017\011" +
    "\020\001\001\000\004\005\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\023\001" +
    "\001\000\004\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\041" +
    "\016\047\017\037\024\035\035\046\036\043\037\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\035\037\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\171\001\001\000\002\001\001\000\004\024\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\057\027\061\030\056\001\001\000\002\001\001" +
    "\000\006\021\156\025\155\001\001\000\004\026\153\001" +
    "\001\000\006\012\063\030\062\001\001\000\002\001\001" +
    "\000\004\031\065\001\001\000\010\026\104\032\103\033" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\147\001" +
    "\001\000\002\001\001\000\010\026\104\032\103\033\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\142\001\001\000\004\026\141\001\001" +
    "\000\004\026\140\001\001\000\004\026\137\001\001\000" +
    "\004\026\136\001\001\000\004\026\135\001\001\000\004" +
    "\026\134\001\001\000\004\026\133\001\001\000\004\026" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\131\001\001\000\004\026\130\001\001\000\004\026" +
    "\127\001\001\000\004\026\126\001\001\000\004\026\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\104\032\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\167\001\001\000" +
    "\004\020\161\001\001\000\002\001\001\000\004\012\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\013\204\014\176\022\231" +
    "\023\226\041\200\042\223\043\206\045\220\046\224\050" +
    "\215\054\214\055\207\056\221\062\211\063\227\064\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\240\022\231\023\226\041\200\042\223\043" +
    "\206\045\220\046\224\050\215\054\214\055\207\056\221" +
    "\062\211\063\227\064\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\013" +
    "\237\014\176\022\231\023\226\041\200\042\223\043\206" +
    "\045\220\046\224\050\215\054\214\055\207\056\221\062" +
    "\211\063\227\064\205\001\001\000\040\014\240\022\231" +
    "\023\226\041\200\042\223\043\206\045\220\046\224\050" +
    "\215\054\214\055\207\056\221\062\211\063\227\064\205" +
    "\001\001\000\002\001\001\000\004\047\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\013\245\014\176" +
    "\022\231\023\226\041\200\042\223\043\206\045\220\046" +
    "\224\050\215\054\214\055\207\056\221\062\211\063\227" +
    "\064\205\001\001\000\040\014\240\022\231\023\226\041" +
    "\200\042\223\043\206\045\220\046\224\050\215\054\214" +
    "\055\207\056\221\062\211\063\227\064\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\253\027\254\030\056\001\001\000" +
    "\006\021\156\025\257\001\001\000\006\012\255\030\062" +
    "\001\001\000\004\031\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\301\044\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\057\313" +
    "\060\312\001\001\000\002\001\001\000\006\060\320\061" +
    "\321\001\001\000\004\026\315\001\001\000\002\001\001" +
    "\000\042\013\317\014\176\022\231\023\226\041\200\042" +
    "\223\043\206\045\220\046\224\050\215\054\214\055\207" +
    "\056\221\062\211\063\227\064\205\001\001\000\040\014" +
    "\240\022\231\023\226\041\200\042\223\043\206\045\220" +
    "\046\224\050\215\054\214\055\207\056\221\062\211\063" +
    "\227\064\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\013\324\014\176\022\231\023" +
    "\226\041\200\042\223\043\206\045\220\046\224\050\215" +
    "\054\214\055\207\056\221\062\211\063\227\064\205\001" +
    "\001\000\040\014\240\022\231\023\226\041\200\042\223" +
    "\043\206\045\220\046\224\050\215\054\214\055\207\056" +
    "\221\062\211\063\227\064\205\001\001\000\002\001\001" +
    "\000\042\013\327\014\176\022\231\023\226\041\200\042" +
    "\223\043\206\045\220\046\224\050\215\054\214\055\207" +
    "\056\221\062\211\063\227\064\205\001\001\000\040\014" +
    "\240\022\231\023\226\041\200\042\223\043\206\045\220" +
    "\046\224\050\215\054\214\055\207\056\221\062\211\063" +
    "\227\064\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\013\344\014\176\022\231\023\226\041\200" +
    "\042\223\043\206\045\220\046\224\050\215\054\214\055" +
    "\207\056\221\062\211\063\227\064\205\001\001\000\040" +
    "\014\240\022\231\023\226\041\200\042\223\043\206\045" +
    "\220\046\224\050\215\054\214\055\207\056\221\062\211" +
    "\063\227\064\205\001\001\000\002\001\001\000\004\026" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\301\044\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\362\051\361\053\363\001\001\000\004\024" +
    "\376\001\001\000\006\026\366\052\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\013\373\014\176\022" +
    "\231\023\226\041\200\042\223\043\206\045\220\046\224" +
    "\050\215\054\214\055\207\056\221\062\211\063\227\064" +
    "\205\001\001\000\040\014\240\022\231\023\226\041\200" +
    "\042\223\043\206\045\220\046\224\050\215\054\214\055" +
    "\207\056\221\062\211\063\227\064\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\u0105\040\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u010d" +
    "\001\001\000\004\012\u0109\001\001\000\002\001\001\000" +
    "\042\013\u010b\014\176\022\231\023\226\041\200\042\223" +
    "\043\206\045\220\046\224\050\215\054\214\055\207\056" +
    "\221\062\211\063\227\064\205\001\001\000\040\014\240" +
    "\022\231\023\226\041\200\042\223\043\206\045\220\046" +
    "\224\050\215\054\214\055\207\056\221\062\211\063\227" +
    "\064\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Graphik_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Graphik_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Graphik_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Errores> Err = new LinkedList<Errores>();
    
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        Errores err = new Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Errores err = new Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Graphik_Sintactico$actions {



  private final Graphik_Sintactico parser;

  /** Constructor */
  CUP$Graphik_Sintactico$actions(Graphik_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Graphik_Sintactico$do_action_part00000000(
    int                        CUP$Graphik_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Graphik_Sintactico$parser,
    java.util.Stack            CUP$Graphik_Sintactico$stack,
    int                        CUP$Graphik_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Graphik_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Graphik_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Graphik_Sintactico$parser.done_parsing();
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES INCLUYE_HK L_ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACIONES L_IMPORTACIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",4, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= L_IMPORTACIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",4, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_IMPORTACIONES ::= importar nombreArchivo fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_IMPORTACIONES",5, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INCLUYE_HK ::= INCLUYE_HK L_INCLUYE 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",6, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INCLUYE_HK ::= L_INCLUYE 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",6, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_INCLUYE ::= incluirHK id fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_INCLUYE",7, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_ALS ::= L_ALS ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ALS ::= ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALS ::= Tals id VISIBILIDAD HEREDA llaveAbre CUERPO_ALS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HEREDA ::= hereda id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // HEREDA ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= dospuntos publico 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= dospuntos privado 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VISIBILIDAD ::= dospuntos protegido 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_ALS ::= DECLARACION_GLOBAL 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_ALS ::= METODO_INICIO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_ALS ::= METODOS_DEFINIDOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_GLOBAL ::= DECLARACION_GLOBAL L_GLOBALES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_GLOBAL ::= L_GLOBALES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_GLOBALES ::= var TIPO_DATO id VISIBILIDAD OPCION fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_GLOBALES",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_GLOBALES ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_GLOBALES",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPCION ::= coma L_VAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPCION ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARREGLO ::= ARREGLO L_DIMENSIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARREGLO ::= L_DIMENSIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_DIMENSIONES ::= corAbre EXP corCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_DIMENSIONES",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_DATO ::= Tentero 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_DATO ::= Tdecimal 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_DATO ::= Tcaracter 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_DATO ::= Tcadena 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DATO ::= Tbool 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_DATO ::= Tals 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DATO ::= Tvacio 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION_ARREGLO ::= igual POSICIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // POSICIONES ::= POSICIONES coma L_POS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("POSICIONES",25, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // POSICIONES ::= L_POS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("POSICIONES",25, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_POS ::= llaveAbre POSICIONES llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_POS",24, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_POS ::= EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_POS",24, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_VAR ::= L_VAR coma id VISIBILIDAD 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",14, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_VAR ::= id VISIBILIDAD 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",14, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // METODO_INICIO ::= Tvacio inicio parenAbre parenCierra SENTENCIAS llaveAbre llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_INICIO",27, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // METODOS_DEFINIDOS ::= METODOS_DEFINIDOS METODOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_DEFINIDOS",28, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // METODOS_DEFINIDOS ::= METODOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_DEFINIDOS",28, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METODOS ::= TIPO_DATO id parenAbre PARAMETROS parenCierra VISIBILIDAD llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",29, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMETROS ::= PARAMETROS coma TIPO_DATO id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMETROS ::= TIPO_DATO id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",30, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIAS ::= SENTENCIAS L_SENT 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIAS ::= L_SENT 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_SENT ::= DECLARACION_LOCAL fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_SENT ::= INSTANCIA_OBJETOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_SENT ::= LLAMAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_SENT ::= LLAMARHK 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_SENT ::= ASIGNA fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_SENT ::= RETORNA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // L_SENT ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // L_SENT ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_SENT ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_SENT ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_SENT ::= SENTENCIA_HMIENTRAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_SENT ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_SENT ::= TERMINAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_SENT ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IMPRIMIR ::= imprimir parenAbre EXP parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",50, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTINUAR ::= continuar fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",49, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TERMINAR ::= terminar fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_HMIENTRAS ::= hacer llaveAbre SENTENCIAS llaveCierra mientras parenAbre EXP parenAbre fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HMIENTRAS",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_MIENTRAS ::= mientras parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_PARA ::= para parenAbre ASIGNA_PARA CONDICION EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",38, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONDICION ::= EXP dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNA_PARA ::= DECLARACION_PARA dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",39, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNA_PARA ::= ASIGNA dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",39, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_PARA ::= var TIPO_DATO id igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",41, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_SELECCION ::= seleccion parenAbre EXP parenCierra llaveAbre CASOS DEFECTO llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASOS ::= CASOS L_CASO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",45, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASOS ::= L_CASO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",45, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEFECTO ::= defecto dospuntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",47, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // L_CASO ::= caso EXP dospuntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASO",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_SI ::= si parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra SENTENCIA_SINO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_SINO ::= sino llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_SINO ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RETORNA ::= retornar EXP fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNA",35, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD OPCION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION_LOCAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNA ::= id igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",17, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LLAMAR ::= llamar id parenAbre PARAM_LLAMA parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",32, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LLAMARHK ::= llamarHK id parenAbre PARAM_LLAMA parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK",33, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAM_LLAMA ::= PARAM_LLAMA coma EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",34, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAM_LLAMA ::= EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",34, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // INSTANCIA_OBJETOS ::= var id id igual nuevo id parenAbre parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA_OBJETOS",31, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP por EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP potencia EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP xor EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= not EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXP menorq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= EXP mayorq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= EXP menorigualq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= EXP mayorigualq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= EXP igualigual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXP incremento 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP decremento 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= menos EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= parenAbre EXP parenCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= num 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= cad 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= dec 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= carac 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= falso 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= verdadero 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Graphik_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Graphik_Sintactico$do_action(
    int                        CUP$Graphik_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Graphik_Sintactico$parser,
    java.util.Stack            CUP$Graphik_Sintactico$stack,
    int                        CUP$Graphik_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Graphik_Sintactico$do_action_part00000000(
                               CUP$Graphik_Sintactico$act_num,
                               CUP$Graphik_Sintactico$parser,
                               CUP$Graphik_Sintactico$stack,
                               CUP$Graphik_Sintactico$top);
    }
}

}
