
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Graphik_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosGraphik.class;
}

  /** Default constructor. */
  @Deprecated
  public Graphik_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Graphik_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Graphik_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\002\005\000\002\006" +
    "\004\000\002\006\003\000\002\007\005\000\002\010\004" +
    "\000\002\010\003\000\002\011\005\000\002\004\004\000" +
    "\002\004\003\000\002\005\011\000\002\015\004\000\002" +
    "\015\002\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\032\006\000\002\033\006\000\002\034" +
    "\011\000\002\035\007\000\002\036\007\000\002\016\004" +
    "\000\002\016\003\000\002\017\010\000\002\017\011\000" +
    "\002\026\004\000\002\026\003\000\002\026\002\000\002" +
    "\037\004\000\002\037\003\000\002\040\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\041\004\000\002\043\005\000\002\043\003\000\002" +
    "\042\005\000\002\042\003\000\002\021\004\000\002\020" +
    "\006\000\002\020\004\000\002\044\011\000\002\045\004" +
    "\000\002\045\003\000\002\046\013\000\002\047\006\000" +
    "\002\047\004\000\002\013\004\000\002\013\003\000\002" +
    "\014\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\024\007\000\002\073" +
    "\007\000\002\072\004\000\002\071\004\000\002\063\013" +
    "\000\002\064\011\000\002\057\013\000\002\061\004\000" +
    "\002\060\004\000\002\060\004\000\002\062\007\000\002" +
    "\065\012\000\002\066\004\000\002\066\003\000\002\070" +
    "\005\000\002\067\006\000\002\055\012\000\002\056\006" +
    "\000\002\056\002\000\002\054\005\000\002\022\007\000" +
    "\002\022\010\000\002\023\006\000\002\031\004\000\002" +
    "\031\002\000\002\051\010\000\002\052\010\000\002\053" +
    "\005\000\002\053\003\000\002\050\013\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\004\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\004\016\007\001\002\000\006\016\007\026" +
    "\014\001\002\000\006\016\ufffe\026\ufffe\001\002\000\004" +
    "\002\012\001\002\000\004\057\010\001\002\000\004\113" +
    "\011\001\002\000\006\016\ufffd\026\ufffd\001\002\000\004" +
    "\002\001\001\002\000\006\016\uffff\026\uffff\001\002\000" +
    "\004\051\u013a\001\002\000\006\012\ufffb\026\ufffb\001\002" +
    "\000\006\012\022\026\014\001\002\000\006\002\000\012" +
    "\022\001\002\000\006\002\ufff8\012\ufff8\001\002\000\006" +
    "\012\ufffc\026\ufffc\001\002\000\004\051\023\001\002\000" +
    "\010\017\ufff1\062\ufff1\110\025\001\002\000\006\017\032" +
    "\062\ufff5\001\002\000\010\013\026\014\027\015\030\001" +
    "\002\000\014\017\ufff2\062\ufff2\107\ufff2\112\ufff2\113\ufff2" +
    "\001\002\000\014\017\ufff3\062\ufff3\107\ufff3\112\ufff3\113" +
    "\ufff3\001\002\000\014\017\ufff4\062\ufff4\107\ufff4\112\ufff4" +
    "\113\ufff4\001\002\000\004\062\034\001\002\000\004\051" +
    "\033\001\002\000\004\062\ufff6\001\002\000\034\004\065" +
    "\005\040\006\062\007\042\010\046\011\061\012\054\020" +
    "\064\042\053\043\056\044\066\045\051\046\050\001\002" +
    "\000\006\020\uffe1\063\uffe1\001\002\000\004\063\uffec\001" +
    "\002\000\004\063\u0138\001\002\000\004\051\uffd7\001\002" +
    "\000\004\063\uffeb\001\002\000\004\051\uffd5\001\002\000" +
    "\022\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\063\uffc7\001\002\000\022\004\065\005\040\006" +
    "\062\007\042\010\046\011\151\012\054\063\uffed\001\002" +
    "\000\004\063\uffee\001\002\000\004\051\uffd4\001\002\000" +
    "\006\020\064\063\ufff0\001\002\000\004\064\u0132\001\002" +
    "\000\004\064\u012e\001\002\000\004\063\uffef\001\002\000" +
    "\004\064\u012b\001\002\000\004\051\uffd3\001\002\000\004" +
    "\063\uffe8\001\002\000\004\107\u0128\001\002\000\004\063" +
    "\uffe9\001\002\000\004\063\uffea\001\002\000\006\024\u0122" +
    "\051\uffd2\001\002\000\004\051\uffd6\001\002\000\004\051" +
    "\213\001\002\000\020\004\065\005\040\006\062\007\042" +
    "\010\046\011\151\012\054\001\002\000\004\051\uffd8\001" +
    "\002\000\004\064\067\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\060\061\uff7d\063\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\104\uff7d\105\uff7d\106\uff7d\110\uff7d\112\uff7d\113" +
    "\uff7d\001\002\000\026\050\073\051\070\052\076\053\072" +
    "\054\101\055\077\056\075\064\100\067\074\076\071\001" +
    "\002\000\060\061\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075" +
    "\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f" +
    "\105\uff7f\106\uff7f\110\uff7f\112\uff7f\113\uff7f\001\002\000" +
    "\060\061\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80" +
    "\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075\uff80\077" +
    "\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80" +
    "\106\uff80\110\uff80\112\uff80\113\uff80\001\002\000\026\050" +
    "\073\051\070\052\076\053\072\054\101\055\077\056\075" +
    "\064\100\067\074\076\071\001\002\000\060\061\uff7c\063" +
    "\uff7c\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c" +
    "\072\uff7c\073\uff7c\074\uff7c\075\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\110\uff7c" +
    "\112\uff7c\113\uff7c\001\002\000\060\061\uff81\063\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\105\uff81\106\uff81\110\uff81\112\uff81" +
    "\113\uff81\001\002\000\060\061\uff7b\063\uff7b\064\uff7b\065" +
    "\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\106\uff7b\110\uff7b\112\uff7b\113\uff7b" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\060\061\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067" +
    "\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e" +
    "\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105" +
    "\uff7e\106\uff7e\110\uff7e\112\uff7e\113\uff7e\001\002\000\044" +
    "\065\105\066\122\067\107\070\120\071\104\072\103\073" +
    "\106\074\110\075\111\077\123\100\112\101\121\102\117" +
    "\103\113\104\114\105\115\106\116\001\002\000\026\050" +
    "\073\051\070\052\076\053\072\054\101\055\077\056\075" +
    "\064\100\067\074\076\071\001\002\000\026\050\073\051" +
    "\070\052\076\053\072\054\101\055\077\056\075\064\100" +
    "\067\074\076\071\001\002\000\004\107\140\001\002\000" +
    "\026\050\073\051\070\052\076\053\072\054\101\055\077" +
    "\056\075\064\100\067\074\076\071\001\002\000\026\050" +
    "\073\051\070\052\076\053\072\054\101\055\077\056\075" +
    "\064\100\067\074\076\071\001\002\000\026\050\073\051" +
    "\070\052\076\053\072\054\101\055\077\056\075\064\100" +
    "\067\074\076\071\001\002\000\026\050\073\051\070\052" +
    "\076\053\072\054\101\055\077\056\075\064\100\067\074" +
    "\076\071\001\002\000\026\050\073\051\070\052\076\053" +
    "\072\054\101\055\077\056\075\064\100\067\074\076\071" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\026\050\073\051\070\052\076\053\072\054\101\055" +
    "\077\056\075\064\100\067\074\076\071\001\002\000\060" +
    "\061\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070" +
    "\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106" +
    "\uff85\110\uff85\112\uff85\113\uff85\001\002\000\060\061\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\072\uff84\073\uff84\074\uff84\075\uff84\077\uff84\100\uff84" +
    "\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\110" +
    "\uff84\112\uff84\113\uff84\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\026\050\073\051\070\052\076" +
    "\053\072\054\101\055\077\056\075\064\100\067\074\076" +
    "\071\001\002\000\026\050\073\051\070\052\076\053\072" +
    "\054\101\055\077\056\075\064\100\067\074\076\071\001" +
    "\002\000\026\050\073\051\070\052\076\053\072\054\101" +
    "\055\077\056\075\064\100\067\074\076\071\001\002\000" +
    "\026\050\073\051\070\052\076\053\072\054\101\055\077" +
    "\056\075\064\100\067\074\076\071\001\002\000\060\061" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\122\067\107\070\120" +
    "\071\104\072\103\073\uff8a\074\uff8a\075\uff8a\077\uff8a\100" +
    "\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\115\106\116" +
    "\110\uff8a\112\uff8a\113\uff8a\001\002\000\060\061\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\120\071\104" +
    "\072\103\073\uff94\074\uff94\075\uff94\077\uff94\100\uff94\101" +
    "\uff94\102\uff94\103\uff94\104\uff94\105\115\106\116\110\uff94" +
    "\112\uff94\113\uff94\001\002\000\060\061\uff88\063\uff88\064" +
    "\uff88\065\uff88\066\122\067\107\070\120\071\104\072\103" +
    "\073\uff88\074\uff88\075\uff88\077\uff88\100\uff88\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\115\106\116\110\uff88\112\uff88" +
    "\113\uff88\001\002\000\060\061\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\103\073\uff92" +
    "\074\uff92\075\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103" +
    "\uff92\104\uff92\105\115\106\116\110\uff92\112\uff92\113\uff92" +
    "\001\002\000\060\061\uff89\063\uff89\064\uff89\065\uff89\066" +
    "\122\067\107\070\120\071\104\072\103\073\uff89\074\uff89" +
    "\075\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\115\106\116\110\uff89\112\uff89\113\uff89\001\002" +
    "\000\060\061\uff86\063\uff86\064\uff86\065\uff86\066\122\067" +
    "\107\070\120\071\104\072\103\073\uff86\074\uff86\075\uff86" +
    "\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\115\106\116\110\uff86\112\uff86\113\uff86\001\002\000\060" +
    "\061\uff87\063\uff87\064\uff87\065\uff87\066\122\067\107\070" +
    "\120\071\104\072\103\073\uff87\074\uff87\075\uff87\077\uff87" +
    "\100\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\115\106" +
    "\116\110\uff87\112\uff87\113\uff87\001\002\000\060\061\uff8b" +
    "\063\uff8b\064\uff8b\065\uff8b\066\122\067\107\070\120\071" +
    "\104\072\103\073\uff8b\074\uff8b\075\uff8b\077\uff8b\100\uff8b" +
    "\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\115\106\116\110" +
    "\uff8b\112\uff8b\113\uff8b\001\002\000\060\061\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\122\067\107\070\120\071\104\072" +
    "\103\073\uff8e\074\110\075\uff8e\077\123\100\112\101\121" +
    "\102\117\103\113\104\114\105\115\106\116\110\uff8e\112" +
    "\uff8e\113\uff8e\001\002\000\060\061\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\122\067\107\070\120\071\104\072\103\073" +
    "\uff8d\074\uff8d\075\uff8d\077\123\100\112\101\121\102\117" +
    "\103\113\104\114\105\115\106\116\110\uff8d\112\uff8d\113" +
    "\uff8d\001\002\000\060\061\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\120\071\104\072\103\073\uff93\074" +
    "\uff93\075\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103\uff93" +
    "\104\uff93\105\115\106\116\110\uff93\112\uff93\113\uff93\001" +
    "\002\000\060\061\uff8f\063\uff8f\064\uff8f\065\uff8f\066\122" +
    "\067\107\070\120\071\104\072\103\073\uff8f\074\110\075" +
    "\111\077\123\100\112\101\121\102\117\103\113\104\114" +
    "\105\115\106\116\110\uff8f\112\uff8f\113\uff8f\001\002\000" +
    "\026\050\073\051\070\052\076\053\072\054\101\055\077" +
    "\056\075\064\100\067\074\076\071\001\002\000\044\066" +
    "\122\067\107\070\120\071\104\072\103\073\106\074\110" +
    "\075\111\077\123\100\112\101\121\102\117\103\113\104" +
    "\114\105\115\106\116\113\142\001\002\000\004\063\uffe5" +
    "\001\002\000\060\061\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\103\073\uff91\074\uff91" +
    "\075\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\105\115\106\116\110\uff91\112\uff91\113\uff91\001\002" +
    "\000\060\061\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\103\073\uff90\074\uff90\075\uff90" +
    "\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\105" +
    "\115\106\116\110\uff90\112\uff90\113\uff90\001\002\000\044" +
    "\065\146\066\122\067\107\070\120\071\104\072\103\073" +
    "\106\074\110\075\111\077\123\100\112\101\121\102\117" +
    "\103\113\104\114\105\115\106\116\001\002\000\060\061" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\077\uff82\100" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106\uff82" +
    "\110\uff82\112\uff82\113\uff82\001\002\000\060\061\uff83\063" +
    "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\120\071\104" +
    "\072\103\073\uff83\074\uff83\075\uff83\077\uff83\100\uff83\101" +
    "\uff83\102\uff83\103\uff83\104\uff83\105\115\106\116\110\uff83" +
    "\112\uff83\113\uff83\001\002\000\060\061\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\066\122\067\107\070\120\071\104\072\103" +
    "\073\uff8c\074\uff8c\075\uff8c\077\123\100\112\101\121\102" +
    "\117\103\113\104\114\105\115\106\116\110\uff8c\112\uff8c" +
    "\113\uff8c\001\002\000\004\051\uffd2\001\002\000\004\051" +
    "\153\001\002\000\014\060\156\107\ufff1\110\025\112\ufff1" +
    "\113\ufff1\001\002\000\010\060\uffda\107\uffda\110\uffda\001" +
    "\002\000\010\107\201\112\202\113\uffdc\001\002\000\026" +
    "\050\073\051\070\052\076\053\072\054\101\055\077\056" +
    "\075\064\100\067\074\076\071\001\002\000\010\060\156" +
    "\107\ufff1\110\025\001\002\000\010\060\uffdb\107\uffdb\110" +
    "\uffdb\001\002\000\004\107\162\001\002\000\030\050\073" +
    "\051\070\052\076\053\072\054\101\055\077\056\075\062" +
    "\166\064\100\067\074\076\071\001\002\000\004\113\164" +
    "\001\002\000\006\020\uffdf\063\uffdf\001\002\000\006\112" +
    "\172\113\uffd1\001\002\000\030\050\073\051\070\052\076" +
    "\053\072\054\101\055\077\056\075\062\166\064\100\067" +
    "\074\076\071\001\002\000\050\063\uffcd\066\122\067\107" +
    "\070\120\071\104\072\103\073\106\074\110\075\111\077" +
    "\123\100\112\101\121\102\117\103\113\104\114\105\115" +
    "\106\116\112\uffcd\113\uffcd\001\002\000\010\063\uffcf\112" +
    "\uffcf\113\uffcf\001\002\000\006\063\173\112\172\001\002" +
    "\000\030\050\073\051\070\052\076\053\072\054\101\055" +
    "\077\056\075\062\166\064\100\067\074\076\071\001\002" +
    "\000\010\063\uffce\112\uffce\113\uffce\001\002\000\010\063" +
    "\uffd0\112\uffd0\113\uffd0\001\002\000\044\061\176\066\122" +
    "\067\107\070\120\071\104\072\103\073\106\074\110\075" +
    "\111\077\123\100\112\101\121\102\117\103\113\104\114" +
    "\105\115\106\116\001\002\000\010\060\uffd9\107\uffd9\110" +
    "\uffd9\001\002\000\004\113\212\001\002\000\004\113\uffdd" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\004\051\204\001\002\000\006\112\206\113\uffde\001" +
    "\002\000\010\110\025\112\ufff1\113\ufff1\001\002\000\006" +
    "\112\uffca\113\uffca\001\002\000\004\051\207\001\002\000" +
    "\010\110\025\112\ufff1\113\ufff1\001\002\000\006\112\uffcb" +
    "\113\uffcb\001\002\000\044\066\122\067\107\070\120\071" +
    "\104\072\103\073\106\074\110\075\111\077\123\100\112" +
    "\101\121\102\117\103\113\104\114\105\115\106\116\113" +
    "\uffcc\001\002\000\006\020\uffe0\063\uffe0\001\002\000\004" +
    "\064\214\001\002\000\020\004\065\005\040\006\062\007" +
    "\042\010\046\011\151\012\054\001\002\000\004\051\u0121" +
    "\001\002\000\006\065\220\112\217\001\002\000\020\004" +
    "\065\005\040\006\062\007\042\010\046\011\151\012\054" +
    "\001\002\000\006\062\ufff1\110\025\001\002\000\004\062" +
    "\222\001\002\000\036\020\256\022\243\023\227\025\241" +
    "\027\223\030\261\031\240\035\225\036\231\037\236\040" +
    "\250\041\253\047\230\051\245\001\002\000\004\064\u011b" +
    "\001\002\000\046\020\uffc2\022\uffc2\023\uffc2\025\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\047\uffc2\051\uffc2\062\uffc2\063" +
    "\uffc2\001\002\000\004\064\u0108\001\002\000\046\020\uffc0" +
    "\022\uffc0\023\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\047\uffc0\051\uffc0\062\uffc0\063\uffc0\001\002\000\004\051" +
    "\u0103\001\002\000\004\064\377\001\002\000\004\064\371" +
    "\001\002\000\040\020\256\022\243\023\227\025\241\027" +
    "\223\030\261\031\240\035\225\036\231\037\236\040\250" +
    "\041\253\047\230\051\245\063\370\001\002\000\046\020" +
    "\uffb8\022\uffb8\023\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\047\uffb8\051\uffb8\062\uffb8\063\uffb8\001\002\000\046" +
    "\020\uffb4\022\uffb4\023\uffb4\025\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4" +
    "\041\uffb4\047\uffb4\051\uffb4\062\uffb4\063\uffb4\001\002\000" +
    "\046\020\uffbe\022\uffbe\023\uffbe\025\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\047\uffbe\051\uffbe\062\uffbe\063\uffbe\001\002" +
    "\000\004\062\360\001\002\000\046\020\uffb5\022\uffb5\023" +
    "\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\047\uffb5\051" +
    "\uffb5\062\uffb5\063\uffb5\001\002\000\004\064\340\001\002" +
    "\000\004\051\330\001\002\000\046\020\uffb7\022\uffb7\023" +
    "\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\047\uffb7\051" +
    "\uffb7\062\uffb7\063\uffb7\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\046\020\uffb9\022\uffb9\023\uffb9" +
    "\025\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\047\uffb9\051\uffb9" +
    "\062\uffb9\063\uffb9\001\002\000\006\107\uff9a\111\321\001" +
    "\002\000\046\020\uffbc\022\uffbc\023\uffbc\025\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\047\uffbc\051\uffbc\062\uffbc\063\uffbc" +
    "\001\002\000\046\020\uffba\022\uffba\023\uffba\025\uffba\027" +
    "\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\047\uffba\051\uffba\062\uffba\063" +
    "\uffba\001\002\000\004\113\320\001\002\000\046\020\uffbf" +
    "\022\uffbf\023\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\047\uffbf\051\uffbf\062\uffbf\063\uffbf\001\002\000\046\020" +
    "\uffbb\022\uffbb\023\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\047\uffbb\051\uffbb\062\uffbb\063\uffbb\001\002\000\004" +
    "\113\317\001\002\000\046\020\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\047\uffb3\051\uffb3\062" +
    "\uffb3\063\uffb3\001\002\000\004\113\316\001\002\000\022" +
    "\004\065\005\040\006\062\007\042\010\046\011\151\012" +
    "\054\051\277\001\002\000\046\020\uffb6\022\uffb6\023\uffb6" +
    "\025\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\047\uffb6\051\uffb6" +
    "\062\uffb6\063\uffb6\001\002\000\004\113\276\001\002\000" +
    "\004\064\262\001\002\000\026\050\073\051\070\052\076" +
    "\053\072\054\101\055\077\056\075\064\100\067\074\076" +
    "\071\001\002\000\044\065\264\066\122\067\107\070\120" +
    "\071\104\072\103\073\106\074\110\075\111\077\123\100" +
    "\112\101\121\102\117\103\113\104\114\105\115\106\116" +
    "\001\002\000\004\062\265\001\002\000\036\020\256\022" +
    "\243\023\227\025\241\027\223\030\261\031\240\035\225" +
    "\036\231\037\236\040\250\041\253\047\230\051\245\001" +
    "\002\000\040\020\256\022\243\023\227\025\241\027\223" +
    "\030\261\031\240\035\225\036\231\037\236\040\250\041" +
    "\253\047\230\051\245\063\270\001\002\000\046\020\uffc3" +
    "\022\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\047\uffc3\051\uffc3\062\uffc3\063\uffc3\001\002\000\050\020" +
    "\uffa0\022\uffa0\023\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\032\271\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\047\uffa0\051\uffa0\062\uffa0\063\uffa0\001\002" +
    "\000\004\062\273\001\002\000\046\020\uffa2\022\uffa2\023" +
    "\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\047\uffa2\051" +
    "\uffa2\062\uffa2\063\uffa2\001\002\000\036\020\256\022\243" +
    "\023\227\025\241\027\223\030\261\031\240\035\225\036" +
    "\231\037\236\040\250\041\253\047\230\051\245\001\002" +
    "\000\040\020\256\022\243\023\227\025\241\027\223\030" +
    "\261\031\240\035\225\036\231\037\236\040\250\041\253" +
    "\047\230\051\245\063\275\001\002\000\046\020\uffa1\022" +
    "\uffa1\023\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\047" +
    "\uffa1\051\uffa1\062\uffa1\063\uffa1\001\002\000\046\020\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\047\uffc1\051\uffc1\062\uffc1\063\uffc1\001\002\000\004\051" +
    "\307\001\002\000\004\051\301\001\002\000\014\060\156" +
    "\107\ufff1\110\025\112\ufff1\113\ufff1\001\002\000\010\107" +
    "\201\112\202\113\uffdc\001\002\000\010\060\156\107\ufff1" +
    "\110\025\001\002\000\004\107\162\001\002\000\004\113" +
    "\uff9d\001\002\000\004\113\uff9e\001\002\000\004\107\310" +
    "\001\002\000\004\021\311\001\002\000\004\051\312\001" +
    "\002\000\004\064\313\001\002\000\004\065\314\001\002" +
    "\000\004\113\315\001\002\000\046\020\uff95\022\uff95\023" +
    "\uff95\025\uff95\027\uff95\030\uff95\031\uff95\033\uff95\034\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\047\uff95\051" +
    "\uff95\062\uff95\063\uff95\001\002\000\046\020\uffbd\022\uffbd" +
    "\023\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\047\uffbd" +
    "\051\uffbd\062\uffbd\063\uffbd\001\002\000\046\020\uffaf\022" +
    "\uffaf\023\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\047" +
    "\uffaf\051\uffaf\062\uffaf\063\uffaf\001\002\000\046\020\uffb0" +
    "\022\uffb0\023\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\047\uffb0\051\uffb0\062\uffb0\063\uffb0\001\002\000\004\051" +
    "\325\001\002\000\004\107\323\001\002\000\026\050\073" +
    "\051\070\052\076\053\072\054\101\055\077\056\075\064" +
    "\100\067\074\076\071\001\002\000\046\066\122\067\107" +
    "\070\120\071\104\072\103\073\106\074\110\075\111\077" +
    "\123\100\112\101\121\102\117\103\113\104\114\105\115" +
    "\106\116\110\uff9c\113\uff9c\001\002\000\004\107\uff9b\001" +
    "\002\000\044\066\122\067\107\070\120\071\104\072\103" +
    "\073\106\074\110\075\111\077\123\100\112\101\121\102" +
    "\117\103\113\104\114\105\115\106\116\113\327\001\002" +
    "\000\046\020\uff9f\022\uff9f\023\uff9f\025\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\047\uff9f\051\uff9f\062\uff9f\063\uff9f\001" +
    "\002\000\004\064\331\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\006\065\335\112\334\001\002" +
    "\000\046\065\uff96\066\122\067\107\070\120\071\104\072" +
    "\103\073\106\074\110\075\111\077\123\100\112\101\121" +
    "\102\117\103\113\104\114\105\115\106\116\112\uff96\001" +
    "\002\000\026\050\073\051\070\052\076\053\072\054\101" +
    "\055\077\056\075\064\100\067\074\076\071\001\002\000" +
    "\004\113\336\001\002\000\046\020\uff98\022\uff98\023\uff98" +
    "\025\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\047\uff98\051\uff98" +
    "\062\uff98\063\uff98\001\002\000\046\065\uff97\066\122\067" +
    "\107\070\120\071\104\072\103\073\106\074\110\075\111" +
    "\077\123\100\112\101\121\102\117\103\113\104\114\105" +
    "\115\106\116\112\uff97\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\044\065\342\066\122\067\107" +
    "\070\120\071\104\072\103\073\106\074\110\075\111\077" +
    "\123\100\112\101\121\102\117\103\113\104\114\105\115" +
    "\106\116\001\002\000\004\062\343\001\002\000\004\033" +
    "\346\001\002\000\006\033\uffa5\034\uffa5\001\002\000\006" +
    "\033\346\034\354\001\002\000\026\050\073\051\070\052" +
    "\076\053\072\054\101\055\077\056\075\064\100\067\074" +
    "\076\071\001\002\000\044\066\122\067\107\070\120\071" +
    "\104\072\103\073\106\074\110\075\111\077\123\100\112" +
    "\101\121\102\117\103\113\104\114\105\115\106\116\110" +
    "\350\001\002\000\036\020\256\022\243\023\227\025\241" +
    "\027\223\030\261\031\240\035\225\036\231\037\236\040" +
    "\250\041\253\047\230\051\245\001\002\000\042\020\256" +
    "\022\243\023\227\025\241\027\223\030\261\031\240\033" +
    "\uffa3\034\uffa3\035\225\036\231\037\236\040\250\041\253" +
    "\047\230\051\245\001\002\000\006\033\uffa6\034\uffa6\001" +
    "\002\000\004\063\357\001\002\000\004\110\355\001\002" +
    "\000\036\020\256\022\243\023\227\025\241\027\223\030" +
    "\261\031\240\035\225\036\231\037\236\040\250\041\253" +
    "\047\230\051\245\001\002\000\040\020\256\022\243\023" +
    "\227\025\241\027\223\030\261\031\240\035\225\036\231" +
    "\037\236\040\250\041\253\047\230\051\245\063\uffa4\001" +
    "\002\000\046\020\uffa7\022\uffa7\023\uffa7\025\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\047\uffa7\051\uffa7\062\uffa7\063\uffa7" +
    "\001\002\000\036\020\256\022\243\023\227\025\241\027" +
    "\223\030\261\031\240\035\225\036\231\037\236\040\250" +
    "\041\253\047\230\051\245\001\002\000\040\020\256\022" +
    "\243\023\227\025\241\027\223\030\261\031\240\035\225" +
    "\036\231\037\236\040\250\041\253\047\230\051\245\063" +
    "\362\001\002\000\004\036\363\001\002\000\004\064\364" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\044\064\366\066\122\067\107\070\120\071\104\072" +
    "\103\073\106\074\110\075\111\077\123\100\112\101\121" +
    "\102\117\103\113\104\114\105\115\106\116\001\002\000" +
    "\004\113\367\001\002\000\046\020\uffae\022\uffae\023\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\040\uffae\041\uffae\047\uffae\051\uffae" +
    "\062\uffae\063\uffae\001\002\000\022\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\063\uffc6\001\002" +
    "\000\026\050\073\051\070\052\076\053\072\054\101\055" +
    "\077\056\075\064\100\067\074\076\071\001\002\000\044" +
    "\065\373\066\122\067\107\070\120\071\104\072\103\073" +
    "\106\074\110\075\111\077\123\100\112\101\121\102\117" +
    "\103\113\104\114\105\115\106\116\001\002\000\004\062" +
    "\374\001\002\000\036\020\256\022\243\023\227\025\241" +
    "\027\223\030\261\031\240\035\225\036\231\037\236\040" +
    "\250\041\253\047\230\051\245\001\002\000\040\020\256" +
    "\022\243\023\227\025\241\027\223\030\261\031\240\035" +
    "\225\036\231\037\236\040\250\041\253\047\230\051\245" +
    "\063\376\001\002\000\046\020\uffad\022\uffad\023\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\047\uffad\051\uffad\062" +
    "\uffad\063\uffad\001\002\000\026\050\073\051\070\052\076" +
    "\053\072\054\101\055\077\056\075\064\100\067\074\076" +
    "\071\001\002\000\044\065\u0101\066\122\067\107\070\120" +
    "\071\104\072\103\073\106\074\110\075\111\077\123\100" +
    "\112\101\121\102\117\103\113\104\114\105\115\106\116" +
    "\001\002\000\004\113\u0102\001\002\000\046\020\uffb1\022" +
    "\uffb1\023\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\047" +
    "\uffb1\051\uffb1\062\uffb1\063\uffb1\001\002\000\004\064\u0104" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\006\065\u0106\112\334\001\002\000\004\113\u0107\001" +
    "\002\000\046\020\uff99\022\uff99\023\uff99\025\uff99\027\uff99" +
    "\030\uff99\031\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\047\uff99\051\uff99\062\uff99\063\uff99" +
    "\001\002\000\006\020\u0109\051\245\001\002\000\020\004" +
    "\065\005\040\006\062\007\042\010\046\011\151\012\054" +
    "\001\002\000\026\050\073\051\070\052\076\053\072\054" +
    "\101\055\077\056\075\064\100\067\074\076\071\001\002" +
    "\000\004\110\u010e\001\002\000\004\110\u010d\001\002\000" +
    "\026\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\064\uffaa\067\uffaa\076\uffaa\001\002\000\026\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\064\uffa9\067\uffa9\076\uffa9\001\002\000\044\066\122\067" +
    "\107\070\120\071\104\072\103\073\106\074\110\075\111" +
    "\077\123\100\112\101\121\102\117\103\113\104\114\105" +
    "\115\106\116\110\u0116\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\044\065\u0112\066\122\067\107" +
    "\070\120\071\104\072\103\073\106\074\110\075\111\077" +
    "\123\100\112\101\121\102\117\103\113\104\114\105\115" +
    "\106\116\001\002\000\004\062\u0113\001\002\000\036\020" +
    "\256\022\243\023\227\025\241\027\223\030\261\031\240" +
    "\035\225\036\231\037\236\040\250\041\253\047\230\051" +
    "\245\001\002\000\040\020\256\022\243\023\227\025\241" +
    "\027\223\030\261\031\240\035\225\036\231\037\236\040" +
    "\250\041\253\047\230\051\245\063\u0115\001\002\000\046" +
    "\020\uffac\022\uffac\023\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\047\uffac\051\uffac\062\uffac\063\uffac\001\002\000" +
    "\026\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\064\uffab\067\uffab\076\uffab\001\002\000\004\051" +
    "\u0118\001\002\000\004\107\u0119\001\002\000\026\050\073" +
    "\051\070\052\076\053\072\054\101\055\077\056\075\064" +
    "\100\067\074\076\071\001\002\000\044\066\122\067\107" +
    "\070\120\071\104\072\103\073\106\074\110\075\111\077" +
    "\123\100\112\101\121\102\117\103\113\104\114\105\115" +
    "\106\116\110\uffa8\001\002\000\004\051\u011c\001\002\000" +
    "\004\065\u011d\001\002\000\004\113\u011e\001\002\000\046" +
    "\020\uffb2\022\uffb2\023\uffb2\025\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\047\uffb2\051\uffb2\062\uffb2\063\uffb2\001\002\000" +
    "\004\051\u0120\001\002\000\006\065\uffc5\112\uffc5\001\002" +
    "\000\006\065\uffc4\112\uffc4\001\002\000\004\064\u0123\001" +
    "\002\000\004\065\u0124\001\002\000\036\020\256\022\243" +
    "\023\227\025\241\027\223\030\261\031\240\035\225\036" +
    "\231\037\236\040\250\041\253\047\230\051\245\001\002" +
    "\000\040\020\256\022\243\023\227\025\241\027\223\030" +
    "\261\031\240\035\225\036\231\037\236\040\250\041\253" +
    "\047\230\051\245\062\u0126\001\002\000\004\063\u0127\001" +
    "\002\000\004\063\uffc9\001\002\000\026\050\073\051\070" +
    "\052\076\053\072\054\101\055\077\056\075\064\100\067" +
    "\074\076\071\001\002\000\044\066\122\067\107\070\120" +
    "\071\104\072\103\073\106\074\110\075\111\077\123\100" +
    "\112\101\121\102\117\103\113\104\114\105\115\106\116" +
    "\113\u012a\001\002\000\004\063\uffe6\001\002\000\026\050" +
    "\073\051\070\052\076\053\072\054\101\055\077\056\075" +
    "\064\100\067\074\076\071\001\002\000\044\065\u012d\066" +
    "\122\067\107\070\120\071\104\072\103\073\106\074\110" +
    "\075\111\077\123\100\112\101\121\102\117\103\113\104" +
    "\114\105\115\106\116\001\002\000\004\063\uffe7\001\002" +
    "\000\026\050\073\051\070\052\076\053\072\054\101\055" +
    "\077\056\075\064\100\067\074\076\071\001\002\000\044" +
    "\065\u0130\066\122\067\107\070\120\071\104\072\103\073" +
    "\106\074\110\075\111\077\123\100\112\101\121\102\117" +
    "\103\113\104\114\105\115\106\116\001\002\000\004\113" +
    "\u0131\001\002\000\004\063\uffe4\001\002\000\026\050\073" +
    "\051\070\052\076\053\072\054\101\055\077\056\075\064" +
    "\100\067\074\076\071\001\002\000\044\065\u0134\066\122" +
    "\067\107\070\120\071\104\072\103\073\106\074\110\075" +
    "\111\077\123\100\112\101\121\102\117\103\113\104\114" +
    "\105\115\106\116\001\002\000\004\113\u0135\001\002\000" +
    "\004\063\uffe3\001\002\000\006\020\uffe2\063\uffe2\001\002" +
    "\000\022\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\063\uffc8\001\002\000\006\002\ufff7\012\ufff7" +
    "\001\002\000\006\002\ufff9\012\ufff9\001\002\000\004\113" +
    "\u013b\001\002\000\006\012\ufffa\026\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\010\002\005\006\003\007\004\001\001\000" +
    "\010\007\012\010\015\011\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\016\005\017\011" +
    "\020\001\001\000\004\005\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\023\001" +
    "\001\000\004\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\036" +
    "\016\046\017\034\025\062\030\044\032\035\033\040\034" +
    "\057\035\056\036\054\044\051\045\043\046\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\062\046\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\101\001" +
    "\001\000\002\001\001\000\004\027\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\143\001\001\000\004\027\142\001\001\000\002" +
    "\001\001\000\004\027\136\001\001\000\004\027\135\001" +
    "\001\000\004\027\134\001\001\000\004\027\133\001\001" +
    "\000\004\027\132\001\001\000\004\027\131\001\001\000" +
    "\004\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\127\001\001\000\004\027\126\001\001\000" +
    "\004\027\125\001\001\000\004\027\124\001\001\000\004" +
    "\027\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\154\037\156" +
    "\040\153\001\001\000\002\001\001\000\006\021\177\026" +
    "\176\001\001\000\004\027\174\001\001\000\006\012\160" +
    "\040\157\001\001\000\002\001\001\000\004\041\162\001" +
    "\001\000\010\027\166\042\167\043\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\166\042\167\043\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\166\042\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\210\001\001\000\004\020\202\001\001\000\002" +
    "\001\001\000\004\012\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\214\047\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u011e\001\001\000\004\012\220\001" +
    "\001\000\002\001\001\000\044\013\231\014\223\022\257" +
    "\023\254\024\253\050\225\051\250\052\234\054\245\055" +
    "\251\057\243\063\241\064\232\065\246\071\236\072\256" +
    "\073\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\266\022\257\023" +
    "\254\024\253\050\225\051\250\052\234\054\245\055\251" +
    "\057\243\063\241\064\232\065\246\071\236\072\256\073" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\325" +
    "\001\001\000\002\001\001\000\004\031\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\013\265\014\223\022\257\023\254\024\253\050\225\051" +
    "\250\052\234\054\245\055\251\057\243\063\241\064\232" +
    "\065\246\071\236\072\256\073\233\001\001\000\042\014" +
    "\266\022\257\023\254\024\253\050\225\051\250\052\234" +
    "\054\245\055\251\057\243\063\241\064\232\065\246\071" +
    "\236\072\256\073\233\001\001\000\002\001\001\000\004" +
    "\056\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\013\273\014\223\022\257\023\254\024\253\050\225" +
    "\051\250\052\234\054\245\055\251\057\243\063\241\064" +
    "\232\065\246\071\236\072\256\073\233\001\001\000\042" +
    "\014\266\022\257\023\254\024\253\050\225\051\250\052" +
    "\234\054\245\055\251\057\243\063\241\064\232\065\246" +
    "\071\236\072\256\073\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\301\037\302\040\153\001\001\000\006\021\177\026" +
    "\305\001\001\000\006\012\303\040\157\001\001\000\004" +
    "\041\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\332\053" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\066\344\067\343\001\001\000" +
    "\002\001\001\000\006\067\351\070\352\001\001\000\004" +
    "\027\346\001\001\000\002\001\001\000\044\013\350\014" +
    "\223\022\257\023\254\024\253\050\225\051\250\052\234" +
    "\054\245\055\251\057\243\063\241\064\232\065\246\071" +
    "\236\072\256\073\233\001\001\000\042\014\266\022\257" +
    "\023\254\024\253\050\225\051\250\052\234\054\245\055" +
    "\251\057\243\063\241\064\232\065\246\071\236\072\256" +
    "\073\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\355\014\223\022\257\023\254" +
    "\024\253\050\225\051\250\052\234\054\245\055\251\057" +
    "\243\063\241\064\232\065\246\071\236\072\256\073\233" +
    "\001\001\000\042\014\266\022\257\023\254\024\253\050" +
    "\225\051\250\052\234\054\245\055\251\057\243\063\241" +
    "\064\232\065\246\071\236\072\256\073\233\001\001\000" +
    "\002\001\001\000\044\013\360\014\223\022\257\023\254" +
    "\024\253\050\225\051\250\052\234\054\245\055\251\057" +
    "\243\063\241\064\232\065\246\071\236\072\256\073\233" +
    "\001\001\000\042\014\266\022\257\023\254\024\253\050" +
    "\225\051\250\052\234\054\245\055\251\057\243\063\241" +
    "\064\232\065\246\071\236\072\256\073\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\013\374\014\223\022\257\023" +
    "\254\024\253\050\225\051\250\052\234\054\245\055\251" +
    "\057\243\063\241\064\232\065\246\071\236\072\256\073" +
    "\233\001\001\000\042\014\266\022\257\023\254\024\253" +
    "\050\225\051\250\052\234\054\245\055\251\057\243\063" +
    "\241\064\232\065\246\071\236\072\256\073\233\001\001" +
    "\000\002\001\001\000\004\027\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\332\053\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\u010a\060\u0109" +
    "\062\u010b\001\001\000\004\025\u0116\001\001\000\006\027" +
    "\u010e\061\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\u0113\014\223\022\257\023\254\024\253\050" +
    "\225\051\250\052\234\054\245\055\251\057\243\063\241" +
    "\064\232\065\246\071\236\072\256\073\233\001\001\000" +
    "\042\014\266\022\257\023\254\024\253\050\225\051\250" +
    "\052\234\054\245\055\251\057\243\063\241\064\232\065" +
    "\246\071\236\072\256\073\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\013\u0124\014\223\022" +
    "\257\023\254\024\253\050\225\051\250\052\234\054\245" +
    "\055\251\057\243\063\241\064\232\065\246\071\236\072" +
    "\256\073\233\001\001\000\042\014\266\022\257\023\254" +
    "\024\253\050\225\051\250\052\234\054\245\055\251\057" +
    "\243\063\241\064\232\065\246\071\236\072\256\073\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u012e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Graphik_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Graphik_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Graphik_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Errores> Err = new LinkedList<Errores>();
    
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        Errores err = new Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Errores err = new Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Graphik_Sintactico$actions {



  private final Graphik_Sintactico parser;

  /** Constructor */
  CUP$Graphik_Sintactico$actions(Graphik_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Graphik_Sintactico$do_action_part00000000(
    int                        CUP$Graphik_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Graphik_Sintactico$parser,
    java.util.Stack            CUP$Graphik_Sintactico$stack,
    int                        CUP$Graphik_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Graphik_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Graphik_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Graphik_Sintactico$parser.done_parsing();
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES INCLUYE_HK L_ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACIONES L_IMPORTACIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",4, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= L_IMPORTACIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",4, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_IMPORTACIONES ::= importar nombreArchivo fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_IMPORTACIONES",5, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INCLUYE_HK ::= INCLUYE_HK L_INCLUYE 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",6, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INCLUYE_HK ::= L_INCLUYE 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUYE_HK",6, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_INCLUYE ::= incluirHK id fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_INCLUYE",7, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_ALS ::= L_ALS ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ALS ::= ALS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ALS",2, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ALS ::= Tals id VISIBILIDAD HEREDA llaveAbre CUERPO_ALS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",3, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // HEREDA ::= hereda id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // HEREDA ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("HEREDA",11, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= dospuntos publico 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= dospuntos privado 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VISIBILIDAD ::= dospuntos protegido 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",8, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_ALS ::= DECLARACION_GLOBAL 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_ALS ::= METODO_INICIO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_ALS ::= DATOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_ALS ::= METODOS_DEFINIDOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ALS",1, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DATOS ::= COLUMNA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DATOS ::= PROCESAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DATOS ::= DONDE 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DATOS ::= DONDECADA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DATOS ::= DONDETODO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COLUMNA ::= columna parenAbre EXP parenCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",24, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROCESAR ::= procesar igual EXP fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PROCESAR",25, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DONDE ::= donde parenAbre EXP parenCierra igual EXP fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDE",26, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DONDECADA ::= dondecada parenAbre EXP parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDECADA",27, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DONDETODO ::= dondetodo parenAbre EXP parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DONDETODO",28, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_GLOBAL ::= DECLARACION_GLOBAL L_GLOBALES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_GLOBAL ::= L_GLOBALES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOBAL",12, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_GLOBALES ::= var TIPO_DATO id VISIBILIDAD OPCION fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_GLOBALES",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_GLOBALES ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_GLOBALES",13, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPCION ::= coma L_VAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPCION ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("OPCION",20, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARREGLO ::= ARREGLO L_DIMENSIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARREGLO ::= L_DIMENSIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",29, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // L_DIMENSIONES ::= corAbre EXP corCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_DIMENSIONES",30, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_DATO ::= Tentero 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_DATO ::= Tdecimal 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_DATO ::= Tcaracter 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_DATO ::= Tcadena 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_DATO ::= Tbool 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_DATO ::= Tals 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_DATO ::= Tvacio 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",19, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION_ARREGLO ::= igual POSICIONES 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_ARREGLO",31, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // POSICIONES ::= POSICIONES coma L_POS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("POSICIONES",33, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // POSICIONES ::= L_POS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("POSICIONES",33, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_POS ::= llaveAbre POSICIONES llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_POS",32, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_POS ::= EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_POS",32, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",15, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_VAR ::= L_VAR coma id VISIBILIDAD 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",14, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_VAR ::= id VISIBILIDAD 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_VAR",14, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // METODO_INICIO ::= Tvacio inicio parenAbre parenCierra SENTENCIAS llaveAbre llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODO_INICIO",34, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // METODOS_DEFINIDOS ::= METODOS_DEFINIDOS METODOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_DEFINIDOS",35, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // METODOS_DEFINIDOS ::= METODOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS_DEFINIDOS",35, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // METODOS ::= TIPO_DATO id parenAbre PARAMETROS parenCierra VISIBILIDAD llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("METODOS",36, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMETROS ::= PARAMETROS coma TIPO_DATO id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARAMETROS ::= TIPO_DATO id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",37, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIAS ::= SENTENCIAS L_SENT 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIAS ::= L_SENT 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",9, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_SENT ::= DECLARACION_LOCAL fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_SENT ::= INSTANCIA_OBJETOS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_SENT ::= LLAMAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_SENT ::= LLAMARHK 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_SENT ::= ASIGNA fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_SENT ::= RETORNA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // L_SENT ::= SENTENCIA_SI 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // L_SENT ::= SENTENCIA_SELECCION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_SENT ::= SENTENCIA_PARA 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_SENT ::= SENTENCIA_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // L_SENT ::= SENTENCIA_HMIENTRAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // L_SENT ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // L_SENT ::= TERMINAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // L_SENT ::= IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // L_SENT ::= GRAPHIKAR 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_SENT",10, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GRAPHIKAR ::= graphikar parenAbre id parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("GRAPHIKAR",18, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IMPRIMIR ::= imprimir parenAbre EXP parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",57, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTINUAR ::= continuar fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",56, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TERMINAR ::= terminar fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR",55, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_HMIENTRAS ::= hacer llaveAbre SENTENCIAS llaveCierra mientras parenAbre EXP parenAbre fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_HMIENTRAS",49, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_MIENTRAS ::= mientras parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MIENTRAS",50, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_PARA ::= para parenAbre ASIGNA_PARA CONDICION EXP parenCierra llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARA",45, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= EXP dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",47, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNA_PARA ::= DECLARACION_PARA dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNA_PARA ::= ASIGNA dospuntos 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA_PARA",46, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION_PARA ::= var TIPO_DATO id igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARA",48, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_SELECCION ::= seleccion parenAbre EXP parenCierra llaveAbre CASOS DEFECTO llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCION",51, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASOS ::= CASOS L_CASO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",52, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASOS ::= L_CASO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",52, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEFECTO ::= defecto dospuntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",54, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_CASO ::= caso EXP dospuntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("L_CASO",53, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_SI ::= si parenAbre EXP parenCierra llaveAbre SENTENCIAS llaveCierra SENTENCIA_SINO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",43, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_SINO ::= sino llaveAbre SENTENCIAS llaveCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_SINO ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",44, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RETORNA ::= retornar EXP fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNA",42, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION_LOCAL ::= var TIPO_DATO id VISIBILIDAD OPCION 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_LOCAL ::= var TIPO_DATO id ARREGLO VISIBILIDAD ASIGNACION_ARREGLO 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LOCAL",16, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNA ::= id ATRIBUTO igual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNA",17, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATRIBUTO ::= punto id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",23, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATRIBUTO ::= 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO",23, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LLAMAR ::= llamar id parenAbre PARAM_LLAMA parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR",39, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LLAMARHK ::= llamarHK id parenAbre PARAM_LLAMA parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK",40, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAM_LLAMA ::= PARAM_LLAMA coma EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",41, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PARAM_LLAMA ::= EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("PARAM_LLAMA",41, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INSTANCIA_OBJETOS ::= var id id igual nuevo id parenAbre parenCierra fin 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("INSTANCIA_OBJETOS",38, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= EXP por EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= EXP potencia EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP xor EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP ::= not EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP ::= EXP menorq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= EXP mayorq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= EXP menorigualq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= EXP mayorigualq EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= EXP igualigual EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= EXP incremento 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= EXP decremento 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= menos EXP 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= parenAbre EXP parenCierra 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.elementAt(CUP$Graphik_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= num 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= cad 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= dec 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= carac 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= id 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= falso 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= verdadero 
            {
              Object RESULT =null;

              CUP$Graphik_Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",21, ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Graphik_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Graphik_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Graphik_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Graphik_Sintactico$do_action(
    int                        CUP$Graphik_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Graphik_Sintactico$parser,
    java.util.Stack            CUP$Graphik_Sintactico$stack,
    int                        CUP$Graphik_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Graphik_Sintactico$do_action_part00000000(
                               CUP$Graphik_Sintactico$act_num,
                               CUP$Graphik_Sintactico$parser,
                               CUP$Graphik_Sintactico$stack,
                               CUP$Graphik_Sintactico$top);
    }
}

}
