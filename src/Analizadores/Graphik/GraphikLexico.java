/* The following code was generated by JFlex 1.6.1 */

/*------------ Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Analizadores.Graphik;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------ Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Graphik_Lexico.jflex</tt>
 */
public class GraphikLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 52, 54, 54, 51,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    53, 46,  1, 10,  0,  0, 45,  2, 32, 33, 41, 38, 42, 39,  6, 11, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 50,  0, 48, 49, 47, 43, 
     0, 22, 24, 18, 17, 12, 31,  7, 30, 20,  4,  9, 23, 21, 13, 16, 
    28,  4, 15, 26, 14, 29, 27,  4,  4,  4,  4, 34,  0, 35, 40,  5, 
     0, 22, 24, 18, 17, 12, 31,  7, 30, 20,  4,  9, 23, 21, 13, 16, 
    28,  4, 15, 26, 14, 29, 27,  4,  4,  4,  4, 36, 44, 37,  0,  0, 
     0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\3\1\5\1\6"+
    "\6\3\1\1\5\3\1\1\5\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\1\1\23\1\24\1\25\1\26\1\27\1\0"+
    "\2\5\1\0\1\30\3\0\1\3\2\5\11\3\2\0"+
    "\2\3\1\0\4\3\1\0\1\31\1\3\1\31\10\3"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\0\1\3\1\5\14\3\1\0"+
    "\1\3\3\0\3\3\1\0\1\3\2\45\2\3\2\0"+
    "\3\3\1\46\2\3\1\0\6\3\1\47\1\3\1\5"+
    "\4\3\1\0\10\3\2\50\4\0\4\3\1\0\2\3"+
    "\1\51\1\0\1\52\1\3\1\52\1\3\1\0\3\3"+
    "\1\0\1\3\1\53\3\3\1\0\3\3\1\54\1\0"+
    "\2\3\1\0\2\3\1\55\2\56\1\0\4\3\4\0"+
    "\4\3\1\0\2\3\1\0\2\3\2\57\2\3\1\0"+
    "\1\3\1\0\2\3\1\60\2\61\1\0\1\3\1\62"+
    "\1\0\2\3\1\0\4\3\1\0\3\3\1\63\1\0"+
    "\1\64\2\0\1\3\1\64\2\3\1\0\1\3\1\65"+
    "\1\0\3\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\66\1\0\1\3\1\0\2\3\2\67\1\70\2\3"+
    "\1\0\1\3\1\71\1\3\3\0\3\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\1\0\1\3\2\72\2\73"+
    "\1\0\1\3\2\74\1\75\2\3\1\0\1\3\1\76"+
    "\1\0\1\77\1\100\1\3\1\77\1\100\2\101\2\102"+
    "\1\0\2\3\1\0\1\3\2\103\1\0\1\3\1\104"+
    "\1\105\2\106\1\0\1\3\2\107\1\110\2\111\1\0"+
    "\1\3\2\112\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\67\0\u014a"+
    "\0\u0181\0\67\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0596\0\u05cd\0\67\0\67\0\67\0\67"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\67\0\u074e"+
    "\0\u0785\0\u07bc\0\156\0\67\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0"+
    "\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u082a\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\67\0\u0113\0\u150e\0\u1545"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u0113\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\67"+
    "\0\u187e\0\67\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\67"+
    "\0\u0113\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u0113\0\u1ddd\0\67\0\u1e14"+
    "\0\u0113\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u0113\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116"+
    "\0\u0113\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\67\0\u0113\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\67\0\u0113\0\u26e3"+
    "\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u0113\0\67"+
    "\0\u0113\0\u2864\0\u289b\0\u0113\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u0113\0\u2b66\0\67\0\u2b9d\0\u2bd4\0\u2c0b\0\u0113\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa"+
    "\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u0113\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\67\0\u0113\0\u0113\0\u308e"+
    "\0\u30c5\0\u30fc\0\u3133\0\u0113\0\u316a\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7"+
    "\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\67\0\u0113\0\67"+
    "\0\u0113\0\u3511\0\u3548\0\67\0\u0113\0\u0113\0\u357f\0\u35b6"+
    "\0\u35ed\0\u3624\0\u0113\0\u365b\0\67\0\67\0\u3692\0\u0113"+
    "\0\u0113\0\67\0\u0113\0\67\0\u0113\0\u36c9\0\u3700\0\u3737"+
    "\0\u376e\0\u37a5\0\67\0\u0113\0\u37dc\0\u3813\0\u0113\0\u0113"+
    "\0\67\0\u0113\0\u384a\0\u3881\0\67\0\u0113\0\u0113\0\67"+
    "\0\u0113\0\u38b8\0\u38ef\0\67\0\u0113\0\u3926\0\u395d\0\u3994"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\67\0\u0113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\2\1\6\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\6\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\70\0\1\63"+
    "\1\64\65\63\2\65\1\0\64\65\3\0\1\5\2\0"+
    "\1\66\63\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\3\6\1\70\3\6\1\0"+
    "\5\6\1\0\6\6\27\0\12\71\1\0\1\72\53\71"+
    "\3\0\3\6\1\67\1\6\1\0\1\6\2\0\1\6"+
    "\1\73\5\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\5\6"+
    "\1\0\3\6\1\74\2\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\1\75\6\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\1\76\6\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\77\3\6\1\100"+
    "\2\6\1\0\2\6\1\101\2\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\4\6\1\102"+
    "\2\6\1\0\2\6\1\103\2\6\1\0\6\6\44\0"+
    "\1\104\7\0\1\105\44\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\6\1\106\5\6\1\0\1\6\1\107"+
    "\3\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\110\1\111\4\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\3\6\1\112\1\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\3\6"+
    "\1\113\1\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\4\6\1\114\2\6\1\0\5\6"+
    "\1\0\6\6\43\0\1\115\6\0\2\116\45\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\117\6\6\1\116"+
    "\1\120\4\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\1\121\6\6\1\0\2\6\1\122"+
    "\2\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\3\6\1\123\3\6\1\0\2\6\1\124"+
    "\2\6\1\0\3\6\1\125\2\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\1\126\6\6\1\0\2\6"+
    "\1\127\2\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\0\2\6\1\130\2\6"+
    "\1\0\6\6\75\0\1\131\67\0\1\132\73\0\1\133"+
    "\66\0\1\134\1\135\72\0\1\136\66\0\1\137\66\0"+
    "\1\140\66\0\1\141\71\0\1\61\65\0\1\60\1\61"+
    "\67\0\1\62\3\0\1\142\67\0\1\143\72\0\1\144"+
    "\62\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\2\6\1\145\2\6\1\0\6\6\27\0\12\71"+
    "\1\0\54\71\12\72\1\0\1\146\53\72\3\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\2\6\1\147\4\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\1\150\6\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\3\6\1\151\3\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\2\6\1\152"+
    "\4\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\6\6\1\153\1\0\5\6"+
    "\1\0\5\6\1\154\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\6\1\155\5\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\2\6\1\156\4\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\1\6\1\157"+
    "\5\6\1\0\3\6\1\160\1\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\3\6\1\161"+
    "\1\6\1\162\1\6\1\0\5\6\1\163\1\164\5\6"+
    "\51\0\1\165\2\166\76\0\1\167\35\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\6\6\1\170\1\166\1\171"+
    "\4\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\5\6\1\0\2\6\1\172"+
    "\3\6\43\0\1\173\55\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\174\6\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\5\6\1\175\1\176\5\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\0\2\6\1\177"+
    "\2\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\4\6\1\200\2\6\1\0\5\6\1\0"+
    "\6\6\56\0\1\201\54\0\1\202\54\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\0\3\6\1\203"+
    "\1\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\6\1\204\5\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\3\6\1\205\3\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\3\6\1\206"+
    "\2\6\1\207\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\4\6\1\210\2\6"+
    "\1\211\1\212\4\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\3\6\1\213\3\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\4\6\1\214\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\3\6"+
    "\1\215\3\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\6\6\1\216\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\3\6\1\217\1\6\1\0"+
    "\6\6\37\0\2\220\60\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\5\6\1\0\2\6\1\221"+
    "\3\6\27\0\12\72\1\222\1\146\53\72\3\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\223\6\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\5\6\1\0\1\6\1\224"+
    "\4\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\1\6\1\225\3\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\4\6\1\226"+
    "\2\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\227\1\230\4\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\1\231\6\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\5\6\1\232"+
    "\1\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\4\6\1\233\2\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\2\6\1\234\4\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\0\3\6\1\235\2\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\2\6\1\236\2\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\1\237\6\6\1\0\5\6"+
    "\1\0\6\6\47\0\1\240\51\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\4\6\1\241\2\6\1\0\5\6"+
    "\1\0\6\6\56\0\1\242\61\0\1\243\63\0\1\244"+
    "\1\245\51\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\3\6\1\246\1\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\6\6\1\247"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\3\6\1\250\1\251\2\6\1\0"+
    "\5\6\1\0\6\6\44\0\1\252\54\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\1\6\1\253\5\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\1\6\1\254\3\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\3\6\1\255\1\6\1\0\6\6\43\0"+
    "\1\256\72\0\1\257\51\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\260\6\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\4\6"+
    "\1\261\2\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\5\6\1\262\1\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\263\1\264\4\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\2\6\1\265\3\6\1\266\1\0\5\6\1\0\6\6"+
    "\62\0\1\267\36\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\5\6\1\0\1\6\1\270\4\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\2\6\1\271\2\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\3\6"+
    "\1\272\1\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\1\273\6\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\1\274\6\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\5\6"+
    "\1\275\1\276\5\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\5\6\1\0\4\6\1\277"+
    "\1\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\3\6\1\300\3\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\4\6\1\301"+
    "\2\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\302\1\303\4\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\304\3\6\1\0\5\6\1\0\6\6"+
    "\54\0\1\305\44\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\1\6\1\306\3\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\6\6"+
    "\1\307\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\1\310\6\6\1\0\5\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\5\6\1\311\1\312\5\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\313"+
    "\1\314\4\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\0\1\6\1\315\3\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\6\6\1\316\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\1\6\1\317"+
    "\5\6\1\0\5\6\1\0\6\6\64\0\1\320\54\0"+
    "\2\321\65\0\2\322\61\0\1\323\52\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\0\5\6\1\0"+
    "\3\6\1\324\2\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\321\1\325\4\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\322\1\326\4\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\3\6\1\327\3\6\1\0"+
    "\5\6\1\0\6\6\45\0\1\330\53\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\2\6\1\331\4\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\2\6\1\332\2\6\1\0"+
    "\6\6\51\0\1\333\47\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\6\6\1\334\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\2\6\1\335\2\6\1\0\6\6\47\0\1\336"+
    "\51\0\3\6\1\67\1\6\1\0\1\6\2\0\4\6"+
    "\1\337\2\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\340\6\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\1\341\6\6\1\0\5\6\1\0\6\6"+
    "\55\0\1\342\43\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\2\6\1\343\2\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\344\1\345\4\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\5\6\1\346\1\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\3\6\1\347\3\6\1\0\5\6\1\0"+
    "\6\6\47\0\1\350\51\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\4\6\1\351\2\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\352\1\353\4\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\4\6\1\354\2\6"+
    "\1\0\5\6\1\0\6\6\44\0\1\355\54\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\6\1\356\5\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\1\6\1\357\5\6\1\0\5\6"+
    "\1\0\6\6\55\0\1\360\43\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\0\2\6\1\361\2\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\2\6\1\362\4\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\2\6"+
    "\1\363\3\6\1\364\1\0\5\6\1\0\6\6\44\0"+
    "\1\365\54\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\1\6\1\366\5\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\1\6\1\367"+
    "\5\6\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\2\6\1\370\4\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\2\6\1\371\2\6\1\0"+
    "\6\6\52\0\2\372\62\0\1\373\73\0\1\374\57\0"+
    "\1\375\53\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\372\1\376\4\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\4\6\1\377\2\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\0\1\6\1\u0100\3\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\2\6\1\u0101\4\6\1\0\5\6\1\0\6\6"+
    "\46\0\1\u0102\52\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u0103\3\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\3\6"+
    "\1\u0104\3\6\1\0\5\6\1\0\6\6\51\0\1\u0105"+
    "\47\0\3\6\1\67\1\6\1\0\1\6\2\0\6\6"+
    "\1\u0106\1\0\5\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\5\6\1\u0107\1\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\u0108\1\0"+
    "\1\6\2\0\7\6\1\0\5\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\5\6\1\u0109\1\u010a\5\6\50\0\1\u010b\50\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\5\6\1\u010c\1\6"+
    "\1\0\5\6\1\0\6\6\51\0\1\u010d\47\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\6\6\1\u010e\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\2\6\1\u010f\2\6\1\0"+
    "\6\6\37\0\2\u0110\60\0\3\6\1\67\1\6\1\u0110"+
    "\1\u0111\2\0\7\6\1\0\5\6\1\0\6\6\55\0"+
    "\1\u0112\43\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\2\6\1\u0113\2\6\1\0\6\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\2\6\1\u0114\2\6\1\0\6\6\56\0\1\u0115\42\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\3\6\1\u0116\1\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\4\6\1\u0117\2\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\4\6\1\u0118\2\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\2\6\1\u0119\2\6\1\0\6\6\64\0"+
    "\1\u011a\34\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\0\3\6\1\u011b\2\6\32\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\2\6\1\u011c\2\6\1\0\6\6\32\0\3\6\1\67"+
    "\1\6\1\0\1\6\2\0\1\u011d\6\6\1\0\5\6"+
    "\1\0\6\6\46\0\1\u011e\72\0\2\u011f\70\0\1\u0120"+
    "\43\0\3\6\1\67\1\6\1\0\1\6\2\0\3\6"+
    "\1\u0121\3\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\u011f\1\u0122"+
    "\4\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\2\6\1\u0123\2\6\1\0"+
    "\6\6\55\0\1\u0124\43\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\0\2\6\1\u0125\2\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\0\4\6\1\u0126\1\6\52\0"+
    "\2\u0127\45\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\u0127\1\u0128\4\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\u0129\6\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\7\6\1\u012a\1\u012b\4\6\1\0\6\6"+
    "\55\0\1\u012c\43\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\2\6\1\u012d\2\6\1\0\6\6"+
    "\47\0\1\u012e\51\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\4\6\1\u012f\2\6\1\0\5\6\1\0\6\6"+
    "\47\0\1\u0130\51\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\4\6\1\u0131\2\6\1\0\5\6\1\0\6\6"+
    "\55\0\1\u0132\43\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\7\6\1\0\2\6\1\u0133\2\6\1\0\6\6"+
    "\46\0\1\u0134\52\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u0135\3\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\3\6"+
    "\1\u0136\3\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\5\6\1\u0137\1\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\5\6\1\u0138\1\6\1\0\5\6"+
    "\1\0\6\6\55\0\1\u0139\43\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\7\6\1\0\2\6\1\u013a\2\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u013b\3\6\1\0\5\6\1\0\6\6"+
    "\34\0\1\u013c\100\0\1\u013d\66\0\1\u013e\52\0\2\6"+
    "\1\u013f\1\67\1\6\1\0\1\6\2\0\7\6\1\0"+
    "\5\6\1\0\6\6\32\0\3\6\1\67\1\6\1\0"+
    "\1\6\2\0\3\6\1\u0140\3\6\1\0\5\6\1\0"+
    "\6\6\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\3\6\1\u0141\3\6\1\0\5\6\1\0\6\6\60\0"+
    "\2\u0142\37\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\u0142\1\u0143\5\6\32\0\3\6"+
    "\1\67\1\6\1\u0144\1\u0145\2\0\7\6\1\0\5\6"+
    "\1\0\6\6\47\0\1\u0146\51\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\4\6\1\u0147\2\6\1\0\5\6"+
    "\1\0\6\6\32\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u0148\3\6\1\0\5\6\1\0\6\6"+
    "\50\0\1\u0149\50\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\5\6\1\u014a\1\6\1\0\5\6\1\0\6\6"+
    "\46\0\1\u014b\52\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u014c\3\6\1\0\5\6\1\0\6\6"+
    "\46\0\1\u014d\52\0\3\6\1\67\1\6\1\0\1\6"+
    "\2\0\3\6\1\u014e\3\6\1\0\5\6\1\0\6\6"+
    "\32\0\3\6\1\67\1\6\1\0\1\6\2\0\4\6"+
    "\1\u014f\2\6\1\0\5\6\1\0\6\6\32\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\2\6"+
    "\1\u0150\2\6\1\0\6\6\46\0\1\u0151\52\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\3\6\1\u0152\3\6"+
    "\1\0\5\6\1\0\6\6\65\0\1\u0153\33\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\7\6\1\0\5\6"+
    "\1\0\4\6\1\u0154\1\6\44\0\1\u0155\54\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\6\1\u0156\5\6"+
    "\1\0\5\6\1\0\6\6\32\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\4\6\1\u0157\2\6\1\0\5\6"+
    "\1\0\6\6\47\0\1\u0158\51\0\3\6\1\67\1\6"+
    "\1\0\1\6\2\0\4\6\1\u0159\2\6\1\0\5\6"+
    "\1\0\6\6\34\0\1\u015a\64\0\2\6\1\u015b\1\67"+
    "\1\6\1\0\1\6\2\0\7\6\1\0\5\6\1\0"+
    "\6\6\37\0\2\u015c\60\0\3\6\1\67\1\6\1\u015c"+
    "\1\u015d\2\0\7\6\1\0\5\6\1\0\6\6\66\0"+
    "\1\u015e\32\0\3\6\1\67\1\6\1\0\1\6\2\0"+
    "\7\6\1\0\5\6\1\0\5\6\1\u015f\64\0\1\u0160"+
    "\34\0\3\6\1\67\1\6\1\0\1\6\2\0\7\6"+
    "\1\0\5\6\1\0\3\6\1\u0161\2\6\44\0\1\u0162"+
    "\54\0\3\6\1\67\1\6\1\0\1\6\2\0\1\6"+
    "\1\u0163\5\6\1\0\5\6\1\0\6\6\51\0\1\u0164"+
    "\47\0\3\6\1\67\1\6\1\0\1\6\2\0\6\6"+
    "\1\u0165\1\0\5\6\1\0\6\6\52\0\2\u0166\45\0"+
    "\3\6\1\67\1\6\1\0\1\6\2\0\7\6\1\u0166"+
    "\1\u0167\4\6\1\0\6\6\47\0\1\u0168\51\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\4\6\1\u0169\2\6"+
    "\1\0\5\6\1\0\6\6\44\0\1\u016a\54\0\3\6"+
    "\1\67\1\6\1\0\1\6\2\0\1\6\1\u016b\5\6"+
    "\1\0\5\6\1\0\6\6\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\22\1\6\11"+
    "\2\1\4\11\6\1\1\11\1\0\2\1\1\0\1\11"+
    "\3\0\14\1\2\0\2\1\1\0\4\1\1\0\13\1"+
    "\12\11\1\1\1\0\16\1\1\0\1\1\3\0\3\1"+
    "\1\0\1\1\1\11\3\1\2\0\6\1\1\0\6\1"+
    "\1\11\1\1\1\11\4\1\1\0\10\1\1\11\1\1"+
    "\4\0\4\1\1\0\3\1\1\0\1\11\3\1\1\0"+
    "\3\1\1\0\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\1\1\0\4\1\4\0\4\1\1\0"+
    "\2\1\1\0\2\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\11\2\0\4\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\4\1\1\0"+
    "\3\1\3\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\4\1\1\0\2\1\1\0\2\11\3\1"+
    "\1\11\1\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\3\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GraphikLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosGraphik.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ErrorLexico: "+yytext()+"Linea: "+yyline+" Columna: "+yycolumn);
                                Analizadores.Errores err = new Analizadores.Errores("Lexico: ","No es parte del lenguaje ",yytext(),yyline,yycolumn);
                                Err.add(err);
            }
          case 76: break;
          case 2: 
            { System.out.println("Entro numero");
                    return new Symbol(SimbolosGraphik.num, yyline, yycolumn, new String(yytext()));
            }
          case 77: break;
          case 3: 
            { System.out.println("Entro "+yytext());
                    return new Symbol(SimbolosGraphik.id, yyline, yycolumn, new String(yytext()));
            }
          case 78: break;
          case 4: 
            { System.out.println("Entro .");
                    return new Symbol(SimbolosGraphik.punto, yyline, yycolumn, new String(yytext()));
            }
          case 79: break;
          case 5: 
            { 
            }
          case 80: break;
          case 6: 
            { System.out.println("Entro /");
                    return new Symbol(SimbolosGraphik.div, yyline, yycolumn, new String(yytext()));
            }
          case 81: break;
          case 7: 
            { System.out.println("Entro (");
                    return new Symbol(SimbolosGraphik.parenAbre, yyline, yycolumn, new String(yytext()));
            }
          case 82: break;
          case 8: 
            { System.out.println("Entro )");
                    return new Symbol(SimbolosGraphik.parenCierra, yyline, yycolumn, new String(yytext()));
            }
          case 83: break;
          case 9: 
            { System.out.println("Entro [");
                    return new Symbol(SimbolosGraphik.corAbre, yyline, yycolumn, new String(yytext()));
            }
          case 84: break;
          case 10: 
            { System.out.println("Entro ]");
                    return new Symbol(SimbolosGraphik.corCierra, yyline, yycolumn, new String(yytext()));
            }
          case 85: break;
          case 11: 
            { System.out.println("Entro {");
                    return new Symbol(SimbolosGraphik.llaveAbre, yyline, yycolumn, new String(yytext()));
            }
          case 86: break;
          case 12: 
            { System.out.println("Entro }");
                    return new Symbol(SimbolosGraphik.llaveCierra, yyline, yycolumn, new String(yytext()));
            }
          case 87: break;
          case 13: 
            { System.out.println("Entro +");
                    return new Symbol(SimbolosGraphik.mas, yyline, yycolumn, new String(yytext()));
            }
          case 88: break;
          case 14: 
            { System.out.println("Entro -");
                    return new Symbol(SimbolosGraphik.menos, yyline, yycolumn, new String(yytext()));
            }
          case 89: break;
          case 15: 
            { System.out.println("Entro *");
                    return new Symbol(SimbolosGraphik.potencia, yyline, yycolumn, new String(yytext()));
            }
          case 90: break;
          case 16: 
            { System.out.println("Entro *");
                    return new Symbol(SimbolosGraphik.por, yyline, yycolumn, new String(yytext()));
            }
          case 91: break;
          case 17: 
            { System.out.println("Entro ,");
                    return new Symbol(SimbolosGraphik.coma, yyline, yycolumn, new String(yytext()));
            }
          case 92: break;
          case 18: 
            { System.out.println("Entro ?");
                    return new Symbol(SimbolosGraphik.fin, yyline, yycolumn, new String(yytext()));
            }
          case 93: break;
          case 19: 
            { System.out.println("Entro !");
                    return new Symbol(SimbolosGraphik.not, yyline, yycolumn, new String(yytext()));
            }
          case 94: break;
          case 20: 
            { System.out.println("Entro >");
                    return new Symbol(SimbolosGraphik.mayorq, yyline, yycolumn, new String(yytext()));
            }
          case 95: break;
          case 21: 
            { System.out.println("Entro <");
                    return new Symbol(SimbolosGraphik.menorq, yyline, yycolumn, new String(yytext()));
            }
          case 96: break;
          case 22: 
            { System.out.println("Entro =");
                    return new Symbol(SimbolosGraphik.igual, yyline, yycolumn, new String(yytext()));
            }
          case 97: break;
          case 23: 
            { System.out.println("Entro :");
                    return new Symbol(SimbolosGraphik.dospuntos, yyline, yycolumn, new String(yytext()));
            }
          case 98: break;
          case 24: 
            { System.out.println("Entro texto");
                    return new Symbol(SimbolosGraphik.cad, yyline, yycolumn, new String(yytext()));
            }
          case 99: break;
          case 25: 
            { System.out.println("Entro Si");
                    return new Symbol(SimbolosGraphik.si, yyline, yycolumn, new String(yytext()));
            }
          case 100: break;
          case 26: 
            { System.out.println("Entro ++");
                    return new Symbol(SimbolosGraphik.incremento, yyline, yycolumn, new String(yytext()));
            }
          case 101: break;
          case 27: 
            { System.out.println("Entro --");
                    return new Symbol(SimbolosGraphik.decremento, yyline, yycolumn, new String(yytext()));
            }
          case 102: break;
          case 28: 
            { System.out.println("Entro ||");
                    return new Symbol(SimbolosGraphik.or, yyline, yycolumn, new String(yytext()));
            }
          case 103: break;
          case 29: 
            { System.out.println("Entro &|");
                    return new Symbol(SimbolosGraphik.xor, yyline, yycolumn, new String(yytext()));
            }
          case 104: break;
          case 30: 
            { System.out.println("Entro &&");
                    return new Symbol(SimbolosGraphik.and, yyline, yycolumn, new String(yytext()));
            }
          case 105: break;
          case 31: 
            { System.out.println("Entro !=");
                    return new Symbol(SimbolosGraphik.diferente, yyline, yycolumn, new String(yytext()));
            }
          case 106: break;
          case 32: 
            { System.out.println("Entro >=");
                    return new Symbol(SimbolosGraphik.mayorigualq, yyline, yycolumn, new String(yytext()));
            }
          case 107: break;
          case 33: 
            { System.out.println("Entro <=");
                    return new Symbol(SimbolosGraphik.menorigualq, yyline, yycolumn, new String(yytext()));
            }
          case 108: break;
          case 34: 
            { System.out.println("Entro ==");
                    return new Symbol(SimbolosGraphik.igualigual, yyline, yycolumn, new String(yytext()));
            }
          case 109: break;
          case 35: 
            { System.out.println("Entro Caracter");
                    return new Symbol(SimbolosGraphik.carac, yyline, yycolumn, new String(yytext()));
            }
          case 110: break;
          case 36: 
            { System.out.println("Entro decimal");
                    return new Symbol(SimbolosGraphik.dec, yyline, yycolumn, new String(yytext()));
            }
          case 111: break;
          case 37: 
            { System.out.println("Entro ALS");
                    return new Symbol(SimbolosGraphik.Tals, yyline, yycolumn, new String(yytext()));
            }
          case 112: break;
          case 38: 
            { System.out.println("Entro var");
                    return new Symbol(SimbolosGraphik.var, yyline, yycolumn, new String(yytext()));
            }
          case 113: break;
          case 39: 
            { System.out.println("Entro nombreArchivo");
                    return new Symbol(SimbolosGraphik.nombreArchivo, yyline, yycolumn, new String(yytext()));
            }
          case 114: break;
          case 40: 
            { System.out.println("Entro caso");
                    return new Symbol(SimbolosGraphik.caso, yyline, yycolumn, new String(yytext()));
            }
          case 115: break;
          case 41: 
            { System.out.println("Entro bool");
                    return new Symbol(SimbolosGraphik.Tbool, yyline, yycolumn, new String(yytext()));
            }
          case 116: break;
          case 42: 
            { System.out.println("Entro Sino");
                    return new Symbol(SimbolosGraphik.sino, yyline, yycolumn, new String(yytext()));
            }
          case 117: break;
          case 43: 
            { System.out.println("Entro Para");
                    return new Symbol(SimbolosGraphik.para, yyline, yycolumn, new String(yytext()));
            }
          case 118: break;
          case 44: 
            { System.out.println("Entro nuevo");
                    return new Symbol(SimbolosGraphik.nuevo, yyline, yycolumn, new String(yytext()));
            }
          case 119: break;
          case 45: 
            { System.out.println("Entro Donde");
                    return new Symbol(SimbolosGraphik.donde, yyline, yycolumn, new String(yytext()));
            }
          case 120: break;
          case 46: 
            { System.out.println("Entro Datos");
                    return new Symbol(SimbolosGraphik.datos, yyline, yycolumn, new String(yytext()));
            }
          case 121: break;
          case 47: 
            { System.out.println("Entro vacio");
                    return new Symbol(SimbolosGraphik.Tvacio, yyline, yycolumn, new String(yytext()));
            }
          case 122: break;
          case 48: 
            { System.out.println("Entro Hacer");
                    return new Symbol(SimbolosGraphik.hacer, yyline, yycolumn, new String(yytext()));
            }
          case 123: break;
          case 49: 
            { System.out.println("Entro falso");
                    return new Symbol(SimbolosGraphik.falso, yyline, yycolumn, new String(yytext()));
            }
          case 124: break;
          case 50: 
            { System.out.println("Entro entero");
                    return new Symbol(SimbolosGraphik.Tentero, yyline, yycolumn, new String(yytext()));
            }
          case 125: break;
          case 51: 
            { System.out.println("Entro cadena");
                    return new Symbol(SimbolosGraphik.Tcadena, yyline, yycolumn, new String(yytext()));
            }
          case 126: break;
          case 52: 
            { System.out.println("Entro inicio");
                    return new Symbol(SimbolosGraphik.inicio, yyline, yycolumn, new String(yytext()));
            }
          case 127: break;
          case 53: 
            { System.out.println("Entro llamar");
                    return new Symbol(SimbolosGraphik.llamar, yyline, yycolumn, new String(yytext()));
            }
          case 128: break;
          case 54: 
            { System.out.println("Entro hereda");
                    return new Symbol(SimbolosGraphik.hereda, yyline, yycolumn, new String(yytext()));
            }
          case 129: break;
          case 55: 
            { System.out.println("Entro decimal");
                    return new Symbol(SimbolosGraphik.Tdecimal, yyline, yycolumn, new String(yytext()));
            }
          case 130: break;
          case 56: 
            { System.out.println("Entro Defecto");
                    return new Symbol(SimbolosGraphik.defecto, yyline, yycolumn, new String(yytext()));
            }
          case 131: break;
          case 57: 
            { System.out.println("Entro Columna");
                    return new Symbol(SimbolosGraphik.columna, yyline, yycolumn, new String(yytext()));
            }
          case 132: break;
          case 58: 
            { System.out.println("Entro privado");
                    return new Symbol(SimbolosGraphik.privado, yyline, yycolumn, new String(yytext()));
            }
          case 133: break;
          case 59: 
            { System.out.println("Entro publico");
                    return new Symbol(SimbolosGraphik.publico, yyline, yycolumn, new String(yytext()));
            }
          case 134: break;
          case 60: 
            { System.out.println("Entro Terminar");
                    return new Symbol(SimbolosGraphik.terminar, yyline, yycolumn, new String(yytext()));
            }
          case 135: break;
          case 61: 
            { System.out.println("Entro retornar");
                    return new Symbol(SimbolosGraphik.retornar, yyline, yycolumn, new String(yytext()));
            }
          case 136: break;
          case 62: 
            { System.out.println("Entro caracter");
                    return new Symbol(SimbolosGraphik.Tcaracter, yyline, yycolumn, new String(yytext()));
            }
          case 137: break;
          case 63: 
            { System.out.println("Entro imprimir");
                    return new Symbol(SimbolosGraphik.imprimir, yyline, yycolumn, new String(yytext()));
            }
          case 138: break;
          case 64: 
            { System.out.println("Entro importar");
                    return new Symbol(SimbolosGraphik.importar, yyline, yycolumn, new String(yytext()));
            }
          case 139: break;
          case 65: 
            { System.out.println("Entro Mientras");
                    return new Symbol(SimbolosGraphik.mientras, yyline, yycolumn, new String(yytext()));
            }
          case 140: break;
          case 66: 
            { System.out.println("Entro llamarHK");
                    return new Symbol(SimbolosGraphik.llamarHK, yyline, yycolumn, new String(yytext()));
            }
          case 141: break;
          case 67: 
            { System.out.println("Entro Procesar");
                    return new Symbol(SimbolosGraphik.procesar, yyline, yycolumn, new String(yytext()));
            }
          case 142: break;
          case 68: 
            { System.out.println("Entro DondeTodo");
                    return new Symbol(SimbolosGraphik.dondetodo, yyline, yycolumn, new String(yytext()));
            }
          case 143: break;
          case 69: 
            { System.out.println("Entro DondeCada");
                    return new Symbol(SimbolosGraphik.dondecada, yyline, yycolumn, new String(yytext()));
            }
          case 144: break;
          case 70: 
            { System.out.println("Entro Continuar");
                    return new Symbol(SimbolosGraphik.continuar, yyline, yycolumn, new String(yytext()));
            }
          case 145: break;
          case 71: 
            { System.out.println("Entro seleccion");
                    return new Symbol(SimbolosGraphik.seleccion, yyline, yycolumn, new String(yytext()));
            }
          case 146: break;
          case 72: 
            { System.out.println("Entro verdadero");
                    return new Symbol(SimbolosGraphik.verdadero, yyline, yycolumn, new String(yytext()));
            }
          case 147: break;
          case 73: 
            { System.out.println("Entro protegido");
                    return new Symbol(SimbolosGraphik.protegido, yyline, yycolumn, new String(yytext()));
            }
          case 148: break;
          case 74: 
            { System.out.println("Entro incluir_HK");
                    return new Symbol(SimbolosGraphik.incluirHK, yyline, yycolumn, new String(yytext()));
            }
          case 149: break;
          case 75: 
            { System.out.println("Entro graphikar_funcion");
                        return new Symbol(SimbolosGraphik.graphikar, yyline, yycolumn, new String(yytext()));
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
