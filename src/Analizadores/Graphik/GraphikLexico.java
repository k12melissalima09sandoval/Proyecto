/* The following code was generated by JFlex 1.6.1 */

/*------------ Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/*------------ Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Graphik_Lexico.jflex</tt>
 */
public class GraphikLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    32, 32, 32, 32, 32, 32, 32, 32, 32, 62, 61, 63, 63, 60, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    62,  4,  1, 18,  7,  7, 24,  2, 54, 55, 22, 21, 15, 13, 14, 31, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 59,  7, 16,  8, 17,  9, 
     7, 44, 46, 40, 39, 34, 53, 28, 52, 42,  3, 30, 45, 43, 35, 38, 
    50,  3, 37, 48, 36, 51, 49,  3,  3,  3,  3, 19,  7, 20, 23, 12, 
    32, 44, 46, 40, 39, 34, 53, 28, 52, 42,  3, 30, 45, 43, 35, 38, 
    50,  3, 37, 48, 36, 51, 49,  3,  3,  3,  3, 56, 58, 57,  7, 32, 
    32, 32, 32, 32, 32, 63, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32,  6, 32,  6, 32, 32, 32, 
    32, 33, 32, 32, 32, 32, 32,  6, 32, 32,  6, 32, 32,  6, 32,  6, 
    32, 32,  5, 27, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32,  5, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\1\1\21\1\2\1\22\6\2\1\1\5\2"+
    "\1\1\5\2\1\23\1\24\1\25\1\26\1\1\1\27"+
    "\1\0\2\13\1\0\1\30\1\0\1\31\3\0\1\32"+
    "\1\33\1\34\1\35\1\36\2\13\1\37\1\40\1\41"+
    "\1\0\12\2\2\0\2\2\1\0\4\2\1\0\1\42"+
    "\1\2\1\42\10\2\1\43\1\0\1\13\1\44\15\2"+
    "\1\0\1\2\3\0\3\2\1\0\1\2\2\45\2\2"+
    "\2\0\3\2\1\46\2\2\1\0\6\2\1\47\1\50"+
    "\5\2\1\0\10\2\2\51\4\0\4\2\1\0\2\2"+
    "\1\52\1\0\1\53\1\2\1\53\1\2\1\0\3\2"+
    "\1\0\1\2\1\54\3\2\1\0\3\2\1\55\1\0"+
    "\2\2\1\0\2\2\1\56\2\57\1\0\4\2\4\0"+
    "\4\2\1\0\2\2\1\0\2\2\2\60\2\2\1\0"+
    "\1\2\1\0\2\2\1\61\2\62\1\0\1\2\1\63"+
    "\1\0\2\2\1\0\4\2\1\0\3\2\1\64\1\0"+
    "\1\65\2\0\1\2\1\65\2\2\1\0\1\2\1\66"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\67\1\0\1\2\1\0\2\2\2\70\1\71\2\2"+
    "\1\0\1\2\1\72\1\2\3\0\3\2\1\0\2\2"+
    "\1\0\2\2\1\0\1\2\1\0\1\2\2\73\2\74"+
    "\1\0\1\2\2\75\1\76\2\2\1\0\1\2\1\77"+
    "\1\0\1\100\1\101\1\2\1\100\1\101\2\102\2\103"+
    "\1\0\2\2\1\0\1\2\2\104\1\0\1\2\1\105"+
    "\1\106\2\107\1\0\1\2\2\110\1\111\2\112\1\0"+
    "\1\2\2\113\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\101"+
    "\0\u01c7\0\101\0\101\0\u0208\0\u0249\0\u028a\0\101\0\101"+
    "\0\u02cb\0\101\0\101\0\u030c\0\u034d\0\u038e\0\101\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\101\0\101\0\101\0\101\0\u0861\0\101\0\u08a2"+
    "\0\u08e3\0\u0924\0\202\0\101\0\u0965\0\101\0\u09a6\0\u09e7"+
    "\0\u0a28\0\101\0\101\0\101\0\101\0\101\0\u0a69\0\u0aaa"+
    "\0\101\0\101\0\101\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\101\0\u130b\0\u134c\0\u0aeb\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\101\0\u0104"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u0104"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\101\0\u0aaa\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\101\0\u0104\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u0104\0\u23cd"+
    "\0\101\0\u240e\0\u0104\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u0104\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\u275b\0\u279c\0\u0104\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\u2963\0\101\0\u0104\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\101"+
    "\0\u0104\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd"+
    "\0\u0104\0\101\0\u0104\0\u303e\0\u307f\0\u0104\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u0104\0\u33cc\0\101\0\u340d\0\u344e\0\u348f"+
    "\0\u0104\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e"+
    "\0\u0104\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\101\0\u0104"+
    "\0\u0104\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u0104\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31"+
    "\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\101"+
    "\0\u0104\0\101\0\u0104\0\u3f39\0\u3f7a\0\101\0\u0104\0\u0104"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u0104\0\u40bf\0\101\0\101"+
    "\0\u4100\0\u0104\0\u0104\0\101\0\u0104\0\101\0\u0104\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\101\0\u0104\0\u4286\0\u42c7"+
    "\0\u0104\0\u0104\0\101\0\u0104\0\u4308\0\u4349\0\101\0\u0104"+
    "\0\u0104\0\101\0\u0104\0\u438a\0\u43cb\0\101\0\u0104\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\101\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\2\1\7\1\10"+
    "\3\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\5\1\26"+
    "\1\2\1\5\1\27\1\2\1\5\1\30\1\31\1\32"+
    "\1\33\1\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\5\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\103\0\1\63\1\64\77\63\1\0\1\65"+
    "\1\66\2\65\1\67\1\0\3\65\1\70\1\0\16\65"+
    "\1\0\1\70\1\65\1\0\1\65\3\0\7\65\1\0"+
    "\5\65\1\0\6\65\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\5\5\1\0\6\5\23\0\1\72\100\0\1\73\105\0"+
    "\1\74\73\0\1\75\100\0\1\76\71\0\12\77\1\0"+
    "\16\77\1\0\2\77\1\0\1\77\1\100\11\77\1\0"+
    "\5\77\1\0\20\77\26\0\1\101\103\0\1\102\41\0"+
    "\1\103\24\0\1\104\12\0\1\25\52\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\4\5\1\105\3\5\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\2\5\1\106\5\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\5\5\1\0"+
    "\3\5\1\107\2\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\1\5\1\110"+
    "\6\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\1\5\1\111\6\5\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\1\5\1\112\3\5\1\113\2\5\1\0"+
    "\2\5\1\114\2\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\5\5\1\115\2\5\1\0\2\5\1\116\2\5\1\0"+
    "\6\5\56\0\1\117\7\0\1\120\30\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\2\5\1\121\5\5\1\0\1\5\1\122\3\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\123\1\124\4\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\3\5"+
    "\1\125\1\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\3\5\1\126\1\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\5\5\1\127\2\5\1\0\5\5\1\0\6\5"+
    "\55\0\1\130\6\0\2\131\31\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\1\5"+
    "\1\132\6\5\1\131\1\133\4\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\1\5\1\134\6\5\1\0\2\5\1\135"+
    "\2\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\4\5\1\136"+
    "\3\5\1\0\2\5\1\137\2\5\1\0\3\5\1\140"+
    "\2\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\1\5\1\141\6\5\1\0"+
    "\2\5\1\142\2\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\2\5\1\143\2\5\1\0\6\5\105\0"+
    "\1\144\103\0\1\61\77\0\1\60\1\61\101\0\1\62"+
    "\4\0\1\66\104\0\1\65\105\0\1\65\121\0\1\145"+
    "\45\0\12\77\1\0\16\77\1\0\2\77\1\0\13\77"+
    "\1\0\5\77\1\0\20\77\2\0\12\100\1\0\16\100"+
    "\1\0\2\100\1\0\1\100\1\146\11\100\1\0\5\100"+
    "\1\0\20\100\32\0\1\147\52\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\2\5\1\150\2\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\3\5\1\151\4\5\1\0\5\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\1\5\1\152\6\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\4\5\1\153\3\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\3\5"+
    "\1\154\4\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\7\5\1\155\1\0\5\5\1\0\5\5\1\156"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\2\5\1\157\5\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\3\5\1\160\4\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\2\5"+
    "\1\161\5\5\1\0\3\5\1\162\1\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\4\5\1\163\1\5\1\164\1\5"+
    "\1\0\5\5\1\165\1\166\5\5\63\0\1\167\2\170"+
    "\110\0\1\171\21\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\7\5\1\172\1\170"+
    "\1\173\4\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\5\5\1\0\2\5\1\174\3\5\55\0\1\175"+
    "\41\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\1\5\1\176\6\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\5\5"+
    "\1\177\1\200\5\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\2\5\1\201\2\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\5\5\1\202\2\5\1\0\5\5\1\0\6\5\70\0"+
    "\1\203\66\0\1\204\40\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\3\5\1\205\1\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\2\5\1\206\5\5\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\4\5\1\207\3\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\4\5\1\210\2\5\1\211"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\212\2\5\1\213\1\214\4\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\4\5\1\215\3\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\4\5\1\216"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\4\5\1\217\3\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\7\5"+
    "\1\220\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\3\5\1\221\1\5\1\0\6\5\50\0"+
    "\2\222\43\0\12\100\1\0\6\100\1\223\7\100\1\0"+
    "\2\100\1\0\1\100\1\146\11\100\1\0\5\100\1\0"+
    "\20\100\4\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\5\5\1\0"+
    "\2\5\1\224\3\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\1\5\1\225"+
    "\6\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\5\5\1\0\1\5\1\226\4\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\1\5\1\227\3\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\5\5\1\230\2\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\231"+
    "\1\232\4\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\1\5"+
    "\1\233\6\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\6\5\1\234\1\5\1\0\5\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\5\5\1\235\2\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\3\5\1\236\4\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\5\5\1\0\3\5\1\237\2\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\2\5\1\240\2\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\1\5\1\241\6\5\1\0\5\5"+
    "\1\0\6\5\61\0\1\242\35\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\243\2\5\1\0\5\5\1\0\6\5\70\0\1\244"+
    "\73\0\1\245\75\0\1\246\1\247\35\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\3\5\1\250\1\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\7\5\1\251\1\0\5\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\4\5\1\252\1\253\2\5\1\0"+
    "\5\5\1\0\6\5\56\0\1\254\40\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\2\5\1\255\5\5\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\1\5\1\256\3\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\3\5\1\257"+
    "\1\5\1\0\6\5\55\0\1\260\104\0\1\261\35\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\1\5\1\262\6\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\5\5\1\263\2\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\6\5\1\264"+
    "\1\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\265\1\266\4\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\3\5\1\267\3\5\1\270\1\0\5\5\1\0"+
    "\6\5\74\0\1\271\22\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\5\5\1\0\1\5\1\272\4\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\2\5\1\273\2\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\3\5\1\274\1\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\1\5\1\275\6\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\1\5\1\276"+
    "\6\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\5\5\1\277\1\300\5\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\5\5\1\0\4\5\1\301\1\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\4\5\1\302\3\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\5\5\1\303\2\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\304\1\305\4\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\4\5\1\306\3\5\1\0\5\5\1\0\6\5\66\0"+
    "\1\307\30\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\1\5\1\310"+
    "\3\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\7\5\1\311"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\1\5"+
    "\1\312\6\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\5\5\1\313\1\314\5\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\315\1\316\4\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\0\1\5\1\317\3\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\7\5\1\320\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\2\5\1\321"+
    "\5\5\1\0\5\5\1\0\6\5\76\0\1\322\66\0"+
    "\2\323\77\0\2\324\73\0\1\325\36\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\5\5\1\0\3\5\1\326\2\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\323\1\327\4\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\324\1\330\4\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\4\5\1\331\3\5\1\0"+
    "\5\5\1\0\6\5\57\0\1\332\37\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\3\5\1\333\4\5\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\2\5\1\334\2\5\1\0"+
    "\6\5\63\0\1\335\33\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\7\5\1\336"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\2\5\1\337\2\5\1\0\6\5\61\0\1\340"+
    "\35\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\5\5\1\341\2\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\1\5\1\342\6\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\1\5"+
    "\1\343\6\5\1\0\5\5\1\0\6\5\67\0\1\344"+
    "\27\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\0\2\5\1\345\2\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\346\1\347"+
    "\4\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\6\5\1\350"+
    "\1\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\4\5\1\351\3\5\1\0\5\5\1\0\6\5\61\0"+
    "\1\352\35\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\5\5\1\353\2\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\354"+
    "\1\355\4\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\356\2\5\1\0\5\5\1\0\6\5\56\0\1\357"+
    "\40\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\2\5\1\360\5\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\2\5\1\361\5\5"+
    "\1\0\5\5\1\0\6\5\67\0\1\362\27\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\2\5\1\363\2\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\3\5\1\364\4\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\3\5\1\365\3\5"+
    "\1\366\1\0\5\5\1\0\6\5\56\0\1\367\40\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\2\5\1\370\5\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\2\5\1\371\5\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\3\5\1\372"+
    "\4\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\2\5\1\373\2\5\1\0\6\5\64\0"+
    "\2\374\74\0\1\375\105\0\1\376\71\0\1\377\37\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\374\1\u0100\4\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\5\5\1\u0101\2\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\1\5"+
    "\1\u0102\3\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\3\5"+
    "\1\u0103\4\5\1\0\5\5\1\0\6\5\60\0\1\u0104"+
    "\36\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\4\5\1\u0105\3\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\4\5\1\u0106\3\5"+
    "\1\0\5\5\1\0\6\5\63\0\1\u0107\33\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\7\5\1\u0108\1\0\5\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\6\5\1\u0109\1\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\3\5\1\u010a\1\0\1\5\2\0\10\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\5\5"+
    "\1\u010b\1\u010c\5\5\62\0\1\u010d\34\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\6\5\1\u010e\1\5\1\0\5\5\1\0\6\5\63\0"+
    "\1\u010f\33\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\7\5\1\u0110\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\2\5"+
    "\1\u0111\2\5\1\0\6\5\50\0\2\u0112\45\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\u0112\1\u0113"+
    "\2\0\10\5\1\0\5\5\1\0\6\5\67\0\1\u0114"+
    "\27\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\0\2\5\1\u0115\2\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\2\5"+
    "\1\u0116\2\5\1\0\6\5\70\0\1\u0117\26\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\3\5\1\u0118\1\5\1\0\6\5"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\5\5\1\u0119\2\5\1\0\5\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\5\5\1\u011a\2\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\2\5\1\u011b\2\5\1\0\6\5\76\0\1\u011c"+
    "\20\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\0\5\5\1\0\3\5"+
    "\1\u011d\2\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\10\5\1\0\2\5"+
    "\1\u011e\2\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\1\5"+
    "\1\u011f\6\5\1\0\5\5\1\0\6\5\60\0\1\u0120"+
    "\104\0\2\u0121\102\0\1\u0122\27\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\4\5"+
    "\1\u0123\3\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\u0121\1\u0124\4\5\1\0\6\5\16\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\2\5\1\u0125\2\5\1\0"+
    "\6\5\67\0\1\u0126\27\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\2\5\1\u0127\2\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\10\5\1\0\5\5\1\0\4\5\1\u0128\1\5\64\0"+
    "\2\u0129\31\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\u0129\1\u012a\4\5"+
    "\1\0\6\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\1\5\1\u012b\6\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\u012c\1\u012d\4\5\1\0\6\5\67\0\1\u012e\27\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\10\5\1\0\2\5\1\u012f\2\5\1\0"+
    "\6\5\61\0\1\u0130\35\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\5\5\1\u0131"+
    "\2\5\1\0\5\5\1\0\6\5\61\0\1\u0132\35\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\5\5\1\u0133\2\5\1\0\5\5\1\0"+
    "\6\5\67\0\1\u0134\27\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\2\5\1\u0135\2\5\1\0\6\5\60\0\1\u0136\36\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\4\5\1\u0137\3\5\1\0\5\5\1\0"+
    "\6\5\16\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\4\5\1\u0138\3\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\6\5\1\u0139"+
    "\1\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\6\5\1\u013a\1\5\1\0\5\5\1\0\6\5\67\0"+
    "\1\u013b\27\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\2\5\1\u013c"+
    "\2\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\4\5\1\u013d"+
    "\3\5\1\0\5\5\1\0\6\5\27\0\1\u013e\131\0"+
    "\1\u013f\100\0\1\u0140\36\0\1\5\10\0\1\u0141\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\5\5\1\0\6\5\16\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\4\5\1\u0142"+
    "\3\5\1\0\5\5\1\0\6\5\16\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\4\5\1\u0143\3\5\1\0\5\5\1\0\6\5\72\0"+
    "\2\u0144\23\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\10\5\1\0\5\5\1\u0144"+
    "\1\u0145\5\5\16\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\u0146\1\u0147\2\0\10\5\1\0\5\5"+
    "\1\0\6\5\61\0\1\u0148\35\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\u0149\2\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\4\5\1\u014a\3\5\1\0\5\5\1\0\6\5"+
    "\62\0\1\u014b\34\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\6\5\1\u014c\1\5"+
    "\1\0\5\5\1\0\6\5\60\0\1\u014d\36\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\4\5\1\u014e\3\5\1\0\5\5\1\0\6\5"+
    "\60\0\1\u014f\36\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\4\5\1\u0150\3\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\u0151\2\5\1\0\5\5\1\0\6\5\16\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\2\5\1\u0152\2\5\1\0\6\5"+
    "\60\0\1\u0153\36\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\4\5\1\u0154\3\5"+
    "\1\0\5\5\1\0\6\5\77\0\1\u0155\17\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\0\5\5\1\0\4\5\1\u0156\1\5"+
    "\56\0\1\u0157\40\0\1\5\10\0\1\5\1\0\1\71"+
    "\12\0\4\5\1\0\1\5\2\0\2\5\1\u0158\5\5"+
    "\1\0\5\5\1\0\6\5\16\0\1\5\10\0\1\5"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\5\5"+
    "\1\u0159\2\5\1\0\5\5\1\0\6\5\61\0\1\u015a"+
    "\35\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\5\5\1\u015b\2\5\1\0\5\5"+
    "\1\0\6\5\27\0\1\u015c\67\0\1\5\10\0\1\u015d"+
    "\1\0\1\71\12\0\4\5\1\0\1\5\2\0\10\5"+
    "\1\0\5\5\1\0\6\5\50\0\2\u015e\45\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\u015e\1\u015f"+
    "\2\0\10\5\1\0\5\5\1\0\6\5\100\0\1\u0160"+
    "\16\0\1\5\10\0\1\5\1\0\1\71\12\0\4\5"+
    "\1\0\1\5\2\0\10\5\1\0\5\5\1\0\5\5"+
    "\1\u0161\76\0\1\u0162\20\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\10\5\1\0"+
    "\5\5\1\0\3\5\1\u0163\2\5\56\0\1\u0164\40\0"+
    "\1\5\10\0\1\5\1\0\1\71\12\0\4\5\1\0"+
    "\1\5\2\0\2\5\1\u0165\5\5\1\0\5\5\1\0"+
    "\6\5\63\0\1\u0166\33\0\1\5\10\0\1\5\1\0"+
    "\1\71\12\0\4\5\1\0\1\5\2\0\7\5\1\u0167"+
    "\1\0\5\5\1\0\6\5\64\0\2\u0168\31\0\1\5"+
    "\10\0\1\5\1\0\1\71\12\0\4\5\1\0\1\5"+
    "\2\0\10\5\1\u0168\1\u0169\4\5\1\0\6\5\61\0"+
    "\1\u016a\35\0\1\5\10\0\1\5\1\0\1\71\12\0"+
    "\4\5\1\0\1\5\2\0\5\5\1\u016b\2\5\1\0"+
    "\5\5\1\0\6\5\56\0\1\u016c\40\0\1\5\10\0"+
    "\1\5\1\0\1\71\12\0\4\5\1\0\1\5\2\0"+
    "\2\5\1\u016d\5\5\1\0\5\5\1\0\6\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\3\1\2\11"+
    "\1\1\2\11\3\1\1\11\22\1\4\11\1\1\1\11"+
    "\1\0\2\1\1\0\1\11\1\0\1\11\3\0\5\11"+
    "\2\1\3\11\1\0\12\1\2\0\2\1\1\0\4\1"+
    "\1\0\13\1\1\11\1\0\17\1\1\0\1\1\3\0"+
    "\3\1\1\0\1\1\1\11\3\1\2\0\6\1\1\0"+
    "\6\1\1\11\6\1\1\0\10\1\1\11\1\1\4\0"+
    "\4\1\1\0\3\1\1\0\1\11\3\1\1\0\3\1"+
    "\1\0\5\1\1\0\4\1\1\0\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\4\1\4\0\4\1\1\0\2\1"+
    "\1\0\2\1\1\11\3\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\2\1\1\0\2\1\1\0\4\1"+
    "\1\0\4\1\1\0\1\11\2\0\4\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\4\1\1\0\3\1"+
    "\3\0\3\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\4\1\1\0\2\1\1\0\2\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\3\1\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    public static LinkedList<Errores> Err = new LinkedList<Errores>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GraphikLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosGraphik.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ErrorLexico: "+yytext()+"Linea: "+yyline+" Columna: "+yycolumn);
                                Analizadores.Errores err = new Analizadores.Errores("Lexico: ","No es parte del lenguaje ",yytext(),yyline,yycolumn);
                                Err.add(err);
            }
          case 77: break;
          case 2: 
            { System.out.println("Entro id");
                    return new Symbol(SimbolosGraphik.id, yyline, yycolumn, new String(yytext()));
            }
          case 78: break;
          case 3: 
            { System.out.println("Entro !");
                    return new Symbol(SimbolosGraphik.not, yyline, yycolumn, new String(yytext()));
            }
          case 79: break;
          case 4: 
            { System.out.println("Entro =");
                    return new Symbol(SimbolosGraphik.igual, yyline, yycolumn, new String(yytext()));
            }
          case 80: break;
          case 5: 
            { System.out.println("Entro ?");
                    return new Symbol(SimbolosGraphik.fin, yyline, yycolumn, new String(yytext()));
            }
          case 81: break;
          case 6: 
            { System.out.println("Entro -");
                    return new Symbol(SimbolosGraphik.menos, yyline, yycolumn, new String(yytext()));
            }
          case 82: break;
          case 7: 
            { System.out.println("Entro .");
                    return new Symbol(SimbolosGraphik.punto, yyline, yycolumn, new String(yytext()));
            }
          case 83: break;
          case 8: 
            { System.out.println("Entro ,");
                    return new Symbol(SimbolosGraphik.coma, yyline, yycolumn, new String(yytext()));
            }
          case 84: break;
          case 9: 
            { System.out.println("Entro <");
                    return new Symbol(SimbolosGraphik.menorq, yyline, yycolumn, new String(yytext()));
            }
          case 85: break;
          case 10: 
            { System.out.println("Entro >");
                    return new Symbol(SimbolosGraphik.mayorq, yyline, yycolumn, new String(yytext()));
            }
          case 86: break;
          case 11: 
            { 
            }
          case 87: break;
          case 12: 
            { System.out.println("Entro [");
                    return new Symbol(SimbolosGraphik.corAbre, yyline, yycolumn, new String(yytext()));
            }
          case 88: break;
          case 13: 
            { System.out.println("Entro ]");
                    return new Symbol(SimbolosGraphik.corCierra, yyline, yycolumn, new String(yytext()));
            }
          case 89: break;
          case 14: 
            { System.out.println("Entro +");
                    return new Symbol(SimbolosGraphik.mas, yyline, yycolumn, new String(yytext()));
            }
          case 90: break;
          case 15: 
            { System.out.println("Entro *");
                    return new Symbol(SimbolosGraphik.por, yyline, yycolumn, new String(yytext()));
            }
          case 91: break;
          case 16: 
            { System.out.println("Entro *");
                    return new Symbol(SimbolosGraphik.potencia, yyline, yycolumn, new String(yytext()));
            }
          case 92: break;
          case 17: 
            { System.out.println("Entro numero");
                    return new Symbol(SimbolosGraphik.num, yyline, yycolumn, new String(yytext()));
            }
          case 93: break;
          case 18: 
            { System.out.println("Entro /");
                    return new Symbol(SimbolosGraphik.div, yyline, yycolumn, new String(yytext()));
            }
          case 94: break;
          case 19: 
            { System.out.println("Entro (");
                    return new Symbol(SimbolosGraphik.parenAbre, yyline, yycolumn, new String(yytext()));
            }
          case 95: break;
          case 20: 
            { System.out.println("Entro )");
                    return new Symbol(SimbolosGraphik.parenCierra, yyline, yycolumn, new String(yytext()));
            }
          case 96: break;
          case 21: 
            { System.out.println("Entro {");
                    return new Symbol(SimbolosGraphik.llaveAbre, yyline, yycolumn, new String(yytext()));
            }
          case 97: break;
          case 22: 
            { System.out.println("Entro }");
                    return new Symbol(SimbolosGraphik.llaveCierra, yyline, yycolumn, new String(yytext()));
            }
          case 98: break;
          case 23: 
            { System.out.println("Entro :");
                    return new Symbol(SimbolosGraphik.dospuntos, yyline, yycolumn, new String(yytext()));
            }
          case 99: break;
          case 24: 
            { System.out.println("Entro texto");
                    return new Symbol(SimbolosGraphik.cad, yyline, yycolumn, new String(yytext()));
            }
          case 100: break;
          case 25: 
            { System.out.println("Entro Caracter");
                    return new Symbol(SimbolosGraphik.carac, yyline, yycolumn, new String(yytext()));
            }
          case 101: break;
          case 26: 
            { System.out.println("Entro !=");
                    return new Symbol(SimbolosGraphik.diferente, yyline, yycolumn, new String(yytext()));
            }
          case 102: break;
          case 27: 
            { System.out.println("Entro ==");
                    return new Symbol(SimbolosGraphik.igualigual, yyline, yycolumn, new String(yytext()));
            }
          case 103: break;
          case 28: 
            { System.out.println("Entro --");
                    return new Symbol(SimbolosGraphik.decremento, yyline, yycolumn, new String(yytext()));
            }
          case 104: break;
          case 29: 
            { System.out.println("Entro <=");
                    return new Symbol(SimbolosGraphik.menorigualq, yyline, yycolumn, new String(yytext()));
            }
          case 105: break;
          case 30: 
            { System.out.println("Entro >=");
                    return new Symbol(SimbolosGraphik.mayorigualq, yyline, yycolumn, new String(yytext()));
            }
          case 106: break;
          case 31: 
            { System.out.println("Entro ++");
                    return new Symbol(SimbolosGraphik.incremento, yyline, yycolumn, new String(yytext()));
            }
          case 107: break;
          case 32: 
            { System.out.println("Entro &&");
                    return new Symbol(SimbolosGraphik.and, yyline, yycolumn, new String(yytext()));
            }
          case 108: break;
          case 33: 
            { System.out.println("Entro &|");
                    return new Symbol(SimbolosGraphik.xor, yyline, yycolumn, new String(yytext()));
            }
          case 109: break;
          case 34: 
            { System.out.println("Entro Si");
                    return new Symbol(SimbolosGraphik.si, yyline, yycolumn, new String(yytext()));
            }
          case 110: break;
          case 35: 
            { System.out.println("Entro ||");
                    return new Symbol(SimbolosGraphik.or, yyline, yycolumn, new String(yytext()));
            }
          case 111: break;
          case 36: 
            { System.out.println("Entro decimal");
                    return new Symbol(SimbolosGraphik.dec, yyline, yycolumn, new String(yytext()));
            }
          case 112: break;
          case 37: 
            { System.out.println("Entro ALS");
                    return new Symbol(SimbolosGraphik.Tals, yyline, yycolumn, new String(yytext()));
            }
          case 113: break;
          case 38: 
            { System.out.println("Entro var");
                    return new Symbol(SimbolosGraphik.var, yyline, yycolumn, new String(yytext()));
            }
          case 114: break;
          case 39: 
            { System.out.println("Entro nombreArchivo");
                    return new Symbol(SimbolosGraphik.nombreArchivo, yyline, yycolumn, new String(yytext()));
            }
          case 115: break;
          case 40: 
            { yycolumn = yycolumn+1;
            }
          case 116: break;
          case 41: 
            { System.out.println("Entro caso");
                    return new Symbol(SimbolosGraphik.caso, yyline, yycolumn, new String(yytext()));
            }
          case 117: break;
          case 42: 
            { System.out.println("Entro bool");
                    return new Symbol(SimbolosGraphik.Tbool, yyline, yycolumn, new String(yytext()));
            }
          case 118: break;
          case 43: 
            { System.out.println("Entro Sino");
                    return new Symbol(SimbolosGraphik.sino, yyline, yycolumn, new String(yytext()));
            }
          case 119: break;
          case 44: 
            { System.out.println("Entro Para");
                    return new Symbol(SimbolosGraphik.para, yyline, yycolumn, new String(yytext()));
            }
          case 120: break;
          case 45: 
            { System.out.println("Entro nuevo");
                    return new Symbol(SimbolosGraphik.nuevo, yyline, yycolumn, new String(yytext()));
            }
          case 121: break;
          case 46: 
            { System.out.println("Entro Donde");
                    return new Symbol(SimbolosGraphik.donde, yyline, yycolumn, new String(yytext()));
            }
          case 122: break;
          case 47: 
            { System.out.println("Entro Datos");
                    return new Symbol(SimbolosGraphik.datos, yyline, yycolumn, new String(yytext()));
            }
          case 123: break;
          case 48: 
            { System.out.println("Entro vacio");
                    return new Symbol(SimbolosGraphik.Tvacio, yyline, yycolumn, new String(yytext()));
            }
          case 124: break;
          case 49: 
            { System.out.println("Entro Hacer");
                    return new Symbol(SimbolosGraphik.hacer, yyline, yycolumn, new String(yytext()));
            }
          case 125: break;
          case 50: 
            { System.out.println("Entro falso");
                    return new Symbol(SimbolosGraphik.falso, yyline, yycolumn, new String(yytext()));
            }
          case 126: break;
          case 51: 
            { System.out.println("Entro entero");
                    return new Symbol(SimbolosGraphik.Tentero, yyline, yycolumn, new String(yytext()));
            }
          case 127: break;
          case 52: 
            { System.out.println("Entro cadena");
                    return new Symbol(SimbolosGraphik.Tcadena, yyline, yycolumn, new String(yytext()));
            }
          case 128: break;
          case 53: 
            { System.out.println("Entro inicio");
                    return new Symbol(SimbolosGraphik.inicio, yyline, yycolumn, new String(yytext()));
            }
          case 129: break;
          case 54: 
            { System.out.println("Entro llamar");
                    return new Symbol(SimbolosGraphik.llamar, yyline, yycolumn, new String(yytext()));
            }
          case 130: break;
          case 55: 
            { System.out.println("Entro hereda");
                    return new Symbol(SimbolosGraphik.hereda, yyline, yycolumn, new String(yytext()));
            }
          case 131: break;
          case 56: 
            { System.out.println("Entro decimal");
                    return new Symbol(SimbolosGraphik.Tdecimal, yyline, yycolumn, new String(yytext()));
            }
          case 132: break;
          case 57: 
            { System.out.println("Entro Defecto");
                    return new Symbol(SimbolosGraphik.defecto, yyline, yycolumn, new String(yytext()));
            }
          case 133: break;
          case 58: 
            { System.out.println("Entro Columna");
                    return new Symbol(SimbolosGraphik.columna, yyline, yycolumn, new String(yytext()));
            }
          case 134: break;
          case 59: 
            { System.out.println("Entro privado");
                    return new Symbol(SimbolosGraphik.privado, yyline, yycolumn, new String(yytext()));
            }
          case 135: break;
          case 60: 
            { System.out.println("Entro publico");
                    return new Symbol(SimbolosGraphik.publico, yyline, yycolumn, new String(yytext()));
            }
          case 136: break;
          case 61: 
            { System.out.println("Entro Terminar");
                    return new Symbol(SimbolosGraphik.terminar, yyline, yycolumn, new String(yytext()));
            }
          case 137: break;
          case 62: 
            { System.out.println("Entro retornar");
                    return new Symbol(SimbolosGraphik.retornar, yyline, yycolumn, new String(yytext()));
            }
          case 138: break;
          case 63: 
            { System.out.println("Entro caracter");
                    return new Symbol(SimbolosGraphik.Tcaracter, yyline, yycolumn, new String(yytext()));
            }
          case 139: break;
          case 64: 
            { System.out.println("Entro imprimir");
                    return new Symbol(SimbolosGraphik.imprimir, yyline, yycolumn, new String(yytext()));
            }
          case 140: break;
          case 65: 
            { System.out.println("Entro importar");
                    return new Symbol(SimbolosGraphik.importar, yyline, yycolumn, new String(yytext()));
            }
          case 141: break;
          case 66: 
            { System.out.println("Entro Mientras");
                    return new Symbol(SimbolosGraphik.mientras, yyline, yycolumn, new String(yytext()));
            }
          case 142: break;
          case 67: 
            { System.out.println("Entro llamarHK");
                    return new Symbol(SimbolosGraphik.llamarHK, yyline, yycolumn, new String(yytext()));
            }
          case 143: break;
          case 68: 
            { System.out.println("Entro Procesar");
                    return new Symbol(SimbolosGraphik.procesar, yyline, yycolumn, new String(yytext()));
            }
          case 144: break;
          case 69: 
            { System.out.println("Entro DondeTodo");
                    return new Symbol(SimbolosGraphik.dondetodo, yyline, yycolumn, new String(yytext()));
            }
          case 145: break;
          case 70: 
            { System.out.println("Entro DondeCada");
                    return new Symbol(SimbolosGraphik.dondecada, yyline, yycolumn, new String(yytext()));
            }
          case 146: break;
          case 71: 
            { System.out.println("Entro Continuar");
                    return new Symbol(SimbolosGraphik.continuar, yyline, yycolumn, new String(yytext()));
            }
          case 147: break;
          case 72: 
            { System.out.println("Entro seleccion");
                    return new Symbol(SimbolosGraphik.seleccion, yyline, yycolumn, new String(yytext()));
            }
          case 148: break;
          case 73: 
            { System.out.println("Entro verdadero");
                    return new Symbol(SimbolosGraphik.verdadero, yyline, yycolumn, new String(yytext()));
            }
          case 149: break;
          case 74: 
            { System.out.println("Entro protegido");
                    return new Symbol(SimbolosGraphik.protegido, yyline, yycolumn, new String(yytext()));
            }
          case 150: break;
          case 75: 
            { System.out.println("Entro incluir_HK");
                    return new Symbol(SimbolosGraphik.incluirHK, yyline, yycolumn, new String(yytext()));
            }
          case 151: break;
          case 76: 
            { System.out.println("Entro graphikar_funcion");
                        return new Symbol(SimbolosGraphik.graphikar, yyline, yycolumn, new String(yytext()));
            }
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
