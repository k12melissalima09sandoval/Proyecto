/*------------ Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Analizadores.Graphik;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Ast.Nodo;

//------> Parser, Variables y Metodos

parser code
{: 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    public static Nodo raiz;
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        //Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        //Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int fila= s.left+1;
        int columna = s.right+1;
        
        System.out.println("Error Sintactico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }
:}  

//------> Acciones Gramaticales 
action code 
{:
:}

/*action code
{:
    public void escribirSalida(String salida){
        parser.salida.setText(salida);
    }
:}*/


/*------------ Declaraciones Terminales y No Terminales ---------*/


/*------------ Reglas Semanticas ---------*/

terminal Tentero, Tdecimal, Tcaracter, Tcadena, Tbool, Tvacio, Tals;
terminal protegido, privado, publico;
terminal importar, hereda, var, nuevo, retornar, llamar;
terminal inicio, llamarHK, incluirHK, graphikar;
terminal si, seleccion, sino, caso, defecto, para, mientras, hacer, continuar, terminar;
terminal columna, procesar, donde, dondecada, dondetodo, imprimir,datos;
terminal cad, id, num, dec, carac, verdadero, falso,nombreArchivo;
terminal corAbre, corCierra, llaveAbre, llaveCierra, parenAbre, parenCierra;
terminal mas, menos, por, div, potencia;
terminal or, and, xor, not;
terminal mayorq, menorq, mayorigualq, menorigualq, igualigual, diferente;
terminal incremento, decremento;
terminal igual, dospuntos, punto, coma, fin; 

non terminal Nodo INICIO, CUERPO_ALS, L_ALS, ALS, IN, IM, LLAMAR_INSTANCIA;
non terminal Nodo IMPORTACIONES, L_IMPORTACIONES, INCLUYE_HK, L_INCLUYE;
non terminal Nodo VISIBILIDAD, SENTENCIAS, L_SENT, HEREDA, L_DATOS;
non terminal Nodo DECLARACION_GLOBAL, L_VAR, ASIGNACION, DIM,L_POSICIONES;
non terminal Nodo DECLARACION_LOCAL, ASIGNA, GRAPHIKAR, ACCESO,L_ACCESO;
non terminal Nodo TIPO_DATO, OPCION, EXP, DATOS, CUERPO_DATOS,ARR;
non terminal Nodo COLUMNA, PROCESAR, DONDE, DONDECADA, DONDETODO;
non terminal Nodo ARREGLO, ASIGNACION_ARREGLO;
non terminal Nodo METODO_INICIO, METODOS, PARAMETROS, LLAMADA_ARREGLO;
non terminal Nodo LLAMAR, LLAMARHK, PARAM_LLAMA, L_CUERPO,D,P,A,V;
non terminal Nodo RETORNA, SENTENCIA_SI, SENTENCIA_SINO, ARR_GRAPHIK;
non terminal Nodo SENTENCIA_PARA, ASIGNA_PARA,DECLARACION_PARA, PP;
non terminal Nodo SENTENCIA_HMIENTRAS, SENTENCIA_MIENTRAS;
non terminal Nodo SENTENCIA_SELECCION, CASOS, L_CASO, DEFECTO;
non terminal Nodo TERMINAR, CONTINUAR, IMPRIMIR, L_PARAMETROS, PARAM;
 
precedence left or;
precedence left xor;
precedence left and;
precedence right not;
precedence left igualigual, diferente, mayorq, menorq, mayorigualq, menorigualq;
precedence left mas, menos;
precedence left por, div;
precedence right potencia;
precedence left incremento, decremento;

start with INICIO; 

INICIO ::= {:System.out.println("Empezo Graphik \n");:}IM:a IN:b L_ALS:c
            {:Nodo nuevo = new Nodo("Raiz");
                nuevo.Hijo(a);
                nuevo.Hijo(b);
                nuevo.Hijo(c);
                RESULT = nuevo;
                System.out.println("Finalizo Graphik \n");
                parser.raiz=nuevo;
            :}
        ;
IM ::= IMPORTACIONES:nodo {:RESULT = nodo; :}
    | {:RESULT = new Nodo("Importa");:}
    ;

IMPORTACIONES ::= IMPORTACIONES:importa L_IMPORTACIONES:nodo {:importa.Hijo(nodo); RESULT =importa;:}
                 | L_IMPORTACIONES:nodo 
                    {:Nodo nuevo = new Nodo("Importa"); nuevo.Hijo(nodo);RESULT=nuevo;:}
                 ;

L_IMPORTACIONES ::= importar nombreArchivo:id fin {:RESULT = new Nodo(id);:}
                 ;

IN ::= INCLUYE_HK:nodo {:RESULT = nodo; :}
    | {:RESULT = new Nodo("Incluye");:}
    ;

INCLUYE_HK ::= INCLUYE_HK:incluye L_INCLUYE:nodo {:incluye.Hijo(nodo); RESULT =incluye;:}
            | L_INCLUYE:nodo
                {:Nodo nuevo = new Nodo("Incluye"); nuevo.Hijo(nodo);RESULT=nuevo;:}
            ;

L_INCLUYE ::= incluirHK id:id fin {:RESULT = new Nodo(id);:}
            ;

L_ALS ::= L_ALS:als ALS:nodo {: als.Hijo(nodo); RESULT = als; :}
       | ALS:nodo {:Nodo nuevo = new Nodo("ListaAls"); nuevo.Hijo(nodo); RESULT = nuevo;:}
       ;

ALS ::= Tals id:id VISIBILIDAD:v HEREDA:h llaveAbre CUERPO_ALS:corpo llaveCierra
        {:
            Nodo nuevo = new Nodo("Als");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(v);
            nuevo.Hijo(h);
            nuevo.Hijo(corpo);
            RESULT = nuevo;
        :}
     ;

HEREDA ::= hereda id:id 
        {:  
            Nodo nuevo = new Nodo("Hereda"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i); 
            RESULT = nuevo;
        :}
        |{:RESULT = new Nodo("Hereda");:}
        ;

VISIBILIDAD ::= dospuntos publico {:RESULT = new Nodo("Publico");:}
            | dospuntos privado {:RESULT = new Nodo("Privado");:}
            | dospuntos protegido {:RESULT = new Nodo("Protegido");:}
            | {:RESULT = new Nodo("Publico");:}
            ;

CUERPO_ALS ::= CUERPO_ALS:als L_CUERPO:nodo
                {:als.Hijo(nodo); RESULT = als;:}
            | L_CUERPO:nodo
                {:Nodo nuevo = new Nodo("SentenciasAls");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                :}
            ;

L_CUERPO ::= DECLARACION_GLOBAL:nodo    {:RESULT = nodo;:}
            | METODO_INICIO:nodo        {:RESULT = nodo;:}
            | DATOS:nodo                {:RESULT = nodo;:}
            | METODOS:nodo              {:RESULT = nodo;:}
            ;


DATOS ::= Tvacio datos parenAbre parenCierra llaveAbre CUERPO_DATOS:corpo llaveCierra
            {:
                Nodo nuevo = new Nodo("MetodoDatos");
                Nodo tipo = new Nodo("TipoVacio");
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            :}
       ;

CUERPO_DATOS ::= CUERPO_DATOS:datos L_DATOS:nodo
                    {:datos.Hijo(nodo); RESULT = datos;:}
              | L_DATOS:nodo
                {:
                    Nodo nuevo = new Nodo("CuerpoDatos");
                    nuevo.Hijo(nodo);
                    RESULT = nuevo;
                :}
              ;

L_DATOS ::= COLUMNA:nodo    {:RESULT = nodo;:}
         | PROCESAR:nodo    {:RESULT = nodo;:}
         | DONDE:nodo       {:RESULT = nodo;:}
         | DONDECADA:nodo   {:RESULT = nodo;:}
         | DONDETODO:nodo   {:RESULT = nodo;:}
            ;

COLUMNA ::= columna parenAbre EXP:exp parenCierra
            {:
                Nodo nuevo = new Nodo("Columna");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
         ;

PROCESAR ::= procesar igual EXP:exp fin
            {:
                Nodo nuevo = new Nodo("Procesar");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
          ;

DONDE ::= donde parenAbre EXP:exp parenCierra igual EXP:exp2 fin
            {:
                Nodo nuevo = new Nodo("Donde");
                Nodo e = new Nodo("Exp");
                Nodo e2 = new Nodo("Exp");
                e.Hijo(exp);
                e2.Hijo(exp2);
                nuevo.Hijo(e);
                nuevo.Hijo(e2);
                RESULT = nuevo;
            :}
       ;

DONDECADA ::= dondecada parenAbre EXP:exp parenCierra fin
            {:
                Nodo nuevo = new Nodo("DondeCada");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
           ;

DONDETODO ::= dondetodo parenAbre EXP:exp parenCierra fin
            {:
                Nodo nuevo = new Nodo("DondeTodo");
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
           ;

DECLARACION_GLOBAL ::= var TIPO_DATO:t id:id VISIBILIDAD:v OPCION:op fin
                {: Nodo nuevo = new Nodo("DeclaraGlobalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                :}
            | var TIPO_DATO:t id:id ARREGLO:a VISIBILIDAD:v ASIGNACION_ARREGLO:nodo fin
                {: Nodo nuevo = new Nodo("DeclaraGlobalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                :}
            | var TIPO_DATO:t id:id VISIBILIDAD:v igual nuevo LLAMAR_INSTANCIA:nodo fin
                {: Nodo nuevo = new Nodo("InstanciaGlobal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                :}
            ;

OPCION ::= coma L_VAR:nodo {:RESULT = nodo;:}
        | ASIGNACION:nodo {:Nodo n= new Nodo("Asignacion"); n.Hijo(nodo);RESULT = n;:}
        | {:RESULT = new Nodo("Asignacion");:}
        ;
		
L_VAR ::= L_VAR:nodo coma V:v 
            {: v.setNombre("L");
            nodo.Hijo(v);
            RESULT = nodo;
            :}
       | V:v 
        {:v.setNombre("L");
            Nodo nuevo = new Nodo("ListaID");
        nuevo.Hijo(v);
            RESULT = nuevo;
            :}
        

         ;

V ::= id:id VISIBILIDAD:nodo
           {:Nodo nuevo = new Nodo("");
           Nodo i= new Nodo(id);
                nuevo.Hijo(i);
                nuevo.Hijo(nodo);
            RESULT = nuevo;
            :}
       ;
	   
ARREGLO ::= ARREGLO:arr ARR:a 
                    {:
                        arr.Hijo(a);
                        RESULT=arr;
                    :}
        | ARR:a
        {:Nodo nuevo = new Nodo("Dimensiones");
        nuevo.Hijo(a);
        RESULT = nuevo;
        :}
        ;

ARR ::= corAbre EXP:exp corCierra           
                    {:Nodo nuevo = new Nodo("Exp");
                        nuevo.Hijo(exp);
                        RESULT=nuevo;
                    :}
        ;

TIPO_DATO ::= Tentero
{:  
            RESULT = new Nodo("numero"); 
           :}
           | Tdecimal
{:  
           RESULT= new Nodo("decimal"); 
            :}
           | Tcaracter
{:  
            RESULT = new Nodo("caracter"); 
            :}
           | Tcadena
{:  
            RESULT = new Nodo("cadena"); 
             :}
           | Tbool
{:  
            RESULT= new Nodo("bool"); 
            :}
           | Tvacio
{:  
            RESULT = new Nodo("vacio"); 
            :}
           | id:id
            {:  
            Nodo nuevo = new Nodo("Als"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; :}
           ;

ASIGNACION_ARREGLO ::= igual EXP:nodo {:RESULT = nodo;:}
                    | {:RESULT = new Nodo("Posiciones");:}
                    ;

L_POSICIONES ::= L_POSICIONES:p coma EXP:nodo
                {:p.Hijo(nodo); RESULT = p;:}

              | EXP:nodo
              {:Nodo nuevo = new Nodo("Posiciones"); 
                nuevo.Hijo(nodo); 
                RESULT = nuevo;:}
              ;

ASIGNACION ::= igual EXP:exp
    {:Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;:}
            ;

METODO_INICIO ::= Tvacio inicio parenAbre parenCierra llaveAbre SENTENCIAS:sent llaveCierra
                {:
                    Nodo nuevo = new Nodo("MetodoInicio");
                Nodo corpo = new Nodo("CuerpoInicio");
                Nodo tipo = new Nodo("TipoVacio");
                corpo.Hijo(sent);
                nuevo.Hijo(tipo);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
                :}
               ;

METODOS ::= TIPO_DATO:t id:id parenAbre L_PARAMETROS:p parenCierra VISIBILIDAD:v llaveAbre SENTENCIAS:s llaveCierra
            {:
                Nodo nuevo = new Nodo("Metodo");
                Nodo corpo = new Nodo("CuerpoMetodo");
                Nodo i = new Nodo(id);
                corpo.Hijo(s);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                nuevo.Hijo(p);
                nuevo.Hijo(v);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            :}
         ;

L_PARAMETROS ::= PARAMETROS:nodo {:RESULT = nodo;:}
              | {:RESULT = new Nodo("Parametros");:}
              ;

PARAMETROS ::= PARAMETROS:p coma PP:pp 
            {:
                pp.setNombre("P");
                p.Hijo(pp);
                RESULT = p;
            :}
            | PP:pp 
            {:
                pp.setNombre("P");
                Nodo nuevo = new Nodo("Parametros");
                nuevo.Hijo(pp);
                RESULT = nuevo;
            :}
            ;

PP ::= TIPO_DATO:t id:id
            {:
                Nodo nuevo = new Nodo("");
                Nodo i = new Nodo(id);
                nuevo.Hijo(t);
                nuevo.Hijo(i);
                RESULT = nuevo;
            :}
            ;

SENTENCIAS ::= SENTENCIAS:sent L_SENT:nodo {:sent.Hijo(nodo); RESULT = sent;:}
            | L_SENT:nodo 
                {:Nodo n = new Nodo("Sentencias"); n.Hijo(nodo); RESULT = n;:}
            ;

L_SENT ::= DECLARACION_LOCAL:nodo fin       {:RESULT = nodo;:}
        | LLAMAR:nodo fin                   {:RESULT = nodo;:}
        | LLAMARHK:nodo fin                 {:RESULT = nodo;:}
        | ASIGNA:nodo fin                   {:RESULT = nodo;:}
        | RETORNA:nodo                      {:RESULT = nodo;:}
        | SENTENCIA_SI:nodo                 {:RESULT = nodo;:}
        | SENTENCIA_SELECCION:nodo          {:RESULT = nodo;:}
        | SENTENCIA_PARA:nodo               {:RESULT = nodo;:}
        | SENTENCIA_MIENTRAS:nodo           {:RESULT = nodo;:}
        | SENTENCIA_HMIENTRAS:nodo          {:RESULT = nodo;:}
        | CONTINUAR:nodo                    {:RESULT = nodo;:}
        | TERMINAR:nodo                     {:RESULT = nodo;:}
        | IMPRIMIR:nodo                     {:RESULT = nodo;:}
        | GRAPHIKAR:nodo                    {:RESULT = nodo;:}
        ;

GRAPHIKAR ::= graphikar parenAbre ARR_GRAPHIK:nodo parenCierra fin
            {:Nodo nuevo = new Nodo("Graphikar");
                nuevo.Hijo(nodo);
                RESULT = nuevo;
            :}
           ;

ARR_GRAPHIK ::= EXP:exp {:Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;:}
             
	     ;
		   

IMPRIMIR ::= imprimir parenAbre EXP:exp parenCierra fin 
            {:Nodo nuevo = new Nodo("Imprimir"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
            :}
          ;

CONTINUAR ::= continuar fin                 {:RESULT = new Nodo("Continuar");:}
           ;

TERMINAR ::= terminar fin                   {:RESULT = new Nodo("Terminar");:}
          ;

SENTENCIA_HMIENTRAS ::= hacer llaveAbre SENTENCIAS:sent llaveCierra mientras parenAbre EXP:cond parenCierra fin
                        {:Nodo nuevo = new Nodo("SentenciaHacer");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoHacer"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(s);
                            nuevo.Hijo(e);
                            RESULT = nuevo;
                        :}
                    ;

SENTENCIA_MIENTRAS ::= mientras parenAbre EXP:cond parenCierra llaveAbre SENTENCIAS:sent llaveCierra
                        {:Nodo nuevo = new Nodo("SentenciaMientras");
                            Nodo e = new Nodo("Exp"); 
                            Nodo s = new Nodo("CuerpoMientras"); 
                            s.Hijo(sent);
                            e.Hijo(cond);
                            nuevo.Hijo(e);
                            nuevo.Hijo(s);
                            RESULT = nuevo;
                        :}
                    ;

SENTENCIA_PARA ::= para parenAbre ASIGNA_PARA:a EXP:cond dospuntos EXP:exp parenCierra llaveAbre SENTENCIAS:s llaveCierra
                {:Nodo nuevo = new Nodo("SentenciaPara");
                            Nodo e = new Nodo("Exp"); 
                            Nodo e2 = new Nodo("Exp"); 
                            Nodo sent = new Nodo("CuerpoPara"); 
                            sent.Hijo(s);
                            e.Hijo(cond);
                            e2.Hijo(exp);
                            nuevo.Hijo(a);
                            nuevo.Hijo(e);
                            nuevo.Hijo(e2);
                            nuevo.Hijo(sent);
                            RESULT = nuevo;
                        :}
                ;


ASIGNA_PARA ::= DECLARACION_PARA:nodo dospuntos {:RESULT = nodo;:}
             | ASIGNA:nodo dospuntos            {:RESULT = nodo;:}
             ;

DECLARACION_PARA ::= var TIPO_DATO:t id:id igual EXP:exp
                {: Nodo nuevo = new Nodo("DeclaraLocalVariable");
                Nodo l= new Nodo("ListaID");
                Nodo e= new Nodo("Exp");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                e.Hijo(exp);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(e);
                RESULT = nuevo;
                :}
                  ;

SENTENCIA_SELECCION ::= seleccion parenAbre EXP:exp parenCierra llaveAbre CASOS:casos DEFECTO:def llaveCierra
                        {:Nodo nuevo = new Nodo("SentenciaSeleccion");
                            Nodo e = new Nodo("Exp"); 
                            e.Hijo(exp);
                            nuevo.Hijo(e);
                            nuevo.Hijo(casos);
                            nuevo.Hijo(def);
                            RESULT = nuevo;
                        :}
                     ;

CASOS ::= CASOS:caso L_CASO:nodo {:caso.Hijo(nodo); RESULT = caso;:}
       | L_CASO:nodo {:Nodo nuevo = new Nodo("ListaCasos"); nuevo.Hijo(nodo);RESULT = nuevo;:}
       ;

L_CASO ::= caso EXP:exp dospuntos SENTENCIAS:sent
            {:Nodo nuevo = new Nodo("Caso");
              Nodo e = new Nodo("Exp");
              Nodo c = new Nodo("CuerpoCaso");
                e.Hijo(exp); 
                c.Hijo(sent);
                nuevo.Hijo(e);
                nuevo.Hijo(c);
                RESULT = nuevo;
                :}
        ;

DEFECTO ::= defecto dospuntos SENTENCIAS:sent
            {:Nodo nuevo = new Nodo("CuerpoDefecto"); nuevo.Hijo(sent); RESULT = nuevo;:}
         |{:RESULT = new Nodo("CuerpoDefecto");:}
         ;


SENTENCIA_SI ::= si parenAbre EXP:exp parenCierra llaveAbre SENTENCIAS:corpo llaveCierra SENTENCIA_SINO:corposino
                {:
                    Nodo nuevo = new Nodo("SentenciaSi");
                    Nodo e= new Nodo("Exp");
                    Nodo si= new Nodo("CuerpoSi");
                    si.Hijo(corpo);
                    e.Hijo(exp);
                    nuevo.Hijo(e);
                    nuevo.Hijo(si);
                    nuevo.Hijo(corposino);
                    RESULT = nuevo;
                :}
              ;

SENTENCIA_SINO ::= sino llaveAbre SENTENCIAS:sent llaveCierra
                  {:Nodo nuevo = new Nodo("CuerpoSino");
                    nuevo.Hijo(sent);
                    RESULT = nuevo; :}  
                | {:RESULT = new Nodo("CuerpoSino");:}
                ;

RETORNA ::= retornar EXP:exp fin
        {:Nodo nuevo = new Nodo("Retorno"); 
            Nodo e = new Nodo("Exp");
            e.Hijo(exp);
            nuevo.Hijo(e);
            RESULT = nuevo;
        :}
        ;

DECLARACION_LOCAL ::= var TIPO_DATO:t id:id VISIBILIDAD:v OPCION:op
                {: Nodo nuevo = new Nodo("DeclaraLocalVariable");
                nuevo.Hijo(t);
                if(op.valor.equals("ListaID")){
                    Nodo l= new Nodo("L");
                    Nodo i= new Nodo(id);
                    l.Hijo(i);
                    l.Hijo(v);
                    op.Hijo(l);
                    nuevo.Hijo(op);
                }else {
                    Nodo m = new Nodo("ListaID");
                    Nodo mm = new Nodo("L");
                    Nodo i = new Nodo(id);
                    m.Hijo(mm);
                    mm.Hijo(i);
                    mm.Hijo(v);
                    nuevo.Hijo(m);
                    nuevo.Hijo(op);
                    
                }
                
                RESULT = nuevo;
                :}
            | var TIPO_DATO:t id:id ARREGLO:a VISIBILIDAD:v ASIGNACION_ARREGLO:nodo
                {: Nodo nuevo = new Nodo("DeclaraLocalArreglo");
                Nodo l= new Nodo("ListaID");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(a);
                nuevo.Hijo(nodo);
                RESULT = nuevo;
                :}
            | var TIPO_DATO:t id:id VISIBILIDAD:v igual nuevo LLAMAR_INSTANCIA:nodo
                {: Nodo nuevo = new Nodo("InstanciaLocal");
                Nodo l= new Nodo("ListaID");
                Nodo as= new Nodo("Objeto");
                Nodo i= new Nodo(id);
                l.Hijo(i);
                l.Hijo(v);
                as.Hijo(nodo);
                nuevo.Hijo(t);
                nuevo.Hijo(l);
                nuevo.Hijo(as);
                RESULT = nuevo;
                :}
            ;

LLAMAR_INSTANCIA ::= id:id parenAbre parenCierra
                    {:RESULT = new Nodo(id);:}
                  ;

ASIGNA ::= id:id L_ACCESO:nodo igual EXP:exp
            {:
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("Exp");
                nuevo.Hijo(i);
                e.Hijo(exp);
                nuevo.Hijo(nodo);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
        | id:id L_ACCESO:nodo igual nuevo LLAMAR_INSTANCIA:ins
            {:
                Nodo nuevo = new Nodo("Asignacion");
                Nodo i= new Nodo(id);
                Nodo e= new Nodo("InstanciaLocal");
                nuevo.Hijo(i);
                e.Hijo(ins);
                nuevo.Hijo(nodo);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
        ;
		
L_ACCESO ::= ACCESO:nodo {:RESULT=nodo;:}
	  | {:RESULT= new Nodo("Acceso");:}
	  ;

ACCESO ::= ACCESO:nodo A:a
        {:nodo.Hijo(a); RESULT = nodo;:}
	| A:a
        {:Nodo nuevo = new Nodo("Acceso");nuevo.Hijo(a);RESULT=nuevo;:}
	;

A ::= punto id:id
        {:Nodo nuevo = new Nodo(id); RESULT = nuevo;:}
    ;

LLAMAR ::= llamar id:id L_ACCESO:acceso parenAbre PARAM_LLAMA:nodo parenCierra 
            {:
            Nodo nuevo = new Nodo("LlamaFun");
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            nuevo.Hijo(acceso);
            nuevo.Hijo(nodo);
            RESULT = nuevo;
            :}
        ;

LLAMARHK ::= llamarHK id:id parenAbre PARAM_LLAMA:nodo parenCierra 
            {:

            Nodo nuevo = new Nodo("LlamarHK"); 
            Nodo i = new Nodo(id);  
            nuevo.Hijo(i); 
            nuevo.Hijo(nodo);         
            RESULT = nuevo;    
            :}
        ;

PARAM_LLAMA ::= PARAM:nodo  {:RESULT = nodo;:} 
             | {:RESULT = new Nodo("Parametros");:}
             ;

PARAM ::= PARAM:param coma P:p
            {: param.Hijo(p); RESULT = param;:}

       | P:p 
            {:Nodo nuevo = new Nodo("Parametros"); nuevo.Hijo(p); RESULT = nuevo;:}
       ;
P ::= EXP:exp
    {:Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;:}
    ;

EXP ::= EXP:j mas EXP:m
        {:
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j menos EXP:m
        {:
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j por EXP:m
        {:
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j div EXP:m
        {:
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j potencia EXP:m
        {:
            Nodo nuevo = new Nodo("potencia");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j or EXP:m
        {:
            Nodo nuevo = new Nodo("||");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j xor EXP:m
        {:
            Nodo nuevo = new Nodo("&|");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j and EXP:m
        {:
            Nodo nuevo = new Nodo("&&");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | not EXP:m
        {:
        Nodo nuevo = new Nodo("!");
        nuevo.Hijo(m);
        RESULT = nuevo;
        :}
     | EXP:j menorq EXP:m
        {:
            Nodo nuevo = new Nodo("<");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j mayorq EXP:m
        {:
            Nodo nuevo = new Nodo(">");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j menorigualq EXP:m
        {:
            Nodo nuevo = new Nodo("<=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j mayorigualq EXP:m
        {:
            Nodo nuevo = new Nodo(">=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j igualigual EXP:m
        {:
            Nodo nuevo = new Nodo("==");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j diferente EXP:m
        {:
            Nodo nuevo = new Nodo("!=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}

     | EXP:nodo incremento
        {:
        Nodo nuevo = new Nodo("Incremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        :}
     | EXP:nodo decremento
        {:
        Nodo nuevo = new Nodo("Decremento");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        :}
     | menos EXP:nodo
        {:
        Nodo nuevo = new Nodo("Unario");
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        :}

     | parenAbre EXP:nodo parenCierra  {:RESULT = nodo;:}
     | LLAMAR:nodo                     {:RESULT = nodo;:} 
     | LLAMADA_ARREGLO:nodo            {:RESULT = nodo;:}
     | LLAMARHK:nodo                   {:RESULT = nodo;:}
     | llaveAbre L_POSICIONES:nodo llaveCierra {:RESULT = nodo;:}
     | id:id ACCESO:nodo
        {:
        Nodo nuevo = new Nodo("Acceso");
        Nodo n=new Nodo(id);
        nuevo.Hijo(n);
        nuevo.Hijo(nodo);
        RESULT = nuevo;
        :}
        
     | num:num
        {:  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; :}
     | cad:cad
        {:  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); RESULT = nuevo; :}
     | dec:num
        {:  Nodo nuevo = new Nodo("decimal"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; :}
     | carac:letra
        {:  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; :}
     | id:id
        {:  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; :}
     | falso:id
        {:  Nodo nuevo = new Nodo("falso"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; :}
     | verdadero:id
        {:  Nodo nuevo = new Nodo("verdadero"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; :}
     ;

LLAMADA_ARREGLO ::= id:id DIM:dim
                {:
                    Nodo nuevo = new Nodo("LlamaArreglo");
                    Nodo n=new Nodo(id);
                    nuevo.Hijo(n);
                    nuevo.Hijo(dim);
                    RESULT = nuevo;
                :}
        
                ;
DIM ::= DIM:dim D:d
        {:dim.Hijo(d);RESULT = dim;:}
        | D:dim 
        {:                    
            Nodo d = new Nodo("Dimensiones");
            d.Hijo(dim);
            RESULT = d;:}
        
     ;

D ::= corAbre EXP:exp corCierra 
        {:Nodo nuevo = new Nodo("Exp"); nuevo.Hijo(exp); RESULT = nuevo;:}
     ;


 