
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Haskell;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Ast.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HaskellSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public HaskellSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HaskellSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HaskellSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\047\002\000\002\002" +
    "\004\000\002\005\004\000\002\005\003\000\002\006\007" +
    "\000\002\004\005\000\002\004\003\000\002\003\003\000" +
    "\002\003\003\000\002\011\004\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\023" +
    "\011\000\002\024\006\000\002\025\004\000\002\025\003" +
    "\000\002\026\006\000\002\020\003\000\002\020\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\013\010\000\002\022\006\000\002\027" +
    "\006\000\002\030\006\000\002\031\006\000\002\032\006" +
    "\000\002\033\003\000\002\033\003\000\002\035\006\000" +
    "\002\036\006\000\002\037\006\000\002\040\006\000\002" +
    "\041\006\000\002\042\006\000\002\043\006\000\002\044" +
    "\006\000\002\045\005\000\002\045\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\046\005\000" +
    "\002\014\005\000\002\015\003\000\002\015\003\000\002" +
    "\017\005\000\002\017\003\000\002\016\011\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\004\000\002\021\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\010\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\066\000\001\002\000\004\066\011\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufffd\066\ufffd\001\002\000\006\002\uffff\066" +
    "\011\001\002\000\022\005\021\024\022\032\024\036\031" +
    "\063\034\064\012\065\020\066\025\001\002\000\106\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\001\002\000\010\023\ufffa\030\ufffa\035\ufffa\001" +
    "\002\000\106\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037" +
    "\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\066\uffae\001\002\000\106\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\035\uffaf\036\uffaf\037\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\001\002\000\106\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\001\002\000\046\004\057" +
    "\005\045\006\053\007\041\010\051\011\055\012\052\013" +
    "\043\014\044\015\060\016\046\017\056\020\054\021\047" +
    "\022\050\023\ufff9\030\ufff9\035\ufff9\001\002\000\106\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\001\002\000\020\005\021\024\022\036\031\063" +
    "\034\064\012\065\020\066\025\001\002\000\024\040\201" +
    "\041\170\043\172\044\202\045\174\046\175\047\205\055" +
    "\203\066\167\001\002\000\006\023\120\030\121\001\002" +
    "\000\022\005\021\024\022\032\105\036\031\063\034\064" +
    "\012\065\020\066\025\001\002\000\110\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\026\100\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\001\002\000\106\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036" +
    "\uffad\037\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\001\002\000\106\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\001\002\000\106\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\020" +
    "\005\021\024\022\036\031\063\034\064\012\065\020\066" +
    "\025\001\002\000\106\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\001\002\000\106\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\001\002\000\106\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\001\002\000\106" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\001\002\000\106\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002\000" +
    "\010\023\ufff8\030\ufff8\035\ufff8\001\002\000\042\004\057" +
    "\005\045\006\053\007\041\010\051\011\055\012\052\013" +
    "\043\014\044\015\060\016\046\017\056\020\054\021\047" +
    "\022\050\037\042\001\002\000\020\005\021\024\022\036" +
    "\031\063\034\064\012\065\020\066\025\001\002\000\106" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\001\002\000\020\005\021\024\022\036\031" +
    "\063\034\064\012\065\020\066\025\001\002\000\020\005" +
    "\021\024\022\036\031\063\034\064\012\065\020\066\025" +
    "\001\002\000\020\005\021\024\022\036\031\063\034\064" +
    "\012\065\020\066\025\001\002\000\020\005\021\024\022" +
    "\036\031\063\034\064\012\065\020\066\025\001\002\000" +
    "\020\005\021\024\022\036\031\063\034\064\012\065\020" +
    "\066\025\001\002\000\020\005\021\024\022\036\031\063" +
    "\034\064\012\065\020\066\025\001\002\000\020\005\021" +
    "\024\022\036\031\063\034\064\012\065\020\066\025\001" +
    "\002\000\020\005\021\024\022\036\031\063\034\064\012" +
    "\065\020\066\025\001\002\000\020\005\021\024\022\036" +
    "\031\063\034\064\012\065\020\066\025\001\002\000\020" +
    "\005\021\024\022\036\031\063\034\064\012\065\020\066" +
    "\025\001\002\000\020\005\021\024\022\036\031\063\034" +
    "\064\012\065\020\066\025\001\002\000\020\005\021\024" +
    "\022\036\031\063\034\064\012\065\020\066\025\001\002" +
    "\000\020\005\021\024\022\036\031\063\034\064\012\065" +
    "\020\066\025\001\002\000\020\005\021\024\022\036\031" +
    "\063\034\064\012\065\020\066\025\001\002\000\106\004" +
    "\057\005\045\006\053\007\041\010\051\011\055\012\052" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\106\004\uffbe\005\uffbe\006\053\007" +
    "\041\010\051\011\055\012\052\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000\106" +
    "\004\057\005\045\006\053\007\041\010\051\011\055\012" +
    "\052\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\001\002\000\106\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\055\012\052\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001\002\000" +
    "\106\004\057\005\045\006\053\007\041\010\051\011\055" +
    "\012\052\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\001\002\000\106\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\055\012\052\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002" +
    "\000\106\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\055\012\052\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\001\002\000\106\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\055\012\052\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\035\uffba\036\uffba\037\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\001" +
    "\002\000\106\004\057\005\045\006\053\007\041\010\051" +
    "\011\055\012\052\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\001\002\000\106\004\057\005" +
    "\045\006\053\007\041\010\051\011\055\012\052\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\035\uffb1\036\uffb1\037\uffb1\056\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\001\002\000\106\004\057\005\045\006\053\007\041\010" +
    "\051\011\055\012\052\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\106\004\uffbd" +
    "\005\uffbd\006\053\007\041\010\051\011\055\012\052\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\001\002\000\106\004\057\005\045\006\053\007\041" +
    "\010\051\011\055\012\052\013\uffb6\014\uffb6\015\060\016" +
    "\046\017\056\020\054\021\047\022\050\023\uffb6\024\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000\106\004" +
    "\057\005\045\006\053\007\041\010\051\011\055\012\052" +
    "\013\uffb7\014\044\015\060\016\046\017\056\020\054\021" +
    "\047\022\050\023\uffb7\024\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\035\uffb7\036\uffb7\037\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\001\002\000\106\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\055\012\052\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\020" +
    "\005\021\024\022\036\031\063\034\064\012\065\020\066" +
    "\025\001\002\000\106\004\057\005\045\006\053\007\041" +
    "\010\051\011\055\012\052\013\043\014\044\015\060\016" +
    "\046\017\056\020\054\021\047\022\050\023\uffc5\024\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\001\002\000\004\033" +
    "\117\001\002\000\044\004\057\005\045\006\053\007\041" +
    "\010\051\011\055\012\052\013\043\014\044\015\060\016" +
    "\046\017\056\020\054\021\047\022\050\030\uffc0\033\uffc0" +
    "\001\002\000\004\033\uffc2\001\002\000\020\005\021\024" +
    "\022\036\031\063\034\064\012\065\020\066\025\001\002" +
    "\000\006\030\107\033\uffc3\001\002\000\020\005\021\024" +
    "\022\036\031\063\034\064\012\065\020\066\025\001\002" +
    "\000\044\004\057\005\045\006\053\007\041\010\051\011" +
    "\055\012\052\013\043\014\044\015\060\016\046\017\056" +
    "\020\054\021\047\022\050\030\uffc1\033\uffc1\001\002\000" +
    "\006\030\107\033\112\001\002\000\004\030\113\001\002" +
    "\000\004\032\114\001\002\000\020\005\021\024\022\036" +
    "\031\063\034\064\012\065\020\066\025\001\002\000\006" +
    "\030\107\033\116\001\002\000\004\033\uffbf\001\002\000" +
    "\046\005\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\035\uffc4\036\uffc4\056\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\001\002" +
    "\000\016\024\137\032\024\056\156\061\127\064\123\066" +
    "\141\001\002\000\022\005\021\024\022\032\024\036\031" +
    "\063\034\064\012\065\020\066\025\001\002\000\010\023" +
    "\ufffb\030\ufffb\035\ufffb\001\002\000\026\024\uffc6\025\uffc6" +
    "\031\uffc6\032\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\064" +
    "\uffc6\066\uffc6\001\002\000\024\024\uffdf\031\uffdf\032\uffdf" +
    "\056\uffdf\060\uffdf\061\uffdf\062\uffdf\064\uffdf\066\uffdf\001" +
    "\002\000\026\024\uffdd\025\210\031\uffdd\032\uffdd\056\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\064\uffdd\066\uffdd\001\002\000" +
    "\024\024\uffe4\031\uffe4\032\uffe4\056\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\064\uffe4\066\uffe4\001\002\000\022\005\021\024" +
    "\022\032\024\036\031\063\034\064\012\065\020\066\025" +
    "\001\002\000\020\024\137\032\024\056\156\061\127\062" +
    "\255\064\123\066\141\001\002\000\024\024\uffe5\031\uffe5" +
    "\032\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\064\uffe5\066" +
    "\uffe5\001\002\000\024\024\uffdb\031\uffdb\032\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\064\uffdb\066\uffdb\001\002\000" +
    "\024\024\ufff5\031\ufff5\032\ufff5\056\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\064\ufff5\066\ufff5\001\002\000\024\024\uffeb\031" +
    "\uffeb\032\uffeb\056\uffeb\060\uffeb\061\uffeb\062\uffeb\064\uffeb" +
    "\066\uffeb\001\002\000\024\024\ufff6\031\ufff6\032\ufff6\056" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\064\ufff6\066\ufff6\001\002" +
    "\000\024\024\ufff3\031\ufff3\032\ufff3\056\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\064\ufff3\066\ufff3\001\002\000\040\040\201" +
    "\041\170\042\171\043\172\044\202\045\174\046\175\047" +
    "\205\050\200\051\173\052\177\053\204\054\176\055\203" +
    "\066\167\001\002\000\024\024\uffe3\031\uffe3\032\uffe3\056" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\064\uffe3\066\uffe3\001\002" +
    "\000\030\024\uffc7\025\uffc7\026\100\031\uffc7\032\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7\066\uffc7\001\002" +
    "\000\024\024\uffe1\031\uffe1\032\uffe1\056\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\064\uffe1\066\uffe1\001\002\000\024\024\uffde" +
    "\031\uffde\032\uffde\056\uffde\060\uffde\061\uffde\062\uffde\064" +
    "\uffde\066\uffde\001\002\000\024\024\uffe8\031\uffe8\032\uffe8" +
    "\056\uffe8\060\uffe8\061\uffe8\062\uffe8\064\uffe8\066\uffe8\001" +
    "\002\000\024\024\ufff4\031\ufff4\032\ufff4\056\ufff4\060\ufff4" +
    "\061\ufff4\062\ufff4\064\ufff4\066\ufff4\001\002\000\024\024" +
    "\uffdc\031\uffdc\032\uffdc\056\uffdc\060\uffdc\061\uffdc\062\uffdc" +
    "\064\uffdc\066\uffdc\001\002\000\024\024\uffe9\031\uffe9\032" +
    "\uffe9\056\uffe9\060\uffe9\061\uffe9\062\uffe9\064\uffe9\066\uffe9" +
    "\001\002\000\024\024\uffe7\031\uffe7\032\uffe7\056\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\064\uffe7\066\uffe7\001\002\000\024" +
    "\024\uffe0\031\uffe0\032\uffe0\056\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\064\uffe0\066\uffe0\001\002\000\026\024\uffc9\025\uffc9" +
    "\031\uffc9\032\uffc9\056\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\066\uffc9\001\002\000\024\024\uffe6\031\uffe6\032\uffe6" +
    "\056\uffe6\060\uffe6\061\uffe6\062\uffe6\064\uffe6\066\uffe6\001" +
    "\002\000\024\024\uffea\031\uffea\032\uffea\056\uffea\060\uffea" +
    "\061\uffea\062\uffea\064\uffea\066\uffea\001\002\000\026\024" +
    "\uffc8\025\uffc8\031\uffc8\032\uffc8\056\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\064\uffc8\066\uffc8\001\002\000\020\005\021\024" +
    "\022\036\031\063\034\064\012\065\020\066\025\001\002" +
    "\000\024\024\uffe2\031\uffe2\032\uffe2\056\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\064\uffe2\066\uffe2\001\002\000\042\004\057" +
    "\005\045\006\053\007\041\010\051\011\055\012\052\013" +
    "\043\014\044\015\060\016\046\017\056\020\054\021\047" +
    "\022\050\057\161\001\002\000\016\024\137\032\024\056" +
    "\156\061\127\064\123\066\141\001\002\000\020\024\137" +
    "\032\024\056\156\060\163\061\127\064\123\066\141\001" +
    "\002\000\016\024\137\032\024\056\156\061\127\064\123" +
    "\066\141\001\002\000\024\024\ufff7\031\ufff7\032\ufff7\056" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\064\ufff7\066\ufff7\001\002" +
    "\000\020\024\137\032\024\056\156\061\127\062\166\064" +
    "\123\066\141\001\002\000\024\024\ufff2\031\ufff2\032\ufff2" +
    "\056\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2\066\ufff2\001" +
    "\002\000\004\034\251\001\002\000\020\005\021\024\022" +
    "\036\031\063\034\064\012\065\020\066\025\001\002\000" +
    "\004\066\243\001\002\000\006\032\024\066\221\001\002" +
    "\000\010\032\024\064\123\066\207\001\002\000\020\005" +
    "\021\024\022\036\031\063\034\064\012\065\020\066\025" +
    "\001\002\000\010\032\024\064\123\066\207\001\002\000" +
    "\010\032\024\064\123\066\207\001\002\000\010\032\024" +
    "\064\123\066\207\001\002\000\010\032\024\064\123\066" +
    "\207\001\002\000\020\005\021\024\022\036\031\063\034" +
    "\064\012\065\020\066\025\001\002\000\006\032\024\066" +
    "\221\001\002\000\010\032\024\064\123\066\207\001\002" +
    "\000\010\032\024\064\123\066\207\001\002\000\010\032" +
    "\024\064\123\066\207\001\002\000\006\024\211\025\210" +
    "\001\002\000\026\024\uffc7\025\uffc7\031\uffc7\032\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\064\uffc7\066\uffc7\001\002" +
    "\000\010\032\024\064\123\066\207\001\002\000\106\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\001\002\000\026\024\uffca\025\uffca\031\uffca\032" +
    "\uffca\056\uffca\060\uffca\061\uffca\062\uffca\064\uffca\066\uffca" +
    "\001\002\000\006\024\214\025\210\001\002\000\024\024" +
    "\uffcd\031\uffcd\032\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\064\uffcd\066\uffcd\001\002\000\006\024\216\025\210\001" +
    "\002\000\106\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\001\002\000\004\024\uffd3\001" +
    "\002\000\004\024\222\001\002\000\004\024\uffd4\001\002" +
    "\000\106\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\066\uffd5\001\002\000\042\004\057\005\045" +
    "\006\053\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\054\021\047\022\050" +
    "\024\224\001\002\000\106\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\001\002\000\006" +
    "\024\226\025\210\001\002\000\024\024\uffd0\031\uffd0\032" +
    "\uffd0\056\uffd0\060\uffd0\061\uffd0\062\uffd0\064\uffd0\066\uffd0" +
    "\001\002\000\006\024\230\025\210\001\002\000\024\024" +
    "\uffce\031\uffce\032\uffce\056\uffce\060\uffce\061\uffce\062\uffce" +
    "\064\uffce\066\uffce\001\002\000\006\024\232\025\210\001" +
    "\002\000\024\024\uffcc\031\uffcc\032\uffcc\056\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\064\uffcc\066\uffcc\001\002\000\006\024" +
    "\234\025\210\001\002\000\106\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\001\002\000" +
    "\042\004\057\005\045\006\053\007\041\010\051\011\055" +
    "\012\052\013\043\014\044\015\060\016\046\017\056\020" +
    "\054\021\047\022\050\024\236\001\002\000\106\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\001\002\000\006\024\240\025\210\001\002\000\024" +
    "\024\uffcf\031\uffcf\032\uffcf\056\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\066\uffcf\001\002\000\004\024\242\001\002" +
    "\000\106\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\001\002\000\004\023\244\001\002" +
    "\000\010\032\024\064\123\066\207\001\002\000\006\024" +
    "\246\025\210\001\002\000\024\024\uffda\031\uffda\032\uffda" +
    "\056\uffda\060\uffda\061\uffda\062\uffda\064\uffda\066\uffda\001" +
    "\002\000\042\004\057\005\045\006\053\007\041\010\051" +
    "\011\055\012\052\013\043\014\044\015\060\016\046\017" +
    "\056\020\054\021\047\022\050\024\250\001\002\000\106" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\056\uffd7" +
    "\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\001\002\000\022\005\021\024\022\032\024" +
    "\036\031\063\034\064\012\065\020\066\025\001\002\000" +
    "\006\030\121\035\253\001\002\000\004\024\254\001\002" +
    "\000\106\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\001\002\000\006\002\ufffc\066\ufffc" +
    "\001\002\000\022\005\021\024\022\032\024\036\031\063" +
    "\034\064\012\065\020\066\025\001\002\000\060\004\057" +
    "\005\045\006\053\007\041\010\051\011\055\012\052\013" +
    "\043\014\044\015\060\016\046\017\056\020\054\021\047" +
    "\022\050\024\uffed\027\uffed\032\uffed\036\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\001\002\000\024\005\uffec\024\uffec" +
    "\027\uffec\032\uffec\036\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\001\002\000\024\005\021\024\022\032\024\036\031" +
    "\062\270\063\034\064\012\065\020\066\025\001\002\000" +
    "\004\027\264\001\002\000\024\005\uffef\024\uffef\032\uffef" +
    "\036\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\001" +
    "\002\000\016\024\137\032\024\056\156\061\127\064\123" +
    "\066\141\001\002\000\020\024\137\031\266\032\024\056" +
    "\156\061\127\064\123\066\141\001\002\000\024\005\uffee" +
    "\024\uffee\032\uffee\036\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\001\002\000\024\005\ufff0\024\ufff0\032\ufff0" +
    "\036\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\001" +
    "\002\000\024\024\ufff1\031\ufff1\032\ufff1\056\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\064\ufff1\066\ufff1\001\002\000\106\004" +
    "\uffac\005\uffac\006\053\007\041\010\051\011\055\012\052" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\035\uffac\036\uffac\037\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\001\002\000\006\002\ufffe\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\002\004\047\003\001\001\000\006\005" +
    "\007\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\271\001\001\000\036\003" +
    "\012\004\022\010\015\014\036\021\016\022\034\027\031" +
    "\030\026\031\032\032\035\035\014\036\013\044\025\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\010\015\021\270\022\034" +
    "\027\031\030\026\031\032\032\035\035\014\036\013\044" +
    "\025\046\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\010\015\015\101\016\103\017\105\021\102\022" +
    "\034\027\031\030\026\031\032\032\035\035\014\036\013" +
    "\044\025\046\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\015" +
    "\021\037\022\034\027\031\030\026\031\032\032\035\035" +
    "\014\036\013\044\025\046\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\015\021\076\022\034\027\031\030\026\031\032\032" +
    "\035\035\014\036\013\044\025\046\027\001\001\000\002" +
    "\001\001\000\030\010\015\021\075\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\074\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\073\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\072\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\071\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\070\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\067\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\066\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\065\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\064\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\063\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\062\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\061\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\030\010\015\021\060\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\015\021\100\022\034\027\031\030\026\031\032\032\035" +
    "\035\014\036\013\044\025\046\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\015\017\110\021\102\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\002\001\001\000\030\010\015\021\107\022" +
    "\034\027\031\030\026\031\032\032\035\035\014\036\013" +
    "\044\025\046\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\015" +
    "\017\114\021\102\022\034\027\031\030\026\031\032\032" +
    "\035\035\014\036\013\044\025\046\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\007" +
    "\135\010\131\011\127\012\134\013\133\014\154\022\153" +
    "\023\132\024\144\027\146\030\143\031\147\032\152\034" +
    "\151\035\130\036\125\037\137\040\156\041\141\042\150" +
    "\043\123\044\142\045\124\046\145\001\001\000\034\003" +
    "\121\010\015\014\036\021\016\022\034\027\031\030\026" +
    "\031\032\032\035\035\014\036\013\044\025\046\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\015\014" +
    "\257\020\255\021\256\022\034\027\031\030\026\031\032" +
    "\032\035\035\014\036\013\044\025\046\027\001\001\000" +
    "\060\007\135\010\131\012\163\013\133\014\154\022\153" +
    "\023\132\024\144\027\146\030\143\031\147\032\152\034" +
    "\151\035\130\036\125\037\137\040\156\041\141\042\150" +
    "\043\123\044\142\045\124\046\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\015\021\157\022\034\027\031" +
    "\030\026\031\032\032\035\035\014\036\013\044\025\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\007\135\010\131\011\161\012\134\013\133\014\154\022" +
    "\153\023\132\024\144\027\146\030\143\031\147\032\152" +
    "\034\151\035\130\036\125\037\137\040\156\041\141\042" +
    "\150\043\123\044\142\045\124\046\145\001\001\000\060" +
    "\007\135\010\131\012\163\013\133\014\154\022\153\023" +
    "\132\024\144\027\146\030\143\031\147\032\152\034\151" +
    "\035\130\036\125\037\137\040\156\041\141\042\150\043" +
    "\123\044\142\045\124\046\145\001\001\000\062\007\135" +
    "\010\131\011\164\012\134\013\133\014\154\022\153\023" +
    "\132\024\144\027\146\030\143\031\147\032\152\034\151" +
    "\035\130\036\125\037\137\040\156\041\141\042\150\043" +
    "\123\044\142\045\124\046\145\001\001\000\002\001\001" +
    "\000\060\007\135\010\131\012\163\013\133\014\154\022" +
    "\153\023\132\024\144\027\146\030\143\031\147\032\152" +
    "\034\151\035\130\036\125\037\137\040\156\041\141\042" +
    "\150\043\123\044\142\045\124\046\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\010\015\021\246\022" +
    "\034\027\031\030\026\031\032\032\035\035\014\036\013" +
    "\044\025\046\027\001\001\000\002\001\001\000\006\014" +
    "\216\033\240\001\001\000\010\014\154\034\151\045\236" +
    "\001\001\000\030\010\015\021\234\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\010\014\154\034\151\045\232\001\001\000" +
    "\010\014\154\034\151\045\230\001\001\000\010\014\154" +
    "\034\151\045\226\001\001\000\010\014\154\034\151\045" +
    "\224\001\001\000\030\010\015\021\222\022\034\027\031" +
    "\030\026\031\032\032\035\035\014\036\013\044\025\046" +
    "\027\001\001\000\006\014\216\033\217\001\001\000\010" +
    "\014\154\034\151\045\214\001\001\000\010\014\154\034" +
    "\151\045\212\001\001\000\010\014\154\034\151\045\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\154\034\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\154" +
    "\034\151\045\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\012" +
    "\004\251\010\015\014\036\021\016\022\034\027\031\030" +
    "\026\031\032\032\035\035\014\036\013\044\025\046\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\010\015\014\257\020\261" +
    "\021\256\022\034\025\260\026\262\027\031\030\026\031" +
    "\032\032\035\035\014\036\013\044\025\046\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\015\014" +
    "\257\020\261\021\256\022\034\026\266\027\031\030\026" +
    "\031\032\032\035\035\014\036\013\044\025\046\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\007\135" +
    "\010\131\011\264\012\134\013\133\014\154\022\153\023" +
    "\132\024\144\027\146\030\143\031\147\032\152\034\151" +
    "\035\130\036\125\037\137\040\156\041\141\042\150\043" +
    "\123\044\142\045\124\046\145\001\001\000\060\007\135" +
    "\010\131\012\163\013\133\014\154\022\153\023\132\024" +
    "\144\027\146\030\143\031\147\032\152\034\151\035\130" +
    "\036\125\037\137\040\156\041\141\042\150\043\123\044" +
    "\142\045\124\046\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HaskellSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HaskellSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HaskellSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    public static Nodo raiz;

    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+2);
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+2);
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HaskellSintactico$actions {


    

  private final HaskellSintactico parser;

  /** Constructor */
  CUP$HaskellSintactico$actions(HaskellSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HaskellSintactico$do_action_part00000000(
    int                        CUP$HaskellSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HaskellSintactico$parser,
    java.util.Stack            CUP$HaskellSintactico$stack,
    int                        CUP$HaskellSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HaskellSintactico$result;

      /* select the action based on the action number */
      switch (CUP$HaskellSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		RESULT = start_val;
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HaskellSintactico$parser.done_parsing();
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;

                System.out.println("Empezo\n");
           
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 FUNCION 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                System.out.println("Finalizo\n");
                parser.raiz = nodo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION ::= FUNCION L_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo fun = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                nodo.Hijo(fun);
                RESULT = nodo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= L_FUNCION 
            {
              Nodo RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo fun = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("CuerpoArchivo");
                nuevo.Hijo(fun);
                RESULT = nuevo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_FUNCION ::= id PARAMETROS igual CUERPO fin 
            {
              Nodo RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
                    Nodo nuevo = new Nodo("Funcion");
                    Nodo nombre = new Nodo(name);
                    Nodo cuerpo = new Nodo("CuerpoFuncion");
                    cuerpo.Hijo(corpo);
                    nuevo.Hijo(nombre);
                    nuevo.Hijo(param);
                    nuevo.Hijo(cuerpo);
                    RESULT = nuevo;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_FUNCION",4, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROS ::= PARAMETROS coma L_PARAM 
            {
              Nodo RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  
                    param.Hijo(p); 
                    RESULT= param;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETROS ::= L_PARAM 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                    Nodo nuevo = new Nodo("Parametros");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_PARAM ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                RESULT = exp;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_PARAM ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = lista; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO L_CUERPO 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                sent.Hijo(cuerpo);
                RESULT=sent;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= L_CUERPO 
            {
              Nodo RESULT =null;
		int sentencialeft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int sentenciaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo sentencia = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Sentencias");
                nuevo.Hijo(sentencia);
                RESULT = nuevo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_CUERPO ::= IF 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_CUERPO ::= CASE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // L_CUERPO ::= FUNCIONES_PROPIAS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= si EXP entonces CUERPO sino CUERPO fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).value;
		int corpoifleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).left;
		int corpoifright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).right;
		Nodo corpoif = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).value;
		int corposinoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int corposinoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo corposino = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("If");
            Nodo novo = new Nodo("Else");
            Nodo cuerpo = new Nodo("CuerpoIf");
            Nodo cuerpo2 = new Nodo("CuerpoSino");
            Nodo cond = new Nodo("Exp");
            cond.Hijo(exp);
            cuerpo.Hijo(corpoif);
            cuerpo2.Hijo(corposino);
            nuevo.Hijo(cond);
            nuevo.Hijo(cuerpo);
            nuevo.Hijo(cuerpo2);
            RESULT = nuevo;            
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASE ::= caso EXP_CASO CASOS fin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Case");
            nuevo.Hijo(exp);
            nuevo.Hijo(corpo);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASE",18, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASOS ::= CASOS L_CASOS 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            caso.Hijo(exp);
            RESULT = caso;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASOS ::= L_CASOS 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("Lista_Casos");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",19, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // L_CASOS ::= EXP_CASO dospuntos CUERPO puntoycoma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).value;
		int corpoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int corporight = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo corpo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
                Nodo nuevo = new Nodo("Caso");
                nuevo.Hijo(v);
                nuevo.Hijo(corpo);
                RESULT = nuevo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",20, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP_CASO ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("Exp");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP_CASO",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP_CASO ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		RESULT = lista;
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP_CASO",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES_PROPIAS ::= DECLARA_LISTA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES_PROPIAS ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES_PROPIAS ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONES_PROPIAS ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONES_PROPIAS ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES_PROPIAS ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES_PROPIAS ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES_PROPIAS ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES_PROPIAS ::= REVERS 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES_PROPIAS ::= IMPR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES_PROPIAS ::= PAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES_PROPIAS ::= ASC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES_PROPIAS ::= DESC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES_PROPIAS ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES_PROPIAS ::= CONCATENA 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONES_PROPIAS ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONES_PROPIAS ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARA_LISTA ::= dolar let id igual CONCATENA dolar 
            {
              Nodo RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
                    Nodo nuevo = new Nodo("D_Lista");
                    Nodo name = new Nodo(nombre);
                    nuevo.Hijo(name);
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DECLARA_LISTA",9, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Nodo RESULT =null;
		int calculaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int calcularight = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Object calcula = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
                Nodo cal = new Nodo("Calcular");
                Nodo expresion = new Nodo("Exp");
                expresion.Hijo(exp);
                cal.Hijo(expresion);
                RESULT = cal;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",16, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUCC ::= dolar succ EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Succ");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("SUCC",21, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECC ::= dolar decc EXP dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Decc");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DECC",22, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MIN ::= dolar min M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Min");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MIN",23, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MAX ::= dolar max M dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Max");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MAX",24, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // M ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 Nodo nuevo = new Nodo("id");
           Nodo i = new Nodo(id); 
           nuevo.Hijo(i);
           RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("M",25, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // M ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = lista; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("M",25, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SUM ::= dolar sum CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Sum");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("SUM",27, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRODUCT ::= dolar product CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Product");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PRODUCT",28, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // REVERS ::= dolar revers CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Revers");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("REVERS",29, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPR ::= dolar impr CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Impr");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("IMPR",30, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PAR ::= dolar par CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Par");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PAR",31, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASC ::= dolar asc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Asc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("ASC",32, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DESC ::= dolar desc CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Desc");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DESC",33, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LENGTH ::= dolar tam CONCATENA dolar 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		
            Nodo nuevo = new Nodo("Length");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LENGTH",34, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONCATENA ::= CONCATENA concatena C_L 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 
                c.Hijo(l);  
                RESULT = c; 
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",35, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONCATENA ::= C_L 
            {
              Nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo l = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                Nodo lista = new Nodo("Concatena");
                lista.Hijo(l);
                RESULT = lista;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",35, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // C_L ::= LISTA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		RESULT = lista;
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("C_L",26, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // C_L ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("C_L",26, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // C_L ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("C_L",26, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INDICE ::= id indice EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
                Nodo nuevo = new Nodo("Indice");
                Nodo nombre = new Nodo(id);
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(nombre);
                nuevo.Hijo(e);
                RESULT = nuevo;
            
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("INDICE",36, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA ::= corAbre LISTAS corCierra 
            {
              Nodo RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo listas = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		 RESULT = listas; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTAS ::= EXPRESIONES 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		RESULT = exp; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",11, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTAS ::= MAS_CORCH 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		RESULT = lista; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",11, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESIONES ::= EXPRESIONES coma EXP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",13, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESIONES ::= EXP 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 
                    Nodo lista = new Nodo("Lista");
                    lista.Hijo(exp); 
                    RESULT = lista; 
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",13, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MAS_CORCH ::= corAbre EXPRESIONES corCierra coma corAbre EXPRESIONES corCierra 
            {
              Nodo RESULT =null;
		int nivel1left = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).left;
		int nivel1right = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).right;
		Nodo nivel1 = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)).value;
		int nivel2left = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int nivel2right = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo nivel2 = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		Nodo nivel = new Nodo("2Niveles");
                    nivel.Hijo(nivel1);
                    nivel.Hijo(nivel2);
                    RESULT = nivel;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",12, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP mas EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP menos EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP por EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP div EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP residuo EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("mod");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP sqrt EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("sqrt");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP pot EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("pot");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP or EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("||");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP and EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("&&");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP menorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= EXP mayorq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= EXP menorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("<=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= EXP mayorigualq EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo(">=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= EXP igualigual EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("==");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= EXP diferente EXP 
            {
              Nodo RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo j = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo m = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("!=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= SUM 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= PRODUCT 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= LENGTH 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= menos EXP 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		
            Nodo nuevo = new Nodo("Unario");
            nuevo.Hijo(nodo);
            RESULT = nuevo;
        
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= parenAbre EXP parenCierra 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= LLAMA_FUNCION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= INDICE 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= SUCC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= DECC 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= MIN 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= MAX 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		 RESULT = nodo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= entero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("numero"); 
            Nodo n = new Nodo(num);
            nuevo.Hijo(n); 
            RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("cadena"); 
            Nodo n = new Nodo(cad.toString().replace("\"", ""));
            nuevo.Hijo(n); RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= caracter 
            {
              Nodo RESULT =null;
		int letraleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int letraright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object letra = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("caracter"); 
            Nodo l = new Nodo(letra);
            nuevo.Hijo(l); 
            RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= id 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.peek()).value;
		  Nodo nuevo = new Nodo("id"); 
            Nodo i = new Nodo(id);
            nuevo.Hijo(i);
            RESULT = nuevo; 
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAMA_FUNCION ::= dolar id llaveAbre PARAMETROS llaveCierra dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).right;
		Nodo param = (Nodo)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)).value;
		
                    Nodo nuevo = new Nodo("LlamaFunc");
                    Nodo nombre = new Nodo(id);
                    nuevo.Hijo(nombre);
                    nuevo.Hijo(param);
                    RESULT = nuevo;
                
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LLAMA_FUNCION",6, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HaskellSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HaskellSintactico$do_action(
    int                        CUP$HaskellSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HaskellSintactico$parser,
    java.util.Stack            CUP$HaskellSintactico$stack,
    int                        CUP$HaskellSintactico$top)
    throws java.lang.Exception
    {
              return CUP$HaskellSintactico$do_action_part00000000(
                               CUP$HaskellSintactico$act_num,
                               CUP$HaskellSintactico$parser,
                               CUP$HaskellSintactico$stack,
                               CUP$HaskellSintactico$top);
    }
}

}
