
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Haskell;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HaskellSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosHaskell.class;
}

  /** Default constructor. */
  @Deprecated
  public HaskellSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HaskellSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HaskellSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\007\000\002\004\005" +
    "\000\002\004\003\000\002\003\003\000\002\003\003\000" +
    "\002\011\004\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\022\011\000\002\023" +
    "\006\000\002\024\004\000\002\024\003\000\002\025\006" +
    "\000\002\021\003\000\002\021\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\013\010\000\002" +
    "\026\006\000\002\027\006\000\002\030\006\000\002\031" +
    "\006\000\002\032\006\000\002\033\003\000\002\033\003" +
    "\000\002\034\006\000\002\035\006\000\002\036\006\000" +
    "\002\037\006\000\002\040\006\000\002\041\006\000\002" +
    "\042\006\000\002\043\004\000\002\044\005\000\002\045" +
    "\005\000\002\014\005\000\002\015\003\000\002\015\003" +
    "\000\002\017\005\000\002\017\003\000\002\016\011\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\010\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\066\007\001\002\000\006\002\ufffe\066" +
    "\ufffe\001\002\000\006\002\000\066\007\001\002\000\004" +
    "\002\263\001\002\000\024\005\017\024\020\032\022\036" +
    "\026\055\035\063\032\064\010\065\015\066\023\001\002" +
    "\000\110\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\001\002\000\010\023\ufffb" +
    "\030\ufffb\035\ufffb\001\002\000\110\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\110\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\001\002\000\110" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\001\002\000\110\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\001\002\000\046\004\057\005\045\006\054\007\041" +
    "\010\051\011\055\012\052\013\043\014\044\015\060\016" +
    "\046\017\056\020\053\021\047\022\050\023\ufffa\030\ufffa" +
    "\035\ufffa\001\002\000\022\005\017\024\020\036\026\055" +
    "\035\063\032\064\010\065\015\066\023\001\002\000\022" +
    "\040\177\041\166\043\170\044\200\045\172\046\174\047" +
    "\202\066\255\001\002\000\006\023\120\030\121\001\002" +
    "\000\024\005\017\024\020\032\105\036\026\055\035\063" +
    "\032\064\010\065\015\066\023\001\002\000\112\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\026\100\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\055\uffa6" +
    "\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\001\002\000\110\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\035\uffac\036\uffac\037\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\001\002\000\110\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000" +
    "\022\005\017\024\020\036\026\055\035\063\032\064\010" +
    "\065\015\066\023\001\002\000\110\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\035\uffae\036\uffae\037\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\001\002\000\110\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad" +
    "\037\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001\002\000\110" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\001\002\000\110\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\001\002\000\110\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000" +
    "\110\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\037\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\001\002\000\004\032\022\001" +
    "\002\000\010\023\ufff9\030\ufff9\035\ufff9\001\002\000\110" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\001\002\000\042\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\053\021\047\022\050" +
    "\037\042\001\002\000\022\005\017\024\020\036\026\055" +
    "\035\063\032\064\010\065\015\066\023\001\002\000\110" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\001\002\000\022\005\017\024\020" +
    "\036\026\055\035\063\032\064\010\065\015\066\023\001" +
    "\002\000\022\005\017\024\020\036\026\055\035\063\032" +
    "\064\010\065\015\066\023\001\002\000\022\005\017\024" +
    "\020\036\026\055\035\063\032\064\010\065\015\066\023" +
    "\001\002\000\022\005\017\024\020\036\026\055\035\063" +
    "\032\064\010\065\015\066\023\001\002\000\022\005\017" +
    "\024\020\036\026\055\035\063\032\064\010\065\015\066" +
    "\023\001\002\000\022\005\017\024\020\036\026\055\035" +
    "\063\032\064\010\065\015\066\023\001\002\000\022\005" +
    "\017\024\020\036\026\055\035\063\032\064\010\065\015" +
    "\066\023\001\002\000\022\005\017\024\020\036\026\055" +
    "\035\063\032\064\010\065\015\066\023\001\002\000\022" +
    "\005\017\024\020\036\026\055\035\063\032\064\010\065" +
    "\015\066\023\001\002\000\022\005\017\024\020\036\026" +
    "\055\035\063\032\064\010\065\015\066\023\001\002\000" +
    "\022\005\017\024\020\036\026\055\035\063\032\064\010" +
    "\065\015\066\023\001\002\000\022\005\017\024\020\036" +
    "\026\055\035\063\032\064\010\065\015\066\023\001\002" +
    "\000\022\005\017\024\020\036\026\055\035\063\032\064" +
    "\010\065\015\066\023\001\002\000\022\005\017\024\020" +
    "\036\026\055\035\063\032\064\010\065\015\066\023\001" +
    "\002\000\110\004\057\005\045\006\054\007\041\010\051" +
    "\011\055\012\052\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036\uffba\037" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\001\002\000\110\004" +
    "\uffc4\005\uffc4\006\054\007\041\010\051\011\055\012\052" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\001\002\000\110\004\057\005\045\006" +
    "\054\007\041\010\051\011\055\012\052\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\001\002\000\110\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\055\012\052\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\001\002\000\110" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\055\012" +
    "\052\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\066\uffc2\001\002\000\110\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066" +
    "\uffb9\001\002\000\110\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\011\055\012\052\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000" +
    "\110\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\055" +
    "\012\052\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\110\004\057\005" +
    "\045\006\054\007\041\010\051\011\055\012\052\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\035\uffb6\036\uffb6\037\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\001\002\000\110\004\057\005\045\006\054\007" +
    "\041\010\051\011\055\012\052\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061" +
    "\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002" +
    "\000\110\004\057\005\045\006\054\007\041\010\051\011" +
    "\055\012\052\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\110\004\uffc3" +
    "\005\uffc3\006\054\007\041\010\051\011\055\012\052\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\001\002\000\110\004\057\005\045\006\054" +
    "\007\041\010\051\011\055\012\052\013\uffbc\014\uffbc\015" +
    "\060\016\046\017\056\020\053\021\047\022\050\023\uffbc" +
    "\024\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001" +
    "\002\000\110\004\057\005\045\006\054\007\041\010\051" +
    "\011\055\012\052\013\uffbd\014\044\015\060\016\046\017" +
    "\056\020\053\021\047\022\050\023\uffbd\024\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001\002\000\110\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\055\012\052" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\001\002\000\022\005\017\024\020\036" +
    "\026\055\035\063\032\064\010\065\015\066\023\001\002" +
    "\000\110\004\057\005\045\006\054\007\041\010\051\011" +
    "\055\012\052\013\043\014\044\015\060\016\046\017\056" +
    "\020\053\021\047\022\050\023\uffcb\024\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\001\002\000\004\033\117" +
    "\001\002\000\044\004\057\005\045\006\054\007\041\010" +
    "\051\011\055\012\052\013\043\014\044\015\060\016\046" +
    "\017\056\020\053\021\047\022\050\030\uffc6\033\uffc6\001" +
    "\002\000\004\033\uffc8\001\002\000\022\005\017\024\020" +
    "\036\026\055\035\063\032\064\010\065\015\066\023\001" +
    "\002\000\006\030\107\033\uffc9\001\002\000\022\005\017" +
    "\024\020\036\026\055\035\063\032\064\010\065\015\066" +
    "\023\001\002\000\044\004\057\005\045\006\054\007\041" +
    "\010\051\011\055\012\052\013\043\014\044\015\060\016" +
    "\046\017\056\020\053\021\047\022\050\030\uffc7\033\uffc7" +
    "\001\002\000\006\030\107\033\112\001\002\000\004\030" +
    "\113\001\002\000\004\032\114\001\002\000\022\005\017" +
    "\024\020\036\026\055\035\063\032\064\010\065\015\066" +
    "\023\001\002\000\006\030\107\033\116\001\002\000\004" +
    "\033\uffc5\001\002\000\112\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\035\uffca\036\uffca\037\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\001\002\000\016\024\135\032\022\055\035\056\153\061" +
    "\127\066\136\001\002\000\024\005\017\024\020\032\022" +
    "\036\026\055\035\063\032\064\010\065\015\066\023\001" +
    "\002\000\010\023\ufffc\030\ufffc\035\ufffc\001\002\000\024" +
    "\024\uffe0\031\uffe0\032\uffe0\055\uffe0\056\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\066\uffe0\001\002\000\024\024\uffde\031\uffde" +
    "\032\uffde\055\uffde\056\uffde\060\uffde\061\uffde\062\uffde\066" +
    "\uffde\001\002\000\024\024\uffe5\031\uffe5\032\uffe5\055\uffe5" +
    "\056\uffe5\060\uffe5\061\uffe5\062\uffe5\066\uffe5\001\002\000" +
    "\020\024\135\032\022\055\035\056\153\061\127\062\254" +
    "\066\136\001\002\000\024\005\017\024\020\032\022\036" +
    "\026\055\035\063\032\064\010\065\015\066\023\001\002" +
    "\000\024\024\uffe6\031\uffe6\032\uffe6\055\uffe6\056\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\066\uffe6\001\002\000\024\024\ufff6" +
    "\031\ufff6\032\ufff6\055\ufff6\056\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\066\ufff6\001\002\000\024\024\uffec\031\uffec\032\uffec" +
    "\055\uffec\056\uffec\060\uffec\061\uffec\062\uffec\066\uffec\001" +
    "\002\000\024\024\ufff7\031\ufff7\032\ufff7\055\ufff7\056\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\066\ufff7\001\002\000\024\024" +
    "\ufff4\031\ufff4\032\ufff4\055\ufff4\056\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\066\ufff4\001\002\000\034\040\177\041\166\042" +
    "\167\043\170\044\200\045\172\046\174\047\202\050\176" +
    "\051\171\052\175\053\201\054\173\001\002\000\004\026" +
    "\100\001\002\000\024\024\uffe4\031\uffe4\032\uffe4\055\uffe4" +
    "\056\uffe4\060\uffe4\061\uffe4\062\uffe4\066\uffe4\001\002\000" +
    "\024\024\uffe2\031\uffe2\032\uffe2\055\uffe2\056\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\066\uffe2\001\002\000\024\024\uffdf\031" +
    "\uffdf\032\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\066\uffdf\001\002\000\024\024\uffe9\031\uffe9\032\uffe9\055" +
    "\uffe9\056\uffe9\060\uffe9\061\uffe9\062\uffe9\066\uffe9\001\002" +
    "\000\024\024\ufff5\031\ufff5\032\ufff5\055\ufff5\056\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\066\ufff5\001\002\000\024\024\uffdd" +
    "\031\uffdd\032\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\066\uffdd\001\002\000\024\024\uffea\031\uffea\032\uffea" +
    "\055\uffea\056\uffea\060\uffea\061\uffea\062\uffea\066\uffea\001" +
    "\002\000\024\024\uffe8\031\uffe8\032\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\066\uffe8\001\002\000\024\024" +
    "\uffe1\031\uffe1\032\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\066\uffe1\001\002\000\024\024\uffeb\031\uffeb\032" +
    "\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\062\uffeb\066\uffeb" +
    "\001\002\000\024\024\uffe7\031\uffe7\032\uffe7\055\uffe7\056" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7\001\002\000\004" +
    "\025\164\001\002\000\022\005\017\024\020\036\026\055" +
    "\035\063\032\064\010\065\015\066\023\001\002\000\024" +
    "\024\uffe3\031\uffe3\032\uffe3\055\uffe3\056\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\066\uffe3\001\002\000\042\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\053\021\047\022\050" +
    "\057\156\001\002\000\016\024\135\032\022\055\035\056" +
    "\153\061\127\066\136\001\002\000\020\024\135\032\022" +
    "\055\035\056\153\060\160\061\127\066\136\001\002\000" +
    "\016\024\135\032\022\055\035\056\153\061\127\066\136" +
    "\001\002\000\024\024\ufff8\031\ufff8\032\ufff8\055\ufff8\056" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\066\ufff8\001\002\000\020" +
    "\024\135\032\022\055\035\056\153\061\127\062\163\066" +
    "\136\001\002\000\024\024\ufff3\031\ufff3\032\ufff3\055\ufff3" +
    "\056\ufff3\060\ufff3\061\ufff3\062\ufff3\066\ufff3\001\002\000" +
    "\004\032\022\001\002\000\024\024\uffcc\031\uffcc\032\uffcc" +
    "\055\uffcc\056\uffcc\060\uffcc\061\uffcc\062\uffcc\066\uffcc\001" +
    "\002\000\022\005\017\024\020\036\026\055\035\063\032" +
    "\064\010\065\015\066\023\001\002\000\004\066\233\001" +
    "\002\000\024\005\017\024\020\032\022\036\026\055\035" +
    "\063\032\064\010\065\015\066\023\001\002\000\004\032" +
    "\022\001\002\000\022\005\017\024\020\036\026\055\035" +
    "\063\032\064\010\065\015\066\023\001\002\000\004\032" +
    "\022\001\002\000\004\032\022\001\002\000\004\032\022" +
    "\001\002\000\004\032\022\001\002\000\022\005\017\024" +
    "\020\036\026\055\035\063\032\064\010\065\015\066\023" +
    "\001\002\000\024\005\017\024\020\032\022\036\026\055" +
    "\035\063\032\064\010\065\015\066\023\001\002\000\004" +
    "\032\022\001\002\000\004\032\022\001\002\000\004\024" +
    "\204\001\002\000\110\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000" +
    "\004\024\206\001\002\000\024\024\uffcf\031\uffcf\032\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\061\uffcf\062\uffcf\066\uffcf\001" +
    "\002\000\004\024\212\001\002\000\042\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\053\021\047\022\050" +
    "\024\uffd6\001\002\000\004\024\uffd5\001\002\000\110\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\001\002\000\042\004\057\005\045\006" +
    "\054\007\041\010\051\011\055\012\052\013\043\014\044" +
    "\015\060\016\046\017\056\020\053\021\047\022\050\024" +
    "\214\001\002\000\110\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036" +
    "\uffda\037\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\001\002\000" +
    "\004\024\216\001\002\000\024\024\uffd2\031\uffd2\032\uffd2" +
    "\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\066\uffd2\001" +
    "\002\000\004\024\220\001\002\000\024\024\uffd0\031\uffd0" +
    "\032\uffd0\055\uffd0\056\uffd0\060\uffd0\061\uffd0\062\uffd0\066" +
    "\uffd0\001\002\000\004\024\222\001\002\000\110\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\001\002\000\004\024\224\001\002\000\024" +
    "\024\uffce\031\uffce\032\uffce\055\uffce\056\uffce\060\uffce\061" +
    "\uffce\062\uffce\066\uffce\001\002\000\042\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\053\021\047\022\050" +
    "\024\226\001\002\000\110\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002" +
    "\000\004\024\230\001\002\000\024\024\uffd1\031\uffd1\032" +
    "\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\062\uffd1\066\uffd1" +
    "\001\002\000\004\024\232\001\002\000\110\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\035\uffd8\036\uffd8\037\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\001\002\000\004\023\234\001\002\000\004\032" +
    "\022\001\002\000\004\024\236\001\002\000\024\024\uffdc" +
    "\031\uffdc\032\uffdc\055\uffdc\056\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\066\uffdc\001\002\000\042\004\057\005\045\006\054" +
    "\007\041\010\051\011\055\012\052\013\043\014\044\015" +
    "\060\016\046\017\056\020\053\021\047\022\050\024\240" +
    "\001\002\000\110\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\001\002\000\024" +
    "\005\017\024\020\032\022\036\026\055\035\063\032\064" +
    "\010\065\015\066\023\001\002\000\062\004\057\005\045" +
    "\006\054\007\041\010\051\011\055\012\052\013\043\014" +
    "\044\015\060\016\046\017\056\020\053\021\047\022\050" +
    "\024\uffee\027\uffee\032\uffee\036\uffee\055\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\001\002\000\026\005\uffed\024\uffed" +
    "\027\uffed\032\uffed\036\uffed\055\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\001\002\000\026\005\017\024\020\032\022" +
    "\036\026\055\035\062\253\063\032\064\010\065\015\066" +
    "\023\001\002\000\004\027\247\001\002\000\026\005\ufff0" +
    "\024\ufff0\032\ufff0\036\ufff0\055\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\001\002\000\016\024\135\032\022" +
    "\055\035\056\153\061\127\066\136\001\002\000\020\024" +
    "\135\031\251\032\022\055\035\056\153\061\127\066\136" +
    "\001\002\000\026\005\uffef\024\uffef\032\uffef\036\uffef\055" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\001\002" +
    "\000\026\005\ufff1\024\ufff1\032\ufff1\036\ufff1\055\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\001\002\000\024" +
    "\024\ufff2\031\ufff2\032\ufff2\055\ufff2\056\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\066\ufff2\001\002\000\006\002\ufffd\066\ufffd" +
    "\001\002\000\004\034\256\001\002\000\024\005\017\024" +
    "\020\032\022\036\026\055\035\063\032\064\010\065\015" +
    "\066\023\001\002\000\006\030\121\035\260\001\002\000" +
    "\004\024\261\001\002\000\110\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\110\004\uffb2\005\uffb2\006\054\007\041\010\051" +
    "\011\055\012\052\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\066\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\010\002\005\005\004\006\003\001\001\000" +
    "\002\001\001\000\004\006\263\001\001\000\002\001\001" +
    "\000\036\003\010\004\020\010\013\014\035\020\015\026" +
    "\032\027\027\030\023\031\030\032\033\034\012\035\011" +
    "\043\024\045\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\013\020" +
    "\261\026\032\027\027\030\023\031\030\032\033\034\012" +
    "\035\011\043\024\045\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\013\015\101\016\103\017\105" +
    "\020\102\026\032\027\027\030\023\031\030\032\033\034" +
    "\012\035\011\043\024\045\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\013\020" +
    "\037\026\032\027\027\030\023\031\030\032\033\034\012" +
    "\035\011\043\024\045\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\013\020\076\026\032\027\027\030\023\031\030\032" +
    "\033\034\012\035\011\043\024\045\026\001\001\000\002" +
    "\001\001\000\030\010\013\020\075\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\074\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\073\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\072\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\071\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\070\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\067\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\066\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\065\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\064\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\063\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\062\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\061\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\030\010\013\020\060\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\013\020\100\026\032\027\027\030\023\031\030\032\033" +
    "\034\012\035\011\043\024\045\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\013\017\110\020\102\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\002\001\001\000\030\010\013\020\107\026" +
    "\032\027\027\030\023\031\030\032\033\034\012\035\011" +
    "\043\024\045\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\013" +
    "\017\114\020\102\026\032\027\027\030\023\031\030\032" +
    "\033\034\012\035\011\043\024\045\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\133\011\125\012\132\013\131\014\151\022\130\023\142" +
    "\026\147\027\144\030\141\031\145\032\150\034\127\035" +
    "\124\036\136\037\153\040\137\041\146\042\122\043\140" +
    "\044\123\045\143\001\001\000\034\003\121\010\013\014" +
    "\035\020\015\026\032\027\027\030\023\031\030\032\033" +
    "\034\012\035\011\043\024\045\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\007\133\012\160\013\131\014\151\022\130\023" +
    "\142\026\147\027\144\030\141\031\145\032\150\034\127" +
    "\035\124\036\136\037\153\040\137\041\146\042\122\043" +
    "\140\044\123\045\143\001\001\000\034\010\013\014\242" +
    "\020\241\021\240\026\032\027\027\030\023\031\030\032" +
    "\033\034\012\035\011\043\024\045\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\013" +
    "\020\154\026\032\027\027\030\023\031\030\032\033\034" +
    "\012\035\011\043\024\045\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\007\133\011\156\012\132\013" +
    "\131\014\151\022\130\023\142\026\147\027\144\030\141" +
    "\031\145\032\150\034\127\035\124\036\136\037\153\040" +
    "\137\041\146\042\122\043\140\044\123\045\143\001\001" +
    "\000\054\007\133\012\160\013\131\014\151\022\130\023" +
    "\142\026\147\027\144\030\141\031\145\032\150\034\127" +
    "\035\124\036\136\037\153\040\137\041\146\042\122\043" +
    "\140\044\123\045\143\001\001\000\056\007\133\011\161" +
    "\012\132\013\131\014\151\022\130\023\142\026\147\027" +
    "\144\030\141\031\145\032\150\034\127\035\124\036\136" +
    "\037\153\040\137\041\146\042\122\043\140\044\123\045" +
    "\143\001\001\000\002\001\001\000\054\007\133\012\160" +
    "\013\131\014\151\022\130\023\142\026\147\027\144\030" +
    "\141\031\145\032\150\034\127\035\124\036\136\037\153" +
    "\040\137\041\146\042\122\043\140\044\123\045\143\001" +
    "\001\000\002\001\001\000\004\014\164\001\001\000\002" +
    "\001\001\000\030\010\013\020\236\026\032\027\027\030" +
    "\023\031\030\032\033\034\012\035\011\043\024\045\026" +
    "\001\001\000\002\001\001\000\034\010\013\014\210\020" +
    "\207\026\032\027\027\030\023\031\030\032\033\033\230" +
    "\034\012\035\011\043\024\045\026\001\001\000\004\014" +
    "\226\001\001\000\030\010\013\020\224\026\032\027\027" +
    "\030\023\031\030\032\033\034\012\035\011\043\024\045" +
    "\026\001\001\000\004\014\222\001\001\000\004\014\220" +
    "\001\001\000\004\014\216\001\001\000\004\014\214\001" +
    "\001\000\030\010\013\020\212\026\032\027\027\030\023" +
    "\031\030\032\033\034\012\035\011\043\024\045\026\001" +
    "\001\000\034\010\013\014\210\020\207\026\032\027\027" +
    "\030\023\031\030\032\033\033\206\034\012\035\011\043" +
    "\024\045\026\001\001\000\004\014\204\001\001\000\004" +
    "\014\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\013" +
    "\014\242\020\241\021\244\024\243\025\245\026\032\027" +
    "\027\030\023\031\030\032\033\034\012\035\011\043\024" +
    "\045\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\013\014\242\020\241\021\244\025\251\026\032" +
    "\027\027\030\023\031\030\032\033\034\012\035\011\043" +
    "\024\045\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\133\011\247\012\132\013\131\014\151\022" +
    "\130\023\142\026\147\027\144\030\141\031\145\032\150" +
    "\034\127\035\124\036\136\037\153\040\137\041\146\042" +
    "\122\043\140\044\123\045\143\001\001\000\054\007\133" +
    "\012\160\013\131\014\151\022\130\023\142\026\147\027" +
    "\144\030\141\031\145\032\150\034\127\035\124\036\136" +
    "\037\153\040\137\041\146\042\122\043\140\044\123\045" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\010\004\256\010\013\014\035\020\015\026\032\027\027" +
    "\030\023\031\030\032\033\034\012\035\011\043\024\045" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HaskellSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HaskellSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HaskellSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+1);
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+1);
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HaskellSintactico$actions {



  private final HaskellSintactico parser;

  /** Constructor */
  CUP$HaskellSintactico$actions(HaskellSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HaskellSintactico$do_action_part00000000(
    int                        CUP$HaskellSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HaskellSintactico$parser,
    java.util.Stack            CUP$HaskellSintactico$stack,
    int                        CUP$HaskellSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HaskellSintactico$result;

      /* select the action based on the action number */
      switch (CUP$HaskellSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)).value;
		RESULT = start_val;
              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HaskellSintactico$parser.done_parsing();
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCION ::= FUNCION L_FUNCION 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCION ::= L_FUNCION 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_FUNCION ::= id PARAMETROS igual CUERPO fin 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_FUNCION",4, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARAMETROS ::= PARAMETROS coma L_PARAM 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROS ::= L_PARAM 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",2, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_PARAM ::= EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_PARAM ::= LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_PARAM",1, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= CUERPO L_CUERPO 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= L_CUERPO 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L_CUERPO ::= IF 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L_CUERPO ::= CASE 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // L_CUERPO ::= FUNCIONES_PROPIAS 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CUERPO",8, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IF ::= si EXP entonces CUERPO sino CUERPO fin 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASE ::= caso EXP_CASO CASOS fin 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASE",17, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASOS ::= CASOS L_CASOS 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",18, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASOS ::= L_CASOS 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CASOS",18, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // L_CASOS ::= EXP_CASO dospuntos CUERPO puntoycoma 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("L_CASOS",19, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP_CASO ::= EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP_CASO",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP_CASO ::= LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP_CASO",15, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES_PROPIAS ::= DECLARA_LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES_PROPIAS ::= CALCULAR 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES_PROPIAS ::= SUCC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES_PROPIAS ::= DECC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONES_PROPIAS ::= MIN 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONES_PROPIAS ::= MAX 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES_PROPIAS ::= SUM 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES_PROPIAS ::= PRODUCT 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES_PROPIAS ::= REVERS 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES_PROPIAS ::= IMPR 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES_PROPIAS ::= PAR 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES_PROPIAS ::= ASC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES_PROPIAS ::= DESC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES_PROPIAS ::= LENGTH 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES_PROPIAS ::= CONCATENA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES_PROPIAS ::= INDICE 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES_PROPIAS",5, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARA_LISTA ::= dolar let id igual LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DECLARA_LISTA",9, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CALCULAR ::= dolar calcular EXP dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CALCULAR",20, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUCC ::= dolar succ EXP dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("SUCC",21, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECC ::= dolar decc EXP dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DECC",22, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MIN ::= dolar min M dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MIN",23, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAX ::= dolar max M dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MAX",24, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // M ::= EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("M",25, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // M ::= LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("M",25, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SUM ::= dolar sum LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("SUM",26, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PRODUCT ::= dolar product LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PRODUCT",27, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // REVERS ::= dolar revers LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("REVERS",28, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMPR ::= dolar impr LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("IMPR",29, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PAR ::= dolar par LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("PAR",30, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASC ::= dolar asc LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("ASC",31, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DESC ::= dolar desc LISTA dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("DESC",32, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LENGTH ::= tam LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LENGTH",33, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONCATENA ::= LISTA concatena LISTA 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("CONCATENA",34, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INDICE ::= id indice EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("INDICE",35, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA ::= corAbre LISTAS corCierra 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",10, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTAS ::= EXPRESIONES 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",11, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTAS ::= MAS_CORCH 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LISTAS",11, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESIONES ::= EXPRESIONES coma EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",13, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESIONES ::= EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",13, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MAS_CORCH ::= corAbre EXPRESIONES corCierra coma corAbre EXPRESIONES corCierra 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("MAS_CORCH",12, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= EXP mas EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP menos EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP por EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP div EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP residuo EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= EXP sqrt EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= EXP pot EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= EXP or EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= EXP and EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP menorq EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP mayorq EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= EXP menorigualq EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP mayorigualq EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP igualigual EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP diferente EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= SUM 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= PRODUCT 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= LENGTH 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= menos EXP 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= parenAbre EXP parenCierra 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= CALCULAR 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= LLAMA_FUNCION 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= INDICE 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= SUCC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= DECC 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= MIN 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= MAX 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= entero 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= cadena 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= caracter 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= id 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAMA_FUNCION ::= dolar id llaveAbre PARAMETROS llaveCierra dolar 
            {
              Object RESULT =null;

              CUP$HaskellSintactico$result = parser.getSymbolFactory().newSymbol("LLAMA_FUNCION",6, ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.elementAt(CUP$HaskellSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$HaskellSintactico$stack.peek()), RESULT);
            }
          return CUP$HaskellSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HaskellSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HaskellSintactico$do_action(
    int                        CUP$HaskellSintactico$act_num,
    java_cup.runtime.lr_parser CUP$HaskellSintactico$parser,
    java.util.Stack            CUP$HaskellSintactico$stack,
    int                        CUP$HaskellSintactico$top)
    throws java.lang.Exception
    {
              return CUP$HaskellSintactico$do_action_part00000000(
                               CUP$HaskellSintactico$act_num,
                               CUP$HaskellSintactico$parser,
                               CUP$HaskellSintactico$stack,
                               CUP$HaskellSintactico$top);
    }
}

}
