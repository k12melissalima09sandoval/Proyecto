/*------------ Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Analizadores.Haskell;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Ast.Nodo;

//------> Parser, Variables y Metodos

parser code
{: 
    public static LinkedList<Analizadores.Errores> Err = new LinkedList<Analizadores.Errores>();
    
    public void syntax_error(Symbol s)
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+2);
        
        System.out.println("Error Sintactico Recuperado: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String texto = s.value.toString();
        int columna = s.right+1;
        int fila = (s.left+2);
        
        System.out.println("Error Sintactico Modo Panico: "+texto+" Fila: "+fila+" Columna: " +columna);
        Analizadores.Errores err = new Analizadores.Errores("Sintactico: ","No se esperaba: ",texto,fila,columna);
        Err.add(err);
    }
:}

//------> Acciones Gramaticales 
action code 
{:
    Nodo raiz = new Nodo();
:}

/*------------ Declaraciones Terminales y No Terminales ---------*/


/*------------ Reglas Semanticas ---------*/

terminal mas, menos, por, div, residuo, sqrt, pot;
terminal or, and;
terminal mayorq, menorq, mayorigualq, menorigualq, igualigual, diferente;
terminal igual, dolar, concatena, indice, dospuntos, coma, puntoycoma; 
terminal corAbre, corCierra, llaveAbre, llaveCierra, parenAbre, parenCierra;
terminal succ, decc, let, min, max, calcular;
terminal sum, product, revers, impr, par, asc, desc, tam;
terminal si, entonces, sino, caso, fin;
terminal entero, cadena, caracter, id;

non terminal Nodo INICIO;
non terminal Nodo L_PARAM, PARAMETROS;
non terminal Nodo FUNCION,L_FUNCION, FUNCIONES_PROPIAS, LLAMA_FUNCION;
non terminal Nodo CUERPO, L_CUERPO;
non terminal Nodo DECLARA_LISTA, LISTA, LISTAS, MAS_CORCH, EXPRESIONES, EXP_CASO;
non terminal Nodo EXP,CALCULAR;
non terminal Nodo IF, CASE, CASOS, L_CASOS;
non terminal Nodo SUCC, DECC, MIN, MAX, M, C_L;
non terminal Nodo SUM, PRODUCT, REVERS, IMPR, PAR, ASC, DESC, LENGTH, CONCATENA, INDICE;

precedence left or;
precedence left and;
precedence left igualigual, diferente, mayorq, menorq, mayorigualq, menorigualq;
precedence left mas, menos;
precedence left por, div, residuo; 
precedence right pot, sqrt;

start with INICIO;

INICIO ::= {:
                System.out.println("Empezo\n");
           :}
            FUNCION 
            {:
                System.out.println("Finalizo\n");
            :} 
    ;

FUNCION ::= FUNCION L_FUNCION
        | L_FUNCION
        ;

L_FUNCION ::= id:name PARAMETROS:param igual CUERPO:corpo fin
                {:
                    Nodo nuevo = new Nodo("Funcion");
                    Nodo nombre = new Nodo(name);
                    Nodo cuerpo = new Nodo("CuerpoFuncion");
                    cuerpo.Hijo(corpo);
                    nuevo.Hijo(nombre);
                    nuevo.Hijo(param);
                    nuevo.Hijo(cuerpo);
                    RESULT = nuevo;
                :}
            ;

PARAMETROS ::= PARAMETROS:param coma L_PARAM:p
                {:  
                    param.Hijo(p); 
                    RESULT= param;
                :}
            | L_PARAM:exp
                {:
                    Nodo nuevo = new Nodo("Parametros");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                :}
            ;

L_PARAM ::= EXP:exp
            {:
                Nodo nuevo = new Nodo("Exp");
                nuevo.Hijo(exp);
                RESULT = nuevo;
            :}
        | LISTA:lista
            {: RESULT = lista; :}
        ;

CUERPO ::= CUERPO:sent L_CUERPO:cuerpo
            {:
                sent.Hijo(cuerpo);
                RESULT=sent;
            :}
        | L_CUERPO:sentencia
            {:
                Nodo nuevo = new Nodo("Sentencias");
                nuevo.Hijo(sentencia);
                RESULT = nuevo;
            :}
        ;

L_CUERPO ::= IF:nodo
            {: RESULT = nodo; :}
          | CASE:nodo
            {: RESULT = nodo; :}
          | FUNCIONES_PROPIAS:nodo
            {: RESULT = nodo; :}
          | LLAMA_FUNCION:nodo
            {: RESULT = nodo; :}
          ;

IF ::= si EXP:exp entonces CUERPO:corpoif sino CUERPO:corposino fin
        {:
            Nodo nuevo = new Nodo("If");
            Nodo novo = new Nodo("Else");
            Nodo cuerpo = new Nodo("CuerpoIf");
            Nodo cuerpo2 = new Nodo("CuerpoSino");
            Nodo cond = new Nodo("Exp");
            cond.Hijo(exp);
            cuerpo.Hijo(corpoif);
            cuerpo2.Hijo(corposino);
            nuevo.Hijo(cond);
            nuevo.Hijo(cuerpo);
            nuevo.Hijo(cuerpo2);
            RESULT = nuevo;            
        :}
    ;

CASE ::= caso EXP_CASO:exp CASOS:corpo fin
        {:
            Nodo nuevo = new Nodo("Case");
            Nodo cuerpo = new Nodo("Cuerpo_Caso");
            cuerpo.Hijo(corpo);
            nuevo.Hijo(exp);
            nuevo.Hijo(cuerpo);
            RESULT = nuevo;
        :}
      ;

CASOS ::= CASOS:caso L_CASOS:exp
        {:
            caso.Hijo(exp);
            RESULT = caso;
        :}
       | L_CASOS:exp
        {:
            Nodo nuevo = new Nodo("Lista_Casos");
            nuevo.Hijo(exp);
            RESULT = nuevo;
        :}
       ;

L_CASOS ::= EXP_CASO:v dospuntos CUERPO:corpo puntoycoma
            {:
                Nodo nuevo = new Nodo("Caso");
                Nodo valor = new Nodo(v);
                Nodo cuerpo = new Nodo("Cuerpo_Caso");
                cuerpo.Hijo(corpo);
                nuevo.Hijo(valor);
                nuevo.Hijo(cuerpo);
                RESULT = nuevo;
            :}
        ;

EXP_CASO ::= EXP:exp
                {:  Nodo nuevo = new Nodo("Exp");
                    nuevo.Hijo(exp);
                    RESULT = nuevo;
                :}
          | LISTA:lista
                {:RESULT = lista;:}
          ;

FUNCIONES_PROPIAS ::= DECLARA_LISTA:nodo
                        {: RESULT = nodo; :}
                    | CALCULAR:nodo
                        {: RESULT = nodo; :}
                    | SUCC:nodo
                        {: RESULT = nodo; :}
                    | DECC:nodo
                        {: RESULT = nodo; :}
                    | MIN:nodo
                        {: RESULT = nodo; :}
                    | MAX:nodo
                        {: RESULT = nodo; :}
                    | SUM:nodo
                        {: RESULT = nodo; :}
                    | PRODUCT:nodo
                        {: RESULT = nodo; :}
                    | REVERS:nodo
                        {: RESULT = nodo; :}
                    | IMPR:nodo
                        {: RESULT = nodo; :}
                    | PAR:nodo
                        {: RESULT = nodo; :}
                    | ASC:nodo
                        {: RESULT = nodo; :}
                    | DESC:nodo
                        {: RESULT = nodo; :}
                    | LENGTH:nodo
                        {: RESULT = nodo; :}
                    | CONCATENA:nodo
                        {: RESULT = nodo; :}
                    | INDICE:nodo
                        {: RESULT = nodo; :}
                    ;

DECLARA_LISTA ::= dolar let id:nombre igual CONCATENA:exp dolar
                {:
                    Nodo nuevo = new Nodo("D_Lista");
                    Nodo name = new Nodo(nombre);
                    Nodo igual = new Nodo(exp);
                    nuevo.Hijo(name);
                    nuevo.Hijo(igual);
                    RESULT = nuevo;
                :}
               ;

CALCULAR ::= dolar calcular:calcula EXP:exp dolar
            {:
                Nodo cal = new Nodo("Calcular");
                Nodo expresion = new Nodo("Exp");
                expresion.Hijo(exp);
                cal.Hijo(expresion);
                RESULT = cal;
            :}
          ;

SUCC ::= dolar succ EXP:exp dolar
        {:
            Nodo nuevo = new Nodo("Succ");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
      ;

DECC ::= dolar decc EXP:exp dolar
        {:
            Nodo nuevo = new Nodo("Decc");
            Nodo lista = new Nodo("Exp");
            lista.Hijo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
      ;

MIN ::= dolar min M:exp dolar
        {:
            Nodo nuevo = new Nodo("Min");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
     ;

MAX ::= dolar max M:exp dolar
        {:
            Nodo nuevo = new Nodo("Max");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
     ;

M ::= id:id
        {: RESULT = new Nodo(id); :}
    | LISTA:lista
        {: RESULT = lista; :}
    ;

SUM ::= dolar sum CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Sum");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
     ;

PRODUCT ::= dolar product CONCATENA:exp dolar
            {:
            Nodo nuevo = new Nodo("Product");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
        ;

REVERS ::= dolar revers CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Revers");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
        ;

IMPR ::= dolar impr CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Impr");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
      ;

PAR ::= dolar par CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Par");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
     ;

ASC ::= dolar asc CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Asc");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
     ;

DESC ::= dolar desc CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Desc");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
      ;

LENGTH ::= dolar tam CONCATENA:exp dolar
        {:
            Nodo nuevo = new Nodo("Length");
            Nodo lista = new Nodo(exp);
            nuevo.Hijo(lista);
            RESULT = nuevo;
        :}
        ;

CONCATENA ::= CONCATENA:c concatena C_L:l
            {: 
                c.Hijo(l);  
                RESULT = c; 
            :}
           | C_L:l
            {:
                Nodo lista = new Nodo("Lista");
                lista.Hijo(l);
                RESULT = lista;
            :}
           ;

C_L ::= LISTA:lista
        {:RESULT = lista;:}
     | id:id
        {: RESULT = new Nodo(id);:}
     ;

INDICE ::= id:id indice EXP:exp
            {:
                Nodo nuevo = new Nodo("Indice");
                Nodo nombre = new Nodo(id);
                Nodo e = new Nodo("Exp");
                e.Hijo(exp);
                nuevo.Hijo(nombre);
                nuevo.Hijo(e);
                RESULT = nuevo;
            :}
        ;

LISTA ::= corAbre LISTAS:listas corCierra
            {: RESULT = listas; :}
       ;

LISTAS ::= EXPRESIONES:exp
            {:RESULT = exp; :}
        | MAS_CORCH:lista
            {:RESULT = lista; :}
            
        ;

EXPRESIONES ::= EXPRESIONES:lista coma EXP:exp
                {:  
                    lista.Hijo(exp); 
                    RESULT = lista; 
                :}
            | EXP:exp
                {: 
                    Nodo lista = new Nodo("Lista");
                    Nodo e = new Nodo("Exp");
                    e.Hijo(exp);
                    lista.Hijo(e); 
                    RESULT = lista; 
                :}
            ;

MAS_CORCH ::= corAbre EXPRESIONES:nivel1 corCierra coma corAbre EXPRESIONES:nivel2 corCierra
                {:Nodo nivel = new Nodo("2Niveles");
                    nivel.Hijo(nivel1);
                    nivel.Hijo(nivel2);
                    RESULT = nivel;
                :}
          ;

EXP ::= EXP:j mas EXP:m
        {:
            Nodo nuevo = new Nodo("+");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j menos EXP:m
        {:
            Nodo nuevo = new Nodo("-");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j por EXP:m
        {:
            Nodo nuevo = new Nodo("*");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j div EXP:m
        {:
            Nodo nuevo = new Nodo("/");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j residuo EXP:m
        {:
            Nodo nuevo = new Nodo("mod");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j sqrt EXP:m
        {:
            Nodo nuevo = new Nodo("sqrt");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j pot EXP:m
        {:
            Nodo nuevo = new Nodo("pot");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j or EXP:m
        {:
            Nodo nuevo = new Nodo("||");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j and EXP:m
        {:
            Nodo nuevo = new Nodo("&&");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j menorq EXP:m
        {:
            Nodo nuevo = new Nodo("<");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j mayorq EXP:m
        {:
            Nodo nuevo = new Nodo(">");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j menorigualq EXP:m
        {:
            Nodo nuevo = new Nodo("<=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j mayorigualq EXP:m
        {:
            Nodo nuevo = new Nodo(">=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j igualigual EXP:m
        {:
            Nodo nuevo = new Nodo("==");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | EXP:j diferente EXP:m
        {:
            Nodo nuevo = new Nodo("!=");
            nuevo.Hijo(j);
            nuevo.Hijo(m);
            RESULT = nuevo;
        :}
     | SUM:nodo
        {: RESULT = nodo; :}
     | PRODUCT:nodo
        {: RESULT = nodo; :}
     | LENGTH:nodo
        {: RESULT = nodo; :}
     | menos EXP:nodo
     | parenAbre EXP:nodo parenCierra 
        {: RESULT = nodo; :}
     | CALCULAR:nodo
        {: RESULT = nodo; :}
     | LLAMA_FUNCION:nodo 
        {: RESULT = nodo; :}
     | INDICE:nodo
        {: RESULT = nodo; :}
     | SUCC:nodo
        {: RESULT = nodo; :}
     | DECC:nodo
        {: RESULT = nodo; :}
     | MIN:nodo
        {: RESULT = nodo; :}
     | MAX:nodo
        {: RESULT = nodo; :}
     | entero:num
        {: RESULT = new Nodo(num); :}
     | cadena:cad
        {: RESULT = new Nodo(cad); :}
     | caracter:letra
        {: RESULT = new Nodo(letra); :}
     | id:id
        {:  RESULT = new Nodo(id); :}
     ;

LLAMA_FUNCION ::= dolar id llaveAbre PARAMETROS llaveCierra dolar
               ;

